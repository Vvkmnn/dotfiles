# Inputs ------------------------------------------------------------------
## Nodes:
# /insights is new /stats; gets ad data at the account and id level
# /keywordstats = interests in ad manager UI
## Variables
# Number of Ads to Pull
ads = 2000 #So far, only 200 in the account.
## Parameters:
#[1] All valid values are: date_start, date_stop, account_id, account_name, adgroup_id, adgroup_name, campaign_group_id, campaign_group_name, campaign_id, campaign_name, action_carousel_card_id, action_carousel_card_name, actions, unique_actions, total_actions, total_unique_actions, action_values, total_action_value, impressions, social_impressions, clicks, social_clicks, unique_impressions, unique_social_impressions, unique_clicks, unique_social_clicks, spend, frequency, social_spend, deeplink_clicks, app_store_clicks, website_clicks, call_to_action_clicks, newsfeed_avg_position, newsfeed_impressions, newsfeed_clicks, reach, social_reach, ctr, unique_ctr, cpc, cpm, cpp, cost_per_total_action, cost_per_action_type, cost_per_unique_click, cost_per_10_sec_video_view, relevance_score, website_ctr, video_avg_sec_watched_actions, video_avg_pct_watched_actions, video_p25_watched_actions, video_p50_watched_actions, video_p75_watched_actions, video_p95_watched_actions, video_p100_watched_actions, video_complete_watched_actions, video_10_sec_watched_actions, video_15_sec_watched_actions, video_30_sec_watched_actions"
# Processing --------------------------------------------------------------
### Intial Batch Ad Pull
# Dataframe and Query Result holder
initialcontent <- NULL
after <- NULL
# Pull all ad ids and names, batch mode, intialize at error for try/except
initialreq$status_code <- 400
count <- 0
# Try/Except for first batch
initialreq <- tryCatch({
GET(paste0("https://graph.facebook.com/v2.7/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
})
# Look into Packet
str(content(initialreq))
initialcontent <- content(initialreq)
# List of 200; don't need to paginate yet
after <- initialcontent$paging$cursors$after
## Loop 1, Organize all ads into dataset
print(paste("Pulling All Ad Campaigns for",paste0(adaccountname,".")))
adlist <- data.frame(NULL, stringsAsFactors = FALSE)
ad <- 0
for (ad in (1:(length(initialcontent$data)))) {
#print(i)
adlist[ad,c("ad.campaign.id")] <- initialcontent$data[[ad]]$id
adlist[ad,c("ad.campaign.name")] <- initialcontent$data[[ad]]$name
adlist[ad,c("objective")] <- initialcontent$data[[ad]]$objective
#adlist[ad,c("status")] <- initialcontent$data[[ad]]$campaign_group_status
adlist[ad,c("created.time")] <- substr(initialcontent$data[[ad]]$created_time, 1, 10)
#adlist[ad,c("campaign id")] <- initialcontent$data[[ad]]$campaign_id
#adlist[ad,c("campaign name")] <- initialcontent$data[[ad]]$campaign_name
# Use this loop to populate with admetrics, and augment initial dataset; will not affect following loops.
completion <- (ad/(length(initialcontent$data))*100)
print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
}
adlist_store <- adlist
# Metrics wanted
ADLIST
adlist
<- adlist
# Metrics wanted
admetrics <- c("frequency,newsfeed_avg_position,ctr,unique_ctr,spend,reach,social_reach,unique_clicks,social_clicks,cost_per_unique_click,total_actions,cost_per_total_action,actions,video_avg_pct_watched_actions,video_avg_sec_watched_actions") #"cost_per_action_type"
# Metrics framed
overalladmetricsreturned <- c("date_start","date_stop","spend","reach","social_reach","frequency","page_engagement","post_engagement","unique_clicks","social_clicks","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view","video_avg_sec_watched_video_view","video_avg_sec_watched_page_engagement","video_avg_sec_watched_post_engagement","video_avg_pct_watched_video_view","video_avg_pct_watched_page_engagement","video_avg_pct_watched_post_engagement")
# Subset adlist if necessary
#adlist <- subset(adlist, created.time > "2016-04-26")
#adlist <- subset(adlist, "2016-07-05" > created.time)
# Setup data.frame for ad data
adoveralldata <- data.frame(stringsAsFactors = FALSE)
## Facebook Ad API Scraper #####
## By Vivek Menon ##############
# Setup -------------------------------------------------------------------
#.Options - Check current factory options.
#options(stringsAsFactors = FALSE)
library(httr)
library(RJSONIO)
library(RCurl)
library(devtools)
library(xlsx)
# RFacebook - Dev
#install_github("pablobarbera/Rfacebook/Rfacebook")
#library(Rfacebook)
# RFacebook - Stable
#install.packages("Rfacebook")
#library(Rfacebook)
# Todo --------------------------------------------------------------------
# - bug fixes, date_preset for v2.7 set to 30 by default, reset to lifetime
# - set to more rigorous method to pull ads at adaccount_id level, for batch processing
# Functions ---------------------------------------------------------------
# User Functions
# Function to convert Facebook date format to R date format
format.facebook.date <- function(datestring) {
date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
}
# Inputs ------------------------------------------------------------------
# Turn stringsAsFactors off so rbind works properly.
options(stringsAsFactors = FALSE)
# Find OAuth settings for facebook:
#http://developers.facebook.com/docs/authentication/server-side/
facebook <- oauth_endpoints("facebook")
# Set OAUTH Settings
app_name <- "r_access"
app_id <- "955460364539237"
app_secret <- "0a3e6943c90510dc158fc7683e560f7d"
scope = "ads_management,manage_pages,publish_actions"
# Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
full_url <- oauth_callback()
full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
message <- paste("Copy and paste into Site URL on Facebook App Settings:",
full_url, "\nWhen done, press any key to continue...")
# Reminder to add callback into the app page.
invisible(readline(message))
# Intialize App
myapp <- oauth_app(app_name, app_id, app_secret)
# Current httr version, to test oauth protocol. [Required to set global port variables; won't work otherwise.]
if (packageVersion('httr') > "0.6.1"){
Sys.setenv("HTTR_SERVER_PORT" = "1410/")
fb_oauth <- oauth2.0_token(facebook, myapp,
scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
message("Authentication successful.")
}
# Tests -------------------------------------------------------------------
# Test 1: Facebook Profile Information
req <- GET("https://graph.facebook.com/v2.7/me?fields=id,name", config(token = fb_oauth))
stop_for_status(req)
str(content(req))
# Test 2: Ad Account Information
accountreq <- GET("https://graph.facebook.com/v2.7/act_693722000711682?fields=name", config(token = fb_oauth))
adaccountname <- content(accountreq)[1]$name
adaccountid <- content(accountreq)[2]$id
# Inputs ------------------------------------------------------------------
## Nodes:
# /insights is new /stats; gets ad data at the account and id level
# /keywordstats = interests in ad manager UI
## Variables
# Number of Ads to Pull
ads = 2000 #So far, only 200 in the account.
## Parameters:
#[1] All valid values are: date_start, date_stop, account_id, account_name, adgroup_id, adgroup_name, campaign_group_id, campaign_group_name, campaign_id, campaign_name, action_carousel_card_id, action_carousel_card_name, actions, unique_actions, total_actions, total_unique_actions, action_values, total_action_value, impressions, social_impressions, clicks, social_clicks, unique_impressions, unique_social_impressions, unique_clicks, unique_social_clicks, spend, frequency, social_spend, deeplink_clicks, app_store_clicks, website_clicks, call_to_action_clicks, newsfeed_avg_position, newsfeed_impressions, newsfeed_clicks, reach, social_reach, ctr, unique_ctr, cpc, cpm, cpp, cost_per_total_action, cost_per_action_type, cost_per_unique_click, cost_per_10_sec_video_view, relevance_score, website_ctr, video_avg_sec_watched_actions, video_avg_pct_watched_actions, video_p25_watched_actions, video_p50_watched_actions, video_p75_watched_actions, video_p95_watched_actions, video_p100_watched_actions, video_complete_watched_actions, video_10_sec_watched_actions, video_15_sec_watched_actions, video_30_sec_watched_actions"
# Processing --------------------------------------------------------------
### Intial Batch Ad Pull
# Dataframe and Query Result holder
initialcontent <- NULL
after <- NULL
# Pull all ad ids and names, batch mode, intialize at error for try/except
initialreq$status_code <- 400
count <- 0
# Try/Except for first batch
initialreq <- tryCatch({
GET(paste0("https://graph.facebook.com/v2.7/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
})
# Look into Packet
str(content(initialreq))
initialcontent <- content(initialreq)
# List of 200; don't need to paginate yet
after <- initialcontent$paging$cursors$after
## Loop 1, Organize all ads into dataset
print(paste("Pulling All Ad Campaigns for",paste0(adaccountname,".")))
adlist <- data.frame(NULL, stringsAsFactors = FALSE)
ad <- 0
# Query -------------------------------------------------------------------
# Populate
for (ad in (1:(length(initialcontent$data)))) {
#print(i)
adlist[ad,c("ad.campaign.id")] <- initialcontent$data[[ad]]$id
adlist[ad,c("ad.campaign.name")] <- initialcontent$data[[ad]]$name
adlist[ad,c("objective")] <- initialcontent$data[[ad]]$objective
#adlist[ad,c("status")] <- initialcontent$data[[ad]]$campaign_group_status
adlist[ad,c("created.time")] <- substr(initialcontent$data[[ad]]$created_time, 1, 10)
#adlist[ad,c("campaign id")] <- initialcontent$data[[ad]]$campaign_id
#adlist[ad,c("campaign name")] <- initialcontent$data[[ad]]$campaign_name
# Use this loop to populate with admetrics, and augment initial dataset; will not affect following loops.
completion <- (ad/(length(initialcontent$data))*100)
print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
}
adlist_store <- adlist
# Metrics wanted
admetrics <- c("frequency,newsfeed_avg_position,ctr,unique_ctr,spend,reach,social_reach,unique_clicks,social_clicks,cost_per_unique_click,total_actions,cost_per_total_action,actions,video_avg_pct_watched_actions,video_avg_sec_watched_actions") #"cost_per_action_type"
# Metrics framed
overalladmetricsreturned <- c("date_start","date_stop","spend","reach","social_reach","frequency","page_engagement","post_engagement","unique_clicks","social_clicks","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view","video_avg_sec_watched_video_view","video_avg_sec_watched_page_engagement","video_avg_sec_watched_post_engagement","video_avg_pct_watched_video_view","video_avg_pct_watched_page_engagement","video_avg_pct_watched_post_engagement")
# Subset adlist if necessary
#adlist <- subset(adlist, created.time > "2016-04-26")
#adlist <- subset(adlist, "2016-07-05" > created.time)
# Setup data.frame for ad data
adoveralldata <- data.frame(stringsAsFactors = FALSE)
colnames(adoveralldata) <- c(names(header),overalladmetricsreturned)
# Print processing stats
# print(ad)
# print(nrow(adoveralldata))
# print(paste0("Finding Facebook Data for Ad Set ",ad,": ",adlist[ad,2]))
print(paste0('Primary dataset appended: ',nrow(adoveralldata),' rows retrieved from Facebook.'))
# print(paste(paste0(round(completion, digits = 0),"%"), "of Ads Processed."))
# Warning: Massive while loop that continues until the ad list is retrieved from Facebook.
# May Need to restart/interrupt R to stop the loop.
# Also stops working with each API update; review doc changes
for (ad in 1:nrow(adlist)) {
print(paste0('Querying Ad ',ad,": ", adlist$ad.campaign.name[ad]))
adreq$status_code = 400
count <- 0
try(adreq <- GET(paste0("https://graph.facebook.com/v2.7/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&date_preset=lifetime&time_increment=1"), config(token = fb_oauth)))
if(adreq$status_code == 400) {
while(adreq$status_code == 400) {
try(adreq <- GET(paste0("https://graph.facebook.com/v2.7/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&date_preset=lifetime&time_increment=1"), config(token = fb_oauth)))
count <- count + 1
print(adreq)
print(paste('Limit Reached. Waiting 30 seconds.'))
print(paste('Attempt:',count))
Sys.sleep(30) #5*60
}
} else {
print('Query successful.')
}
# Organize/clean data
adcontent <- content(adreq)
adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
print(adcontentparsed)
nextpage <- adcontent$paging$`next`
while (is.null(nextpage) == FALSE) {
#print("Additional Days")
adreq.additional <- GET(adcontent$paging$`next`, config(token = fb_oauth))
adcontent.additional <- content(adreq.additional)
adcontent.additional.parsed <- unlist(adcontent.additional, use.names=TRUE, recursive=TRUE)
adcontentparsed <- c(adcontentparsed,adcontent.additional.parsed)
nextpage <- adcontent.additional$paging$`next`
}
adcontentparsed.store <- adcontentparsed
names(adcontentparsed)[(names(adcontentparsed) == ("actions.value"))] <- adcontentparsed[(names(adcontentparsed) == ("actions.action_type"))]
adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("actions.action_type")))]
if (length(which(names(adcontentparsed) %in% c("video_avg_pct_watched_actions.action_type","video_avg_sec_watched_actions.action_type"))) > 1) {
names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_sec_watched_actions.value"))] <- paste0("video_avg_sec_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_pct_watched_actions.value"))] <- paste0("video_avg_pct_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("video_avg_pct_watched_actions.action_type")))]
}
# Frame data for inclusion
days = length((adcontentparsed[overalladmetricsreturned[1] == names(adcontentparsed)]))
header <- c(adlist[ad,c("ad.campaign.id","ad.campaign.name","objective","created.time")])
footer <- data.frame()
if (is.null(adcontentparsed)==TRUE) {
footer <- rep(0,length(overalladmetricsreturned))
names(footer) <- overalladmetricsreturned
adoverallset <- c(unlist(header),footer)
} else {
for (day in 1:days) {
for (metric in 1:length(overalladmetricsreturned)) {
if (is.na(adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]) == TRUE) {
footer[day,metric] <- 0
} else {
footer[day,metric] <- adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]
}
colnames(footer) <- overalladmetricsreturned
adoverallset <- cbind(header,footer)
}
adoveralldata <- rbind(adoveralldata,adoverallset)
colnames(adoveralldata) <- c(names(header),overalladmetricsreturned)
# Print processing stats
# print(ad)
# print(nrow(adoveralldata))
# print(paste0("Finding Facebook Data for Ad Set ",ad,": ",adlist[ad,2]))
print(paste0('Primary dataset appended: ',nrow(adoveralldata),' rows retrieved from Facebook.'))
# print(paste(paste0(round(completion, digits = 0),"%"), "of Ads Processed."))
}
# Quick renaming if necssary
#names(adoveralldata) <- overalladmetricsreturned
print(adoveralldata)
overalladmetricsreturned
overalladmetricsreturned[metric]
overalladmetricsreturned
adcontentparsed
adcontent
adcontentparsed
adcontentparsed.store
adcontentparsed
adcontentparsed.store <- adcontentparsed
adcontentparsed
while (is.null(nextpage) == FALSE) {
#print("Additional Days")
adreq.additional <- GET(adcontent$paging$`next`, config(token = fb_oauth))
adcontent.additional <- content(adreq.additional)
adcontent.additional.parsed <- unlist(adcontent.additional, use.names=TRUE, recursive=TRUE)
adcontentparsed <- c(adcontentparsed,adcontent.additional.parsed)
nextpage <- adcontent.additional$paging$`next`
}
adcontentparsed
# Organize/clean data
adcontent <- content(adreq)
adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
print(adcontentparsed)
nextpage <- adcontent$paging$`next`
adcontent
adcontentparsed
nextpage <- adcontent$paging$`next`
while (is.null(nextpage) == FALSE) {
#print("Additional Days")
adreq.additional <- GET(adcontent$paging$`next`, config(token = fb_oauth))
adcontent.additional <- content(adreq.additional)
adcontent.additional.parsed <- unlist(adcontent.additional, use.names=TRUE, recursive=TRUE)
adcontentparsed <- c(adcontentparsed,adcontent.additional.parsed)
nextpage <- adcontent.additional$paging$`next`
}
adcontentparsed
adcontentparsed.store <- adcontentparsed
adcontentparsed
adcontentparsed[(names(adcontentparsed) == ("actions.action_type"))]
names(adcontentparsed)
naadcontentparsed
adcontentparsed
adcontentparsed[(names(adcontentparsed) == ("actions.action_type"))]
names(adcontentparsed)
(length(which(names(adcontentparsed) %in% c("video_avg_pct_watched_actions.action_type","video_avg_sec_watched_actions.action_type"))) > 1)
if (length(which(names(adcontentparsed) %in% c("video_avg_pct_watched_actions.action_type","video_avg_sec_watched_actions.action_type"))) > 1) {
names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_sec_watched_actions.value"))] <- paste0("video_avg_sec_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_pct_watched_actions.value"))] <- paste0("video_avg_pct_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("video_avg_pct_watched_actions.action_type")))]
}
## Facebook Ad API Scraper #####
## By Vivek Menon ##############
# Setup -------------------------------------------------------------------
#.Options - Check current factory options.
#options(stringsAsFactors = FALSE)
library(httr)
library(RJSONIO)
library(RCurl)
library(devtools)
library(xlsx)
# RFacebook - Dev
#install_github("pablobarbera/Rfacebook/Rfacebook")
#library(Rfacebook)
# RFacebook - Stable
#install.packages("Rfacebook")
#library(Rfacebook)
# Todo --------------------------------------------------------------------
# - bug fixes, date_preset for v2.7 set to 30 by default, reset to lifetime
# - set to more rigorous method to pull ads at adaccount_id level, for batch processing
# Functions ---------------------------------------------------------------
# User Functions
# Function to convert Facebook date format to R date format
format.facebook.date <- function(datestring) {
date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
}
# Inputs ------------------------------------------------------------------
# Turn stringsAsFactors off so rbind works properly.
options(stringsAsFactors = FALSE)
# Find OAuth settings for facebook:
#http://developers.facebook.com/docs/authentication/server-side/
facebook <- oauth_endpoints("facebook")
# Set OAUTH Settings
app_name <- "r_access"
app_id <- "955460364539237"
app_secret <- "0a3e6943c90510dc158fc7683e560f7d"
scope = "ads_management,manage_pages,publish_actions"
# Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
full_url <- oauth_callback()
full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
message <- paste("Copy and paste into Site URL on Facebook App Settings:",
full_url, "\nWhen done, press any key to continue...")
# Reminder to add callback into the app page.
invisible(readline(message))
# Intialize App
myapp <- oauth_app(app_name, app_id, app_secret)
# Current httr version, to test oauth protocol. [Required to set global port variables; won't work otherwise.]
if (packageVersion('httr') > "0.6.1"){
Sys.setenv("HTTR_SERVER_PORT" = "1410/")
fb_oauth <- oauth2.0_token(facebook, myapp,
scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
message("Authentication successful.")
}
# Tests -------------------------------------------------------------------
# Test 1: Facebook Profile Information
req <- GET("https://graph.facebook.com/v2.7/me?fields=id,name", config(token = fb_oauth))
stop_for_status(req)
str(content(req))
# Test 2: Ad Account Information
accountreq <- GET("https://graph.facebook.com/v2.7/act_693722000711682?fields=name", config(token = fb_oauth))
adaccountname <- content(accountreq)[1]$name
adaccountid <- content(accountreq)[2]$id
# Inputs ------------------------------------------------------------------
## Nodes:
# /insights is new /stats; gets ad data at the account and id level
# /keywordstats = interests in ad manager UI
## Variables
# Number of Ads to Pull
ads = 2000 #So far, only 200 in the account.
## Parameters:
#[1] All valid values are: date_start, date_stop, account_id, account_name, adgroup_id, adgroup_name, campaign_group_id, campaign_group_name, campaign_id, campaign_name, action_carousel_card_id, action_carousel_card_name, actions, unique_actions, total_actions, total_unique_actions, action_values, total_action_value, impressions, social_impressions, clicks, social_clicks, unique_impressions, unique_social_impressions, unique_clicks, unique_social_clicks, spend, frequency, social_spend, deeplink_clicks, app_store_clicks, website_clicks, call_to_action_clicks, newsfeed_avg_position, newsfeed_impressions, newsfeed_clicks, reach, social_reach, ctr, unique_ctr, cpc, cpm, cpp, cost_per_total_action, cost_per_action_type, cost_per_unique_click, cost_per_10_sec_video_view, relevance_score, website_ctr, video_avg_sec_watched_actions, video_avg_pct_watched_actions, video_p25_watched_actions, video_p50_watched_actions, video_p75_watched_actions, video_p95_watched_actions, video_p100_watched_actions, video_complete_watched_actions, video_10_sec_watched_actions, video_15_sec_watched_actions, video_30_sec_watched_actions"
# Processing --------------------------------------------------------------
### Intial Batch Ad Pull
# Dataframe and Query Result holder
initialcontent <- NULL
after <- NULL
# Pull all ad ids and names, batch mode, intialize at error for try/except
initialreq$status_code <- 400
count <- 0
# Try/Except for first batch
initialreq <- tryCatch({
GET(paste0("https://graph.facebook.com/v2.7/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
})
# Look into Packet
str(content(initialreq))
initialcontent <- content(initialreq)
# List of 200; don't need to paginate yet
after <- initialcontent$paging$cursors$after
## Loop 1, Organize all ads into dataset
print(paste("Pulling All Ad Campaigns for",paste0(adaccountname,".")))
adlist <- data.frame(NULL, stringsAsFactors = FALSE)
ad <- 0
# Query -------------------------------------------------------------------
# Populate
for (ad in (1:(length(initialcontent$data)))) {
#print(i)
adlist[ad,c("ad.campaign.id")] <- initialcontent$data[[ad]]$id
adlist[ad,c("ad.campaign.name")] <- initialcontent$data[[ad]]$name
adlist[ad,c("objective")] <- initialcontent$data[[ad]]$objective
#adlist[ad,c("status")] <- initialcontent$data[[ad]]$campaign_group_status
adlist[ad,c("created.time")] <- substr(initialcontent$data[[ad]]$created_time, 1, 10)
#adlist[ad,c("campaign id")] <- initialcontent$data[[ad]]$campaign_id
#adlist[ad,c("campaign name")] <- initialcontent$data[[ad]]$campaign_name
# Use this loop to populate with admetrics, and augment initial dataset; will not affect following loops.
completion <- (ad/(length(initialcontent$data))*100)
print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
}
adlist_store <- adlist
# Metrics wanted
admetrics <- c("frequency,newsfeed_avg_position,ctr,unique_ctr,spend,reach,social_reach,unique_clicks,social_clicks,cost_per_unique_click,total_actions,cost_per_total_action,actions,video_avg_pct_watched_actions,video_avg_sec_watched_actions") #"cost_per_action_type"
# Metrics framed
overalladmetricsreturned <- c("date_start","date_stop","spend","reach","social_reach","frequency","page_engagement","post_engagement","unique_clicks","social_clicks","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view","video_avg_sec_watched_video_view","video_avg_sec_watched_page_engagement","video_avg_sec_watched_post_engagement","video_avg_pct_watched_video_view","video_avg_pct_watched_page_engagement","video_avg_pct_watched_post_engagement")
# Subset adlist if necessary
#adlist <- subset(adlist, created.time > "2016-04-26")
#adlist <- subset(adlist, "2016-07-05" > created.time)
# Setup data.frame for ad data
adoveralldata <- data.frame(stringsAsFactors = FALSE)
# Look for a single client; i.e. BAR
adlist <- adlist[grep("BAR",adlist$ad.campaign.name),]
# Warning: Massive while loop that continues until the ad list is retrieved from Facebook.
# May Need to restart/interrupt R to stop the loop.
# Also stops working with each API update; review doc changes
for (ad in 1:nrow(adlist)) {
print(paste0('Querying Ad ',ad,": ", adlist$ad.campaign.name[ad]))
adreq$status_code = 400
count <- 0
try(adreq <- GET(paste0("https://graph.facebook.com/v2.7/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&date_preset=lifetime&time_increment=1"), config(token = fb_oauth)))
if(adreq$status_code == 400) {
while(adreq$status_code == 400) {
try(adreq <- GET(paste0("https://graph.facebook.com/v2.7/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&date_preset=lifetime&time_increment=1"), config(token = fb_oauth)))
count <- count + 1
print(adreq)
print(paste('Limit Reached. Waiting 30 seconds.'))
print(paste('Attempt:',count))
Sys.sleep(30) #5*60
}
} else {
print('Query successful.')
}
# Organize/clean data
adcontent <- content(adreq)
adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
print(adcontentparsed)
nextpage <- adcontent$paging$`next`
while (is.null(nextpage) == FALSE) {
#print("Additional Days")
adreq.additional <- GET(adcontent$paging$`next`, config(token = fb_oauth))
adcontent.additional <- content(adreq.additional)
adcontent.additional.parsed <- unlist(adcontent.additional, use.names=TRUE, recursive=TRUE)
adcontentparsed <- c(adcontentparsed,adcontent.additional.parsed)
nextpage <- adcontent.additional$paging$`next`
}
adcontentparsed.store <- adcontentparsed
if (length(which(names(adcontentparsed) %in% c("video_avg_pct_watched_actions.action_type","video_avg_sec_watched_actions.action_type"))) > 1) {
names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_sec_watched_actions.value"))] <- paste0("video_avg_sec_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_pct_watched_actions.value"))] <- paste0("video_avg_pct_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("video_avg_pct_watched_actions.action_type")))]
}
# Frame data for inclusion
days = length((adcontentparsed[overalladmetricsreturned[1] == names(adcontentparsed)]))
header <- c(adlist[ad,c("ad.campaign.id","ad.campaign.name","objective","created.time")])
footer <- data.frame()
if (is.null(adcontentparsed)==TRUE) {
footer <- rep(0,length(overalladmetricsreturned))
names(footer) <- overalladmetricsreturned
adoverallset <- c(unlist(header),footer)
} else {
for (day in 1:days) {
for (metric in 1:length(overalladmetricsreturned)) {
if (is.na(adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]) == TRUE) {
footer[day,metric] <- 0
} else {
footer[day,metric] <- adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]
}
colnames(footer) <- overalladmetricsreturned
adoverallset <- cbind(header,footer)
}
adoveralldata <- rbind(adoveralldata,adoverallset)
colnames(adoveralldata) <- c(names(header),overalladmetricsreturned)
# Print processing stats
# print(ad)
# print(nrow(adoveralldata))
# print(paste0("Finding Facebook Data for Ad Set ",ad,": ",adlist[ad,2]))
print(paste0('Primary dataset appended: ',nrow(adoveralldata),' rows retrieved from Facebook.'))
# print(paste(paste0(round(completion, digits = 0),"%"), "of Ads Processed."))
}
# Quick renaming if necssary
#names(adoveralldata) <- overalladmetricsreturned
print(adoveralldata)
# Exporting ---------------------------------------------------------------
adoveralldatastore <- adoveralldata
#adoveralldata <- adoveralldatastore
adoveralldata[is.na(adoveralldata)] <- ""
#adoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)
#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
# Directory location
setwd("/Users/vivek.menon")
datafolder <- "Data"
# Generate map
dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
# Return an XLS (Deprecated)
write.xlsx(adoveralldata, paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
# Return a CSV
write.csv(adoveralldata, file = paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".csv"), row.names=FALSE)
ad
install.packages('rstanarm')
install.packages(c("curl", "devtools", "git2r", "gtrendsR", "IRdisplay", "openssl", "R6", "repr", "withr", "XML"))
install.packages(c("BH", "boot", "class", "cluster", "codetools", "colorspace", "compare", "curl", "DBI", "devtools", "digest", "doParallel", "evaluate", "foreach", "forecast", "foreign", "ggplot2", "git2r", "gtable", "httr", "instaR", "irlba", "iterators", "jsonlite", "KernSmooth", "lattice", "MASS", "Matrix", "memoise", "mgcv", "mime", "munsell", "neuralnet", "nlme", "nnet", "plyr", "proto", "R6", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "Rfacebook", "rJava", "roxygen2", "rpart", "rstudioapi", "rversions", "scales", "spatial", "stringi", "stringr", "survival", "tseries", "XLConnect", "XLConnectJars", "xml2", "xtable", "zoo"), lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
