{
    "collab_server" : "",
    "contents" : "## Facebook Ad API Scraper #####\n## Mirum Agency ################\n## By Vivek Menon ##############\n## v.1.2.0 #####################\n\n# Setup -------------------------------------------------------------------\n\n#.Options - Check current factory options.\n#options(stringsAsFactors = FALSE)\n\nlibrary(httr)\nlibrary(RJSONIO)\nlibrary(RCurl)\nlibrary(devtools)\nlibrary(xlsx)\n# Install and use Rfacebook; deprecated for direct API call approach.\n#install_github(\"pablobarbera/Rfacebook/Rfacebook\")\n#library(Rfacebook)\n#install.packages(\"Rfacebook\")\n#library(Rfacebook)\n\n#Using 'rFacebook' from Github\n#fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)\n#callAPI(\"https://graph.facebook.com/v2.6/act_693722000711682/adgroups?fields=name&limit=1000\", fboauth)\n\n\n# bug fixes, date_preset for v2.6 set to 30 by default, reset to lifetime\n# set to more rigorous method that pulls all ads at addaccount_id level, instead of consistent queries\n\n\n# Functions ---------------------------------------------------------------\n\n# User Functions\n# Function to convert Facebook date format to R date format\nformat.facebook.date <- function(datestring) {\n  date <- as.POSIXct(datestring, format = \"%Y-%m-%dT%H:%M:%S+0000\", tz = \"GMT\")\n}\n\n\n# Inputs ------------------------------------------------------------------\n#Turn stringsAsFactors off so rbind works properly.\noptions(stringsAsFactors = FALSE)\n\n# Find OAuth settings for facebook:\n#http://developers.facebook.com/docs/authentication/server-side/\nfacebook <- oauth_endpoints(\"facebook\")\n\n#facebook <- oauth_endpoint(\n#  authorize = \"https://www.facebook.com/dialog/oauth\",\n#  access = \"https://graph.facebook.com/oauth/access_token\",\n#  base = \"https://localhost:1410\")\n\n# Register an application at https://developers.facebook.com/apps/\n#Insert your values below - if secret is omitted, it will look it up in\n#the FACEBOOK_CONSUMER_SECRET environmental variable.\n\napp_name <- \"r_access\"\napp_id <- \"955460364539237\"\napp_secret <- \"0a3e6943c90510dc158fc7683e560f7d\"\nscope = \"ads_management,manage_pages,publish_actions\"\n\n## Get a callback URL that matches the value entered in the Facebook App, typically \"https://localhost:1410\"\nfull_url <- oauth_callback()\nfull_url <- gsub(\"(.*localhost:[0-9]{1,5}/).*\", x=full_url, replacement=\"\\\\1\")\nmessage <- paste(\"Copy and paste into Site URL on Facebook App Settings:\",\nfull_url, \"\\nWhen done, press any key to continue...\")\n\n## Reminder to add callback into the app page.\ninvisible(readline(message))\n\nmyapp <- oauth_app(app_name, app_id, app_secret)\n\n## current httr version, to test which oauth protocol to use. [Required to set global port variables; won't work otherwise.]\nif (packageVersion('httr') > \"0.6.1\"){\n  Sys.setenv(\"HTTR_SERVER_PORT\" = \"1410/\")\n  fb_oauth <- oauth2.0_token(facebook, myapp,\n scope=scope, type = \"application/x-www-form-urlencoded\", cache=FALSE)\n  if (GET(\"https://graph.facebook.com/me\", config(token=fb_oauth))$status==200){\nmessage(\"Authentication successful.\")\n  }\n}\n\n# Test 1: Facebook Profile Information\nreq <- GET(\"https://graph.facebook.com/v2.6/me?fields=id,name\", config(token = fb_oauth))\nstop_for_status(req)\nstr(content(req))\n\n# Test 2: Ad Account Information\naccountreq <- GET(\"https://graph.facebook.com/v2.6/act_693722000711682?fields=name\", config(token = fb_oauth))\n\nadaccountname <- content(accountreq)[1]$name\nadaccountid <- content(accountreq)[2]$id\n\n# Inputs ------------------------------------------------------------------\n\n# /insights is the new /stats; gets ad data at the account and id level\n# /keywordstats = interests in ad manager UI\n\n## Variables\n# Number of Ads to Pull\nads = 2000 #So far, only 167 in the account.\n\n\n\n#try(\n#  adreq <- GET(paste0(\"https://graph.facebook.com/v2.6/\",adlist[ad,1],\"/insights?fields=\",paste(admetrics,collapse=\",\")), config(token = fb_oauth))\n#)\n#stop_for_status(adreq)\n#adcontent <- content(adreq)\n#adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)\n\n## Facebook:\n#[1] All valid values are: date_start, date_stop, account_id, account_name, adgroup_id, adgroup_name, campaign_group_id, campaign_group_name, campaign_id, campaign_name, action_carousel_card_id, action_carousel_card_name, actions, unique_actions, total_actions, total_unique_actions, action_values, total_action_value, impressions, social_impressions, clicks, social_clicks, unique_impressions, unique_social_impressions, unique_clicks, unique_social_clicks, spend, frequency, social_spend, deeplink_clicks, app_store_clicks, website_clicks, call_to_action_clicks, newsfeed_avg_position, newsfeed_impressions, newsfeed_clicks, reach, social_reach, ctr, unique_ctr, cpc, cpm, cpp, cost_per_total_action, cost_per_action_type, cost_per_unique_click, cost_per_10_sec_video_view, relevance_score, website_ctr, video_avg_sec_watched_actions, video_avg_pct_watched_actions, video_p25_watched_actions, video_p50_watched_actions, video_p75_watched_actions, video_p95_watched_actions, video_p100_watched_actions, video_complete_watched_actions, video_10_sec_watched_actions, video_15_sec_watched_actions, video_30_sec_watched_actions\"w\n\n# Processing --------------------------------------------------------------\n\n### Intial Batch Ad Pull\n# Dataframe and query result holder\n\ninitialcontent <- NULL\nafter <- NULL\n\n# Pull all ad ids and names, batch mode\n\n#initialreq <- GET(paste0(\"https://graph.facebook.com/v2.6/act_693722000711682/adcampaigns?fields=name&limit=\",ads), config(token = fb_oauth))\n\ninitialreq <- 400\ncount <- 0\n\n\nwhile (warn_for_status(initialreq) != TRUE) {\n  count <- count + 1\n  print(paste('Query Attempt', count))\n  initialreq <- GET(paste0(\"https://graph.facebook.com/v2.6/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=\",ads), config(token = fb_oauth))\n}\n\n\ninitialreq <- GET(paste0(\"https://graph.facebook.com/v2.6/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=\",ads), config(token = fb_oauth))\n\nstr(content(initialreq))\ninitialcontent <- content(initialreq)\n\n# List of 154; don't need to paginate yet\n#after <- initialcontent$paging$cursors$after\n\n\n## Loop 1, Organize all ads into dataset\nprint(paste(\"Pulling All Ad Campaigns for\",paste0(adaccountname,\".\")))\n\nadlist <- data.frame(NULL, stringsAsFactors = FALSE)\nad <- 0\n\n\nfor (ad in (1:(length(initialcontent$data)))) {\n    #print(i)\n\n    adlist[ad,c(\"ad.campaign.id\")] <- initialcontent$data[[ad]]$id\n    adlist[ad,c(\"ad.campaign.name\")] <- initialcontent$data[[ad]]$name\n    adlist[ad,c(\"objective\")] <- initialcontent$data[[ad]]$objective\n    #adlist[ad,c(\"status\")] <- initialcontent$data[[ad]]$campaign_group_status\n    adlist[ad,c(\"created.time\")] <- substr(initialcontent$data[[ad]]$created_time, 1, 10)\n\n\n    #adlist[ad,c(\"campaign id\")] <- initialcontent$data[[ad]]$campaign_id\n    #adlist[ad,c(\"campaign name\")] <- initialcontent$data[[ad]]$campaign_name\n    # Use this loop to populate with admetrics, and augment initial dataset; will not affect following loops.\n\n    completion <- (ad/(length(initialcontent$data))*100)\n\n    print(paste(paste0(round(completion, digits = 0),\"%\"), \"Complete.\"))\n  }\n\n\nadlist_store <- adlist\n\n# slice list\n#adlist <- adlist[adlist$created.time > \"2016-02-29\",]\n\n#adlist_sliced <- adlist\n\n# Metrics to examine\nadmetrics <- c(\"frequency,newsfeed_avg_position,ctr,unique_ctr,spend,reach,social_reach,unique_clicks,social_clicks,cost_per_unique_click,total_actions,cost_per_total_action,actions,video_avg_pct_watched_actions,video_avg_sec_watched_actions\") #\"cost_per_action_type\"\n\n# Test Pull for Loop 2\n#testreq <- GET(paste0(\"https://graph.facebook.com/v2.6/\",adlist[89,1],\"/insights?fields=\",paste(admetrics,collapse=\",\")), config(token = fb_oauth))\n#warn_for_status(testreq)\n#content(testreq)\n\n# Metrics framed\noveralladmetricsreturned <- c(\"date_start\",\"date_stop\",\"spend\",\"reach\",\"social_reach\",\"frequency\",\"page_engagement\",\"post_engagement\",\"unique_clicks\",\"social_clicks\",\"cost_per_unique_click\",\"total_actions\",\"cost_per_total_action\",\"like\",\"post_like\",\"comment\",\"share\",\"link_click\",\"photo_view\",\"video_play\",\"video_view\",\"video_avg_sec_watched_video_view\",\"video_avg_sec_watched_page_engagement\",\"video_avg_sec_watched_post_engagement\",\"video_avg_pct_watched_video_view\",\"video_avg_pct_watched_page_engagement\",\"video_avg_pct_watched_post_engagement\")\n\n\n#number of columns = length(c(names(header),overalladmetricsreturned))\n\n#adstart <- ad\n#600 calls / 600 seconds rate limit\n\n#adlist <- subset(adlist, created.time > \"2016-04-26\")\n#adlist <- subset(adlist, \"2016-07-05\" > created.time)\n\nadoveralldata <- data.frame(stringsAsFactors = FALSE)\n\n# Baron\nadlist <- adlist[grep(\"BAR\",adlist$ad.campaign.name),]\n\n\n### Warning: Massive while loop that continues until the ad list is retrieved from Facebook Need to restart/interrupt R to stop the loop.\n\n#nrow(adlist))\n#4\n\nfor (ad in 1:nrow(adlist)) {\n  print(paste0('Querying Ad ',ad,\": \", adlist$ad.campaign.name[ad]))\n  adreq$status_code = 400\n  count <- 0\n\n  try(adreq <- GET(paste0(\"https://graph.facebook.com/v2.6/\",adlist[ad,1],\"/insights?fields=\",paste(admetrics[1],collapse=\",\"),\"&date_preset=lifetime&time_increment=1\"), config(token = fb_oauth)))\n\n  if(adreq$status_code == 400) {\n    while(adreq$status_code == 400) {\n      try(adreq <- GET(paste0(\"https://graph.facebook.com/v2.6/\",adlist[ad,1],\"/insights?fields=\",paste(admetrics[1],collapse=\",\"),\"&date_preset=lifetime&time_increment=1\"), config(token = fb_oauth)))\n\n      count <- count + 1\n      print(adreq)\n      print(paste('Limit Reached. Waiting 30 seconds.'))\n      print(paste('Attempt:',count))\n      Sys.sleep(30) #5*60\n    }\n  } else {\n    print('Query successful.')\n  }\n\n  # Organize/clean data\n  adcontent <- content(adreq)\n  adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)\n\n  print(adcontentparsed)\n\n  nextpage <- adcontent$paging$`next`\n\n  while (is.null(nextpage) == FALSE) {\n    #print(\"Additional Days\")\n\n    adreq.additional <- GET(adcontent$paging$`next`, config(token = fb_oauth))\n    adcontent.additional <- content(adreq.additional)\n    adcontent.additional.parsed <- unlist(adcontent.additional, use.names=TRUE, recursive=TRUE)\n\n    adcontentparsed <- c(adcontentparsed,adcontent.additional.parsed)\n    nextpage <- adcontent.additional$paging$`next`\n  }\n  #adcontent2 <- unlist(adcontent$data, use.names=FALSE, recursive=TRUE)\n\n  adcontentparsed.store <- adcontentparsed\n  #adcontentparsed <- adcontentparsed.store\n\n  names(adcontentparsed)[(names(adcontentparsed) == (\"actions.value\"))] <- adcontentparsed[(names(adcontentparsed) == (\"actions.action_type\"))]\n  adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == (\"actions.action_type\")))]\n\n  if (length(which(names(adcontentparsed) %in% c(\"video_avg_pct_watched_actions.action_type\",\"video_avg_sec_watched_actions.action_type\"))) > 1) {\n    names(adcontentparsed)[(names(adcontentparsed) == (\"video_avg_sec_watched_actions.value\"))] <- paste0(\"video_avg_sec_watched_\",adcontentparsed[(names(adcontentparsed) == (\"video_avg_sec_watched_actions.action_type\"))])\n    names(adcontentparsed)[(names(adcontentparsed) == (\"video_avg_pct_watched_actions.value\"))] <- paste0(\"video_avg_pct_watched_\",adcontentparsed[(names(adcontentparsed) == (\"video_avg_sec_watched_actions.action_type\"))])\n\n    adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == (\"video_avg_pct_watched_actions.action_type\")))]\n  }\n  # Frame data for inclusion\n\n  days = length((adcontentparsed[overalladmetricsreturned[1] == names(adcontentparsed)]))\n\n  header <- c(adlist[ad,c(\"ad.campaign.id\",\"ad.campaign.name\",\"objective\",\"created.time\")])\n  footer <- data.frame()\n\n  if (is.null(adcontentparsed)==TRUE) {\n    footer <- rep(0,length(overalladmetricsreturned))\n    names(footer) <- overalladmetricsreturned\n    adoverallset <- c(unlist(header),footer)\n  } else {\n    for (day in 1:days) {\n      for (metric in 1:length(overalladmetricsreturned)) {\n\n        if (is.na(adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]) == TRUE) {\n          footer[day,metric] <- 0\n        } else {\n          footer[day,metric] <- adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]\n        }\n      }\n    }\n    colnames(footer) <- overalladmetricsreturned\n    adoverallset <- cbind(header,footer)\n  }\n\n\n  adoveralldata <- rbind(adoveralldata,adoverallset)\n\n  colnames(adoveralldata) <- c(names(header),overalladmetricsreturned)\n\n  # Print processing stats\n  #completion <- (ad/(nrow(adlist))*100)\n  #print(ad)\n  #print(nrow(adoveralldata))\n  #print(paste0(\"Finding Facebook Data for Ad Set \",ad,\": \",adlist[ad,2]))\n  print(paste0('Primary dataset appended: ',nrow(adoveralldata),' rows retrieved from Facebook.'))\n  #print(paste(paste0(round(completion, digits = 0),\"%\"), \"of Ads Processed.\"))\n\n}\n\n\n\n#names(adoveralldata) <- overalladmetricsreturned\nprint(adoveralldata)\n\n# Exporting ---------------------------------------------------------------\n\nadoveralldatastore <- adoveralldata\n#adoveralldata <- adoveralldatastore\n\nadoveralldata[is.na(adoveralldata)] <- \"\"\n#adoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)\n\n#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)\n#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)\nsetwd(\"/Users/vivek.menon\")\ndatafolder <- \"Data\"\ndir.create(file.path(getwd(), datafolder), showWarnings = FALSE)\n\n# Rename columns for Excel readability\n#names(pagedata) = c(\"Page ID\", \"Page Name\", \"Date\", rev(names(metrics)))\n# output Page dataset as final csv\n#write.csv(pagedata, paste0(paste(page$from_name[1],\"Page Data\",Sys.Date(), sep=\" \"),\".csv\"),row.names=FALSE, fileEncoding='iso-8859-1')\n#write.xlsx(adoveralldata, paste0(getwd(),\"/\",datafolder,\"/\",paste(adaccountname,\"Ad Data\",Sys.Date(), sep=\" \"),\".xlsx\"), row.names=FALSE, showNA=FALSE)\n\nwrite.csv(adoveralldata, file = paste0(getwd(),\"/\",datafolder,\"/\",paste(adaccountname,\"Ad Data\",Sys.Date(), sep=\" \"),\".csv\"), row.names=FALSE)\n\n#####\n\n#####\n\n#####\n\n\n## Ad Hourly Vector Frame\nadmetricsreturned <- c(\"campaign_id\",\"campaign_name\",\"date_start\",\"date_stop\",\"hourly_stats_aggregated_by_advertiser_time_zone\",\"spend\",\"reach\",\"social_reach\",\"frequency\",\"page_engagement\",\"post_engagement\",\"clicks\",\"social_clicks\",\"ctr\",\"cost_per_unique_click\",\"total_actions\",\"cost_per_total_action\",\"like\",\"post_like\",\"comment\",\"share\",\"link_click\",\"photo_view\",\"video_play\",\"video_view\")\n\n\n\n\nadhourdata <- data.frame(NULL,stringsAsFactors=FALSE)\n\n\n### Hourly Ad Metrics\n## Loop 2: Hourly Ad Pull (Based on Loop 1)\nfor (ad in 1:nrow(adlist)) {\n  adhourreq <- GET(paste0(\"https://graph.facebook.com/v2.6/\",adlist[ad,1],\"/insights?fields=\",paste(admetrics,collapse=\",\"),\"&breakdowns=hourly_stats_aggregated_by_advertiser_time_zone\"), config(token = fb_oauth))\n  adhourlydata <- content(adhourreq)\n  adhourlycontent <- unlist(adhourlydata$data, use.names=TRUE, recursive=TRUE)\n\n  completion <- (ad/(nrow(adlist))*100)\n\n  print(paste('Finding Facebook Ad Data for',adlist[ad,2]))\n  print(paste(paste0(round(completion, digits = 0),\"%\"), \"Complete.\"))\n\n\n  if (length(adhourlycontent) > 0) {\n    names(adhourlycontent)[(names(adhourlycontent) == (\"actions.value\"))] <- adhourlycontent[(names(adhourlycontent) == (\"actions.action_type\"))]\n    adhourlycontent <- adhourlycontent[-which((names(adhourlycontent) == (\"actions.action_type\")))]\n\n    hours <- adhourlycontent[names(adhourlycontent) == \"hourly_stats_aggregated_by_advertiser_time_zone\"]\n\n    adhourlysetdata <- data.frame(NULL, stringsAsFactors = FALSE)\n\n    for (hour in 1:length(hours)){\n\n      if (hour <= 1) {\n        startindex = 1\n        endindex = which(adhourlycontent == hours[(hour)])\n      } else {\n        startindex = which(adhourlycontent == hours[(hour-1)])+1\n        endindex = which(adhourlycontent == hours[(hour)])\n      }\n\n      #print(paste(\"Set\", hour))\n      #print(length(adhourlycontent[startindex:endindex]))\n      #print(adhourlycontent[startindex:endindex])\n\n      adhourlyset <- adhourlycontent[startindex:endindex]\n      adhourlyrow <- adhourlyset[match(admetricsreturned,names(adhourlyset))]\n      adhourlysetdata <- rbind(adhourlyrow,adhourlysetdata)\n\n      #print(adhourlyrow)\n\n    }\n    names(adhourlysetdata) <- admetricsreturned\n    #print(tail(adhourlysetdata))\n\n    adhourdata <- rbind(adhourlysetdata,adhourdata)\n\n    names(adhourdata) <- admetricsreturned\n  } else {\n    #next()\n  }\n\n\n}\n\nadstart <- ad\n\n#Hourly Admetrics\nfor (ad in 1:nrow(adlist)) {\n  adhourreq <- GET(paste0(\"https://graph.facebook.com/v2.6/\",adlist[ad,1],\"/insights?fields=\",paste(admetrics,collapse=\",\"),\"&breakdowns=hourly_stats_aggregated_by_advertiser_time_zone\"), config(token = fb_oauth))\n  adhourlydata <- content(adhourreq)\n  adhourlycontent <- unlist(adhourlydata$data, use.names=TRUE, recursive=TRUE)\n\n\n  if (length(adhourlycontent) > 0) {\n    names(adhourlycontent)[(names(adhourlycontent) == (\"actions.value\"))] <- adhourlycontent[(names(adhourlycontent) == (\"actions.action_type\"))]\n    adhourlycontent <- adhourlycontent[-which((names(adhourlycontent) == (\"actions.action_type\")))]\n\n    hours <- adhourlycontent[names(adhourlycontent) == \"hourly_stats_aggregated_by_advertiser_time_zone\"]\n\n    adhourlysetdata <- data.frame(NULL, stringsAsFactors = FALSE)\n\n    for (hour in 1:length(hours)){\n\n      if (hour <= 1) {\n        startindex = 1\n        endindex = which(adhourlycontent == hours[(hour)])\n      } else {\n        startindex = which(adhourlycontent == hours[(hour-1)])+1\n        endindex = which(adhourlycontent == hours[(hour)])\n      }\n\n      #print(paste(\"Set\", hour))\n      #print(length(adhourlycontent[startindex:endindex]))\n      #print(adhourlycontent[startindex:endindex])\n\n      adhourlyset <- adhourlycontent[startindex:endindex]\n      adhourlyrow <- adhourlyset[match(admetricsreturned,names(adhourlyset))]\n      adhourlysetdata <- rbind(adhourlyrow,adhourlysetdata)\n\n      #print(adhourlyrow)\n\n    }\n    names(adhourlysetdata) <- admetricsreturned\n    #print(tail(adhourlysetdata))\n\n    adhourdata <- rbind(adhourlysetdata,adhourdata)\n\n    names(adhourdata) <- admetricsreturned\n  } else {\n    next()\n  }\n}\n\n\n### Segmented Ad Metrics\n## Loop 3: Segmented Ad Pull (Based on Loop 1)\nad <-  0\n\nadmetricsreturned <- c(\"campaign_id\",\"campaign_name\",\"date_start\",\"date_stop\",\"gender\",\"age\",\"spend\",\"reach\",\"social_reach\",\"frequency\",\"page_engagement\",\"post_engagement\",\"clicks\",\"social_clicks\",\"ctr\",\"cost_per_unique_click\",\"total_actions\",\"cost_per_total_action\",\"like\",\"post_like\",\"comment\",\"share\",\"link_click\",\"photo_view\",\"video_play\",\"video_view\")\n\n### PICK UP FROM HERE; THIS LOOP ONLY GETS TO 5% ###\n\n\nadsegmentsetdata <- data.frame(NULL,stringsAsFactors=FALSE)\n\nfor (ad in 1:nrow(adlist)) {\n  adsegmentreq <- GET(paste0(\"https://graph.facebook.com/v2.6/\",adlist[ad,1],\"/insights?fields=\",paste(admetrics,collapse=\",\"),\"&breakdowns=age,gender\"), config(token = fb_oauth))\n  adsegmentdata <- content(adsegmentreq)\n  adsegmentcontent <- unlist(adsegmentdata$data, use.names=TRUE, recursive=TRUE)\n\n  completion <- (ad/(length(initialcontent$data))*100)\n  print(paste(paste0(round(completion, digits = 0),\"%\"), \"Complete.\"))\n\n  if (length(adsegmentcontent) > 0) {\n    names(adsegmentcontent)[(names(adsegmentcontent) == (\"actions.value\"))] <- adsegmentcontent[(names(adsegmentcontent) == (\"actions.action_type\"))]\n    adsegmentcontent <- adsegmentcontent[-which((names(adsegmentcontent) == (\"actions.action_type\")))]\n\n    ages <- unique(adsegmentcontent[names(adsegmentcontent) == \"age\"])\n    genders <- unique(adsegmentcontent[names(adsegmentcontent) == \"gender\"])\n\n    adsegmentsetdata <- data.frame(NULL, stringsAsFactors = FALSE)\n\n    for (age in 1:length(ages)) {\n\n      if (age <= 1) {\n        startindex = 1\n        endindex = which(adsegmentcontent == ages[(age)])[3]+1\n      } else {\n        startindex = which(adsegmentcontent == ages[(age-1)])[3]+1\n        endindex = which(adsegmentcontent == ages[(age)])[3]+1\n      }\n\n\n      adsegmentset <- adsegmentcontent[startindex:endindex]\n\n\n      for (gender in 1:length(genders)) {\n\n        if (gender <= 1) {\n          startgenderindex = 1\n          endgenderindex = which(adsegmentset == genders[(gender)])\n        } else {\n          startgenderindex = which(adsegmentset == genders[(gender-1)])+1\n          endgenderindex = which(adsegmentset == genders[(gender)])\n        }\n\n\n        adsegmentrow <- adsegmentset[match(admetricsreturned,names(adsegmentset))]\n        adsegmentsetdata <- rbind(adsegmentrow,adsegmentsetdata)\n      }\n    }\n  } else {\n    next()\n  }\n}\n\nnames(adsegmentdata) <- admetricsreturned\n\n# Placement and Device\nadplacereq <- GET(paste0(\"https://graph.facebook.com/v2.6/\",adlist[ad,1],\"/insights?fields=\",paste(admetrics,collapse=\",\"),\"&breakdowns=placement,impression_device\"), config(token = fb_oauth))\n\n# Age and Gender\nadreq2 <- GET(paste0(\"https://graph.facebook.com/v2.6/\",adlist[ad,1],\"/insights?fields=\",paste(admetrics,collapse=\",\"),\"&breakdowns=age,gender\"), config(token = fb_oauth))\nadcontent <- content(adreq)\nadcontent1 <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)\n\n# Clean out the NA's\n\n# Exporting ---------------------------------------------------------------\n\nadoveralldata[is.na(adoveralldata)] <- \"\"\n\nadoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)\n\n#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)\n#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)\nsetwd(\"/Users/vivek.menon\")\ndatafolder <- \"Data\"\ndir.create(file.path(getwd(), datafolder), showWarnings = FALSE)\n\n# Rename columns for Excel readability\n#names(pagedata) = c(\"Page ID\", \"Page Name\", \"Date\", rev(names(metrics)))\n# output Page dataset as final csv\n#write.csv(pagedata, paste0(paste(page$from_name[1],\"Page Data\",Sys.Date(), sep=\" \"),\".csv\"),row.names=FALSE, fileEncoding='iso-8859-1')\nwrite.xlsx(adoveralldata, paste0(getwd(),\"/\",datafolder,\"/\",paste(adaccountname,\"Ad Data\",Sys.Date(), sep=\" \"),\".xlsx\"), row.names=FALSE, showNA=FALSE)\n\n# Rename columns for Excel readability\n#names(postdata) = c(\"Page ID\", \"Page Name\", \"Created\",  \"Datetime\", \"Month\", \"Day\", \"Post ID\", \"Link\", \"Type\", \"Message\", \"Likes\", \"Comments\", \"Shares\", rev(names(postmetrics)))\n# output Post dataset as final Excel\n#write.csv(postdata, paste0(paste(page$from_name[1],\"Post Data\",Sys.Date(), sep=\" \"),\".csv\"),row.names=FALSE)\n",
    "created" : 1486569727896.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "722127237",
    "id" : "EAA5C02",
    "lastKnownWriteTime" : 1486569990,
    "last_content_update" : 1486569990642,
    "path" : "~/Documents/Work/Internal/Scripts/Facebook_Ad.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}