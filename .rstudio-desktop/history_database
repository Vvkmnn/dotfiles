1486570885638:Sys.setenv("HTTR_SERVER_PORT" = "1410/")
1486570885639:fb_oauth <- oauth2.0_token(facebook, myapp,
1486570885641:scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
1486570885642:if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
1486570885643:message("Authentication successful.")
1486570885644:}
1486570892815:install.packages('httr')
1486570918697:#.Options - Check current factory options.
1486570918705:#options(stringsAsFactors = FALSE)
1486570918705:library(httr)
1486570918732:library(RJSONIO)
1486570918734:library(RCurl)
1486570918745:library(devtools)
1486570918749:library(xlsx)
1486570918753:# RFacebook - Dev
1486570918754:#install_github("pablobarbera/Rfacebook/Rfacebook")
1486570918755:#library(Rfacebook)
1486570918757:# RFacebook - Stable
1486570918759:#install.packages("Rfacebook")
1486570918760:#library(Rfacebook)
1486570918762:# Todo --------------------------------------------------
1486570918763:# - bug fixes, date_preset for v2.7 set to 30 by default, reset to lifetime
1486570918763:# - set to more rigorous method to pull ads at adaccount_id level, for batch processing
1486570918765:# Functions ---------------------------------------------------------------
1486570918766:# User Functions
1486570918767:# Function to convert Facebook date format to R date format
1486570918768:format.facebook.date <- function(datestring) {
1486570918769:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1486570918770:}
1486570918772:# Inputs ------------------------------------------------
1486570918774:# Turn stringsAsFactors off so rbind works properly.
1486570918783:options(stringsAsFactors = FALSE)
1486570918786:# Find OAuth settings for facebook:
1486570918787:#http://developers.facebook.com/docs/authentication/server-side/
1486570918788:facebook <- oauth_endpoints("facebook")
1486570918790:# Set OAUTH Settings
1486570918791:app_name <- "vocal"
1486570918792:app_id <- "1864264410512639"
1486570918793:app_secret <- "b47759917b92b74daaa91ca4b548c90c"
1486570918794:scope = "ads_management,manage_pages,publish_actions"
1486570918797:# Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
1486570918797:full_url <- oauth_callback()
1486570918799:full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
1486570918800:message <- paste("Copy and paste into Site URL on Facebook App Settings:",
1486570918801:full_url, "\nWhen done, press any key to continue...")
1486570918803:# Reminder to add callback into the app page.
1486570918803:invisible(readline(message))
1486570918805:# Intialize App
1486570918806:myapp <- oauth_app(app_name, app_id, app_secret)
1486570918808:# Current httr version, to test oauth protocol. [Required to set global port variables; won't work otherwise.]
1486570918809:if (packageVersion('httr') > "0.6.1"){
1486570918809:Sys.setenv("HTTR_SERVER_PORT" = "1410/")
1486570918810:fb_oauth <- oauth2.0_token(facebook, myapp,
1486570918812:scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
1486570918813:if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
1486570918814:message("Authentication successful.")
1486570918816:}
1486570953578:install.packages('httpuv')
1490382478206:## Facebook Ad API Scraper #####
1490382478208:## By Vivek Menon ##############
1490382478209:# Setup -------------------------------------------------
1490382478211:#.Options - Check current factory options.
1490382478211:#options(stringsAsFactors = FALSE)
1490382478212:library(httr)
1490382478277:library(RJSONIO)
1490382478287:library(RCurl)
1490382478289:library(devtools)
1490382478291:library(xlsx)
1490382478293:# RFacebook - Dev
1490382478293:#install_github("pablobarbera/Rfacebook/Rfacebook")
1490382478294:#library(Rfacebook)
1490382478295:# RFacebook - Stable
1490382478296:#install.packages("Rfacebook")
1490382478296:#library(Rfacebook)
1490382478305:# Todo --------------------------------------------------
1490382478311:# - bug fixes, date_preset for v2.7 set to 30 by default, reset to lifetime
1490382478312:# - set to more rigorous method to pull ads at adaccount_id level, for batch processing
1490382478318:# Functions ---------------------------------------------------------------
1490382478319:# User Functions
1490382478320:# Function to convert Facebook date format to R date format
1490382478322:format.facebook.date <- function(datestring) {
1490382478322:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1490382478323:}
1490382478325:# Inputs ------------------------------------------------
1490382478326:# Turn stringsAsFactors off so rbind works properly.
1490382478326:options(stringsAsFactors = FALSE)
1490382478328:# Find OAuth settings for facebook:
1490382478328:#http://developers.facebook.com/docs/authentication/server-side/
1490382478329:facebook <- oauth_endpoints("facebook")
1490382478330:# Set OAUTH Settings
1490382478331:app_name <- "vocal"
1490382478332:app_id <- "1864264410512639"
1490382478335:app_secret <- "b47759917b92b74daaa91ca4b548c90c"
1490382478337:scope = "ads_management,manage_pages,publish_actions"
1490382478340:# Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
1490382478341:full_url <- oauth_callback()
1490382478342:full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
1490382478343:message <- paste("Copy and paste into Site URL on Facebook App Settings:",
1490382478344:full_url, "\nWhen done, press any key to continue...")
1490382478345:# Reminder to add callback into the app page.
1490382478347:invisible(readline(message))
1490382478353:# Intialize App
1490382478354:myapp <- oauth_app(app_name, app_id, app_secret)
1490382478356:# Current httr version, to test oauth protocol. [Required to set global port variables; won't work otherwise.]
1490382478357:if (packageVersion('httr') > "0.6.1"){
1490382478358:Sys.setenv("HTTR_SERVER_PORT" = "1410/")
1490382478360:fb_oauth <- oauth2.0_token(facebook, myapp,
1490382478361:scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
1490382478362:if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
1490382478362:message("Authentication successful.")
1490382478363:}
1490382671639:## Facebook Ad API Scraper #####
1490382671648:## By Vivek Menon ##############
1490382671649:# Setup -------------------------------------------------
1490382671650:#.Options - Check current factory options.
1490382671651:#options(stringsAsFactors = FALSE)
1490382671652:library(httr)
1490382671654:library(RJSONIO)
1490382671657:library(RCurl)
1490382671659:library(devtools)
1490382671661:library(xlsx)
1490382671664:# RFacebook - Dev
1490382671665:#install_github("pablobarbera/Rfacebook/Rfacebook")
1490382671666:#library(Rfacebook)
1490382671667:# RFacebook - Stable
1490382671668:#install.packages("Rfacebook")
1490382671669:#library(Rfacebook)
1490382671670:# Todo --------------------------------------------------
1490382671672:# - bug fixes, date_preset for v2.7 set to 30 by default, reset to lifetime
1490382671673:# - set to more rigorous method to pull ads at adaccount_id level, for batch processing
1490382671674:# Functions ---------------------------------------------------------------
1490382671676:# User Functions
1490382671676:# Function to convert Facebook date format to R date format
1490382671677:format.facebook.date <- function(datestring) {
1490382671678:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1490382671679:}
1490382671681:# Inputs ------------------------------------------------
1490382671682:# Turn stringsAsFactors off so rbind works properly.
1490382671683:options(stringsAsFactors = FALSE)
1490382671685:# Find OAuth settings for facebook:
1490382671687:#http://developers.facebook.com/docs/authentication/server-side/
1490382671688:facebook <- oauth_endpoints("facebook")
1490382671690:# Set OAUTH Settings
1490382671691:app_name <- "vocal"
1490382671694:app_id <- "1864264410512639"
1490382671695:app_secret <- "b47759917b92b74daaa91ca4b548c90c"
1490382671696:scope = "ads_management,manage_pages,publish_actions"
1490382671697:# Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
1490382671698:full_url <- oauth_callback()
1490382671700:full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
1490382671702:message <- paste("Copy and paste into Site URL on Facebook App Settings:",
1490382671703:full_url, "\nWhen done, press any key to continue...")
1490382671705:# Reminder to add callback into the app page.
1490382671705:invisible(readline(message))
1490382671706:# Intialize App
1490382671707:myapp <- oauth_app(app_name, app_id, app_secret)
1490382671709:# Current httr version, to test oauth protocol. [Required to set global port variables; won't work otherwise.]
1490382671710:if (packageVersion('httr') > "0.6.1"){
1490382671710:Sys.setenv("HTTR_SERVER_PORT" = "1410/")
1490382671711:fb_oauth <- oauth2.0_token(facebook, myapp,
1490382671712:scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
1490382671713:if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
1490382671714:message("Authentication successful.")
1490382671715:}
1490382744944:## Facebook Ad API Scraper #####
1490382744945:## By Vivek Menon ##############
1490382744946:# Setup -------------------------------------------------
1490382744947:#.Options - Check current factory options.
1490382744948:#options(stringsAsFactors = FALSE)
1490382744949:library(httr)
1490382744950:library(RJSONIO)
1490382744951:library(RCurl)
1490382744952:library(devtools)
1490382744954:library(xlsx)
1490382744957:# RFacebook - Dev
1490382744957:#install_github("pablobarbera/Rfacebook/Rfacebook")
1490382744959:#library(Rfacebook)
1490382744960:# RFacebook - Stable
1490382744961:#install.packages("Rfacebook")
1490382744962:#library(Rfacebook)
1490382744963:# Todo --------------------------------------------------
1490382744964:# - bug fixes, date_preset for v2.7 set to 30 by default, reset to lifetime
1490382744965:# - set to more rigorous method to pull ads at adaccount_id level, for batch processing
1490382744966:# Functions ---------------------------------------------------------------
1490382744967:# User Functions
1490382744968:# Function to convert Facebook date format to R date format
1490382744969:format.facebook.date <- function(datestring) {
1490382744970:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1490382744970:}
1490382744972:# Inputs ------------------------------------------------
1490382744974:# Turn stringsAsFactors off so rbind works properly.
1490382744974:options(stringsAsFactors = FALSE)
1490382744975:# Find OAuth settings for facebook:
1490382744976:#http://developers.facebook.com/docs/authentication/server-side/
1490382744977:facebook <- oauth_endpoints("facebook")
1490382744979:# Set OAUTH Settings
1490382744981:app_name <- "r_access"
1490382744982:app_id <- "955460364539237"
1490382744984:app_secret <- "0a3e6943c90510dc158fc7683e560f7d"
1490382744985:scope = "ads_management,manage_pages,publish_actions"
1490382744987:# Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
1490382744987:full_url <- oauth_callback()
1490382744988:full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
1490382744990:message <- paste("Copy and paste into Site URL on Facebook App Settings:",
1490382744990:full_url, "\nWhen done, press any key to continue...")
1490382744992:# Reminder to add callback into the app page.
1490382744993:invisible(readline(message))
1490382779110:#http://developers.facebook.com/docs/authentication/server-side/
1490382779111:facebook <- oauth_endpoints("facebook")
1490382779112:# Set OAUTH Settings
1490382779113:app_name <- "r_access"
1490382779113:app_id <- "955460364539237"
1490382779114:app_secret <- "0a3e6943c90510dc158fc7683e560f7d"
1490382779114:scope = "ads_management,manage_pages,publish_actions"
1490382779115:# Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
1490382779116:full_url <- oauth_callback()
1490382779117:full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
1490382779117:message <- paste("Copy and paste into Site URL on Facebook App Settings:",
1490382779118:full_url, "\nWhen done, press any key to continue...")
1490382784921:# Reminder to add callback into the app page.
1490382784922:invisible(readline(message))
1490382784922:# Intialize App
1490382784923:myapp <- oauth_app(app_name, app_id, app_secret)
1490382791577:# Current httr version, to test oauth protocol. [Required to set global port variables; won't work otherwise.]
1490382791579:if (packageVersion('httr') > "0.6.1"){
1490382791579:Sys.setenv("HTTR_SERVER_PORT" = "1410/")
1490382791580:fb_oauth <- oauth2.0_token(facebook, myapp,
1490382791581:scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
1490382791582:if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
1490382791583:message("Authentication successful.")
1490382791584:}
1490382832696:## v2.0.0 #####################
1490382832697:# Summary -----------------------------------------------------------------
1490382832698:# Query Facebook data (Page, Post, & Ad) using Facebook Acess Tokens.
1490382832699:# Setup -------------------------------------------------------------------
1490382832700:# Load and install all necessary packages for the script
1490382832701:# Required Packages for dataframes, forecasting, graphical visualization, and development
1490382832702:# Use 'install.packages()' if unavailable
1490382832703:#library(zoo)
1490382832704:#library(forecast)
1490382832704:library(devtools)
1490382832707:library(ggplot2)
1490382832709:#library(scales)
1490382832710:library(devtools)
1490382832711:library(compare)
1490382832713:library(xlsx)
1490382832715:library(httr)
1490382832716:library(rjson)
1490382832718:library(RCurl)
1490382832720:library(roxygen2)
1490382832725:# Pull most up to date Github repositories for relevant packages
1490382832726:# Not frequently updated; does not need to be run every time
1490382832727:#install_github("pablobarbera/Rfacebook/Rfacebook")
1490382832727:#install_github("pablobarbera/instaR/instaR")
1490382832728:library(Rfacebook)
1490382832730:# User Functions ----------------------------------------------------------
1490382832731:# Some built/discovered functions that help with data manipulation
1490382832732:# Convert Facebook date format to R date format
1490382832733:UnixDate <- function(datestring) {
1490382832734:return(as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT"))
1490382832735:}
1490382832737:# Convert retrieved dates to readable dates and append the dataset
1490382832737:FormatDate <- function (dataset) {
1490382832738:#return(names(dataset))
1490382832739:if ('created_time' %in% names(dataset)) {
1490382832740:if (c('day') %in% names(dataset) == FALSE) {
1490382832741:dataset[, 'datetime'] = UnixDate(dataset$created_time)
1490382832741:dataset[, 'day'] = format(dataset$datetime, "%Y-%m-%d")
1490382832742:dataset[, 'month'] = format(dataset$datetime, "%Y-%m")
1490382832743:} else {
1490382832745:print('Date fields already exist.')
1490382832746:continue
1490382832746:}
1490382832747:} else {
1490382832748:print('created_time field does not exist')
1490382832749:}
1490382832751:if (is.null(dataset$datetime[1]) == TRUE) {
1490382832752:df$datetime <- UnixDate(page$created_time)
1490382832754:dataset <- df
1490382832755:} else {
1490382832756:print("Date fields already exist.")
1490382832757:}
1490382832760:} & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1490382832761:df$month <- format( df$datetime, "%Y-%m")
1490382832763:df$day <- format( df$datetime, "%Y-%m-%d")
1490382832764:# Shift a vector up by an amount
1490382832765:shift <- function(x, n){
1490382832765:c(x[-(seq(n))], rep(NA, n))
1490382832767:}
1490382832769:# Get gcd from vector
1490382832769:gcd <- function(x,y) {
1490382832770:r <- x%%y;
1490382832772:return(ifelse(r, gcd(y, r), y))
1490382832773:}
1490382832775:#
1490382832777:# Inputs ------------------------------------------------------------------
1490382832778:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1490382832780:# Facebook App paramaters (Available at developer.facebook.com)
1490382832780:# Must be set up with localhost:1400 acess for verification
1490382832781:app_id = "955460364539237"
1490382832782:app_name = "r_access"
1490382832783:app_secret = "0a3e6943c90510dc158fc7683e560f7d"
1490382832784:scope = "ads_management,manage_pages,publish_actions"
1490382832786:# Set Desktop as working directory
1490382832787:setwd("~/")
1490382832788:getwd()
1490382832790:# Authorize with Facebook
1490382832791:#Using 'rFacebook' from Github
1490382832792:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1490382832793:#callAPI("https://graph.facebook.com/v2.4/act_693722000711682/adgroups?fields=name&limit=1000", fboauth)
1490382832794:# Define data range for data (2012 is out of bounds for some metrics)
1490382832795:# Facebook Functions ------------------------------------------------------
1490382832796:# A higher level wrap up of some Pablo's functions, in order to allow easy deployment
1490382832797:#FacebookAuth = function (app_id, app_secret, scope) {
1490382832798:#fbOAuth(app_id = app_id, app_secret,extended_permissions = scope)
1490382832799:#}
1490382832800:# Create looper for Ftokens
1490382832802:ftokens <- c(
1490382832802:#Sledgehammer Wine
1490382835978:)
1490382849026:#library(zoo)
1490382849027:#library(forecast)
1490382849028:library(devtools)
1490382849030:library(ggplot2)
1490382849033:#library(scales)
1490382849034:library(devtools)
1490382849036:library(compare)
1490382849037:library(xlsx)
1490382849039:library(httr)
1490382849041:library(rjson)
1490382849042:library(RCurl)
1490382849044:library(roxygen2)
1490382849046:# Pull most up to date Github repositories for relevant packages
1490382849047:# Not frequently updated; does not need to be run every time
1490382849048:#install_github("pablobarbera/Rfacebook/Rfacebook")
1490382849049:#install_github("pablobarbera/instaR/instaR")
1490382849049:library(Rfacebook)
1490382849052:# User Functions ----------------------------------------------------------
1490382849052:# Some built/discovered functions that help with data manipulation
1490382849053:# Convert Facebook date format to R date format
1490382849053:UnixDate <- function(datestring) {
1490382849054:return(as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT"))
1490382849055:}
1490382849057:# Convert retrieved dates to readable dates and append the dataset
1490382849058:FormatDate <- function (dataset) {
1490382849058:#return(names(dataset))
1490382849059:if ('created_time' %in% names(dataset)) {
1490382849060:if (c('day') %in% names(dataset) == FALSE) {
1490382849062:dataset[, 'datetime'] = UnixDate(dataset$created_time)
1490382849063:dataset[, 'day'] = format(dataset$datetime, "%Y-%m-%d")
1490382849064:dataset[, 'month'] = format(dataset$datetime, "%Y-%m")
1490382849064:} else {
1490382849065:print('Date fields already exist.')
1490382849066:continue
1490382849067:}
1490382849068:} else {
1490382849068:print('created_time field does not exist')
1490382849069:}
1490382849070:if (is.null(dataset$datetime[1]) == TRUE) {
1490382849071:df$datetime <- UnixDate(page$created_time)
1490382849072:dataset <- df
1490382849073:} else {
1490382849074:print("Date fields already exist.")
1490382849075:}
1490382849078:} & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1490382849079:df$month <- format( df$datetime, "%Y-%m")
1490382849080:df$day <- format( df$datetime, "%Y-%m-%d")
1490382849082:# Shift a vector up by an amount
1490382849083:shift <- function(x, n){
1490382849084:c(x[-(seq(n))], rep(NA, n))
1490382849085:}
1490382849086:# Get gcd from vector
1490382849087:gcd <- function(x,y) {
1490382849088:r <- x%%y;
1490382849089:return(ifelse(r, gcd(y, r), y))
1490382849089:}
1490382849091:#
1490382849093:# Inputs ------------------------------------------------------------------
1490382849093:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1490382849096:# Facebook App paramaters (Available at developer.facebook.com)
1490382849097:# Must be set up with localhost:1400 acess for verification
1490382849098:app_id = "955460364539237"
1490382849099:app_name = "r_access"
1490382849100:app_secret = "0a3e6943c90510dc158fc7683e560f7d"
1490382849101:scope = "ads_management,manage_pages,publish_actions"
1490382849104:# Set Desktop as working directory
1490382849105:setwd("~/")
1490382849106:getwd()
1490382849108:# Authorize with Facebook
1490382849109:#Using 'rFacebook' from Github
1490382849109:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1490382849110:#callAPI("https://graph.facebook.com/v2.4/act_693722000711682/adgroups?fields=name&limit=1000", fboauth)
1490382849113:# Define data range for data (2012 is out of bounds for some metrics)
1490382849115:# Facebook Functions ------------------------------------------------------
1490382849115:# A higher level wrap up of some Pablo's functions, in order to allow easy deployment
1490382849117:#FacebookAuth = function (app_id, app_secret, scope) {
1490382849118:#fbOAuth(app_id = app_id, app_secret,extended_permissions = scope)
1490382849118:#}
1490382849119:# Create looper for Ftokens
1490382899744:## Facebook Query ##############
1490382899745:## By Vivek Menon ##############
1490382899746:## v2.0.0 #####################
1490382899747:# Summary -----------------------------------------------------------------
1490382899747:# Query Facebook data (Page, Post, & Ad) using Facebook Acess Tokens.
1490382899749:# Setup -------------------------------------------------------------------
1490382899749:# Load and install all necessary packages for the script
1490382899751:# Required Packages for dataframes, forecasting, graphical visualization, and development
1490382899762:# Use 'install.packages()' if unavailable
1490382899763:#library(zoo)
1490382899764:#library(forecast)
1490382899765:library(devtools)
1490382899767:library(ggplot2)
1490382899769:#library(scales)
1490382899769:library(devtools)
1490382899772:library(compare)
1490382899774:library(xlsx)
1490382899775:library(httr)
1490382899777:library(rjson)
1490382899779:library(RCurl)
1490382899781:library(roxygen2)
1490382899783:# Pull most up to date Github repositories for relevant packages
1490382899784:# Not frequently updated; does not need to be run every time
1490382899785:#install_github("pablobarbera/Rfacebook/Rfacebook")
1490382899786:#install_github("pablobarbera/instaR/instaR")
1490382899786:library(Rfacebook)
1490382899789:# User Functions ----------------------------------------------------------
1490382899790:# Some built/discovered functions that help with data manipulation
1490382899790:# Convert Facebook date format to R date format
1490382899791:UnixDate <- function(datestring) {
1490382899792:return(as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT"))
1490382899793:}
1490382899794:# Convert retrieved dates to readable dates and append the dataset
1490382899795:FormatDate <- function (dataset) {
1490382899795:#return(names(dataset))
1490382899796:if ('created_time' %in% names(dataset)) {
1490382899797:if (c('day') %in% names(dataset) == FALSE) {
1490382899797:dataset[, 'datetime'] = UnixDate(dataset$created_time)
1490382899798:dataset[, 'day'] = format(dataset$datetime, "%Y-%m-%d")
1490382899799:dataset[, 'month'] = format(dataset$datetime, "%Y-%m")
1490382899799:} else {
1490382899801:print('Date fields already exist.')
1490382899802:continue
1490382899803:}
1490382899805:} else {
1490382899808:print('created_time field does not exist')
1490382899809:}
1490382899812:if (is.null(dataset$datetime[1]) == TRUE) {
1490382899813:df$datetime <- UnixDate(page$created_time)
1490382899815:dataset <- df
1490382899815:} else {
1490382899816:print("Date fields already exist.")
1490382899817:}
1490382899821:} & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1490382899826:df$month <- format( df$datetime, "%Y-%m")
1490382899850:df$day <- format( df$datetime, "%Y-%m-%d")
1490382899853:# Shift a vector up by an amount
1490382899853:shift <- function(x, n){
1490382899854:c(x[-(seq(n))], rep(NA, n))
1490382899855:}
1490382899859:# Get gcd from vector
1490382899860:gcd <- function(x,y) {
1490382899861:r <- x%%y;
1490382899861:return(ifelse(r, gcd(y, r), y))
1490382899862:}
1490382899863:#
1490382899865:# Inputs ------------------------------------------------------------------
1490382899865:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1490382899867:# Facebook App paramaters (Available at developer.facebook.com)
1490382899868:# Must be set up with localhost:1400 acess for verification
1490382899868:app_id = "955460364539237"
1490382899869:app_name = "r_access"
1490382899870:app_secret = "0a3e6943c90510dc158fc7683e560f7d"
1490382899870:scope = "ads_management,manage_pages,publish_actions"
1490382899872:# Set Desktop as working directory
1490382899872:setwd("~/")
1490382899873:getwd()
1490382899875:# Authorize with Facebook
1490382899875:#Using 'rFacebook' from Github
1490382899876:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1490382899877:#callAPI("https://graph.facebook.com/v2.4/act_693722000711682/adgroups?fields=name&limit=1000", fboauth)
1490382899877:# Define data range for data (2012 is out of bounds for some metrics)
1490382899878:# Facebook Functions ------------------------------------------------------
1490382899879:# A higher level wrap up of some Pablo's functions, in order to allow easy deployment
1490382899879:#FacebookAuth = function (app_id, app_secret, scope) {
1490382899880:#fbOAuth(app_id = app_id, app_secret,extended_permissions = scope)
1490382899881:#}
1490382899881:# Create looper for Ftokens
1490382899882:ftokens <- c(
1490382899883:#Sledgehammer Wine
1490382899883:#"EAACEdEose0cBAEyF7hkNB6lPbRHGjf0vKqW9ZB8sZBSy3LUGTUelMy8ZBE4rTo1HWZAc6IbZBUDkE6p7lhQ7FeCtxb1P0nUvy9x3ltkZCmcP1CyxSaSDZAwlPsUwZBysAtvvTCuqjDxmqZCYv5X4t2GKsZAVENiMZAkcur64cU7qu71xgZDZD"
1490382899885:#Chateau Saint Jean
1490382899885:#,"EAACEdEose0cBAB6y1eZButlUqpuUt1IUau7lDlZChQxE4MiXWMZCuWkCLsI9yZCajIEnIQVxZCQrmR2XMJdsaufMRhh5QOkVrzwcMZAZCC4FctcBfZByjZCVsctpvMmPKJLGRWyyToWvMqxM4CBLi3rELZCipHbfI8QgCj04Py8ZCgVRAZDZD"
1490382899886:#19 Crimes
1490382899887:#,"EAACEdEose0cBAHIQiWkKO8TdkDpxnojS1lDoZATgRap3L8Sz3D0B7WUYilnpj1NvnltXTbOE12QSnEDvjO2KmUZAvMRy3dVrZCBHP9ZCNiGjbXRK5QCkwsA7Vn5cD9oW9BSOGHb92N3o0j9t3ZAlptZA9kGjTv3qymVOvlsg5b7QZDZD"
1490382899888:#Beringer Vneyards
1490382899888:#,"EAACEdEose0cBAP5NwqMtlIxi8HWYe4G6CP1hpHRatyK5AN1X6CDIVu1nDOfSZAI8ovTF4ibkwpkH1NMxEPwBdOgemK6nnbl8rsNF1mCoCYho4wMLrWdlYD5zJuJEOcMOJWJsECwKfFycVIdpymSoFZAq91ZBDZBUkz2DU3OZARgZDZD"
1490382899889:#100% Canadian Milk
1490382899890:#"EAANkZCHOgFWUBAEmrJ2GBsINYbyetoAGRrBKU2tZCPWOWlodmBS9gknNFH3zBfvXCtTYnRsgRVzZAr5LOdAnZBVLj8zX3Xuv7oVxbmmcNfiNZCTTpQfbdWmHb2W1yZAtakecO9yeCPjPljAxRZAagdxsH82IA9wdk56xdi2KUZB28AZDZD"
1490382899890:#Lait 100% Canadien
1490382899891:#,"EAANkZCHOgFWUBAOoOsD3RKLwZC1VGegdIoBB9etcfOL6ToGEpNtzxQkrdsen3VKzwZAQ5ozZCsmDU3KYZBeA4Fg1uJPS6PjW5UlWH2LweqsQq2C4j057ARFvAvSJ5pRKkvsy9nxgaBX68y9vXwTysxTTSIGcYczADujwgOjr1kQZDZD"
1490382899891:#Recharge with Milk
1490382899892:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1490382899893:#Misc
1490382899893:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1490382899894:#Baron
1490382899895:#"EAACEdEose0cBAGLivuq5Aurqa4K6DZBkBRHHIcZCHLD3u0sdhMvUE3kEmAos9Ql3M1x51t7aAOKx9DQbhbKRnRSwbaP23rdC0RRkCcv72ZBCKhG6CbxqDTMxbb9vAfEpMwmjm6lcs0xAkYnZClxUBUDxCVjZBodjdn9BqVM5xfAZDZD"
1490382899895:#Nissan
1490382899896:"EAACEdEose0cBABXvvmZAnd5lP7iBBfyENOdt8E1DxBECZCFIiIWZBOAn7HxjbA0EzwRUDgi5RRDwBtnwNPTbqEIGeW4ykmV0PEZCyigZCQShZANVtkJbJrA4N1KtAW1B7frwvV8NhAIQxqwYDyL9GszHarCjIZCB7P9u49S9WJdOalFnBJYWacW2T4taUURDZAIZD"
1490382899896:)
1490382919374:# Access public personal data; basically a ftoken test
1490382919375:me <- getUsers("me", token=ftoken[1])
1490382919377:print(me$name)
1490382919378:## Page Id
1490382919379:# Define which page will be used for the data collection. Change id's as necessary.
1490382919380:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1490382919383:pageid = me$id
1490382928577:# Summary -----------------------------------------------------------------
1490382928586:# Query Facebook data (Page, Post, & Ad) using Facebook Acess Tokens.
1490382928589:# Setup -------------------------------------------------------------------
1490382928590:# Load and install all necessary packages for the script
1490382928591:# Required Packages for dataframes, forecasting, graphical visualization, and development
1490382928592:# Use 'install.packages()' if unavailable
1490382928593:#library(zoo)
1490382928594:#library(forecast)
1490382928595:library(devtools)
1490382928597:library(ggplot2)
1490382928599:#library(scales)
1490382928600:library(devtools)
1490382928601:library(compare)
1490382928603:library(xlsx)
1490382928606:library(httr)
1490382928607:library(rjson)
1490382928609:library(RCurl)
1490382928612:library(roxygen2)
1490382928614:# Pull most up to date Github repositories for relevant packages
1490382928614:# Not frequently updated; does not need to be run every time
1490382928615:#install_github("pablobarbera/Rfacebook/Rfacebook")
1490382928616:#install_github("pablobarbera/instaR/instaR")
1490382928616:library(Rfacebook)
1490382928618:# User Functions ----------------------------------------------------------
1490382928619:# Some built/discovered functions that help with data manipulation
1490382928621:# Convert Facebook date format to R date format
1490382928622:UnixDate <- function(datestring) {
1490382928622:return(as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT"))
1490382928624:}
1490382928626:# Convert retrieved dates to readable dates and append the dataset
1490382928626:FormatDate <- function (dataset) {
1490382928627:#return(names(dataset))
1490382928628:if ('created_time' %in% names(dataset)) {
1490382928628:if (c('day') %in% names(dataset) == FALSE) {
1490382928629:dataset[, 'datetime'] = UnixDate(dataset$created_time)
1490382928630:dataset[, 'day'] = format(dataset$datetime, "%Y-%m-%d")
1490382928631:dataset[, 'month'] = format(dataset$datetime, "%Y-%m")
1490382928631:} else {
1490382928632:print('Date fields already exist.')
1490382928633:continue
1490382928633:}
1490382928634:} else {
1490382928635:print('created_time field does not exist')
1490382928636:}
1490382928638:if (is.null(dataset$datetime[1]) == TRUE) {
1490382928638:df$datetime <- UnixDate(page$created_time)
1490382928640:dataset <- df
1490382928641:} else {
1490382928641:print("Date fields already exist.")
1490382928642:}
1490382928646:} & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1490382928647:df$month <- format( df$datetime, "%Y-%m")
1490382928648:df$day <- format( df$datetime, "%Y-%m-%d")
1490382928650:# Shift a vector up by an amount
1490382928651:shift <- function(x, n){
1490382928652:c(x[-(seq(n))], rep(NA, n))
1490382928653:}
1490382928655:# Get gcd from vector
1490382928655:gcd <- function(x,y) {
1490382928656:r <- x%%y;
1490382928657:return(ifelse(r, gcd(y, r), y))
1490382928658:}
1490382928660:#
1490382928661:# Inputs ------------------------------------------------------------------
1490382928661:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1490382928663:# Facebook App paramaters (Available at developer.facebook.com)
1490382928663:# Must be set up with localhost:1400 acess for verification
1490382928664:app_id = "955460364539237"
1490382928664:app_name = "r_access"
1490382928665:app_secret = "0a3e6943c90510dc158fc7683e560f7d"
1490382928666:scope = "ads_management,manage_pages,publish_actions"
1490382928668:# Set Desktop as working directory
1490382928669:setwd("~/")
1490382928670:getwd()
1490382928672:# Authorize with Facebook
1490382928673:#Using 'rFacebook' from Github
1490382928674:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1490382928675:#callAPI("https://graph.facebook.com/v2.4/act_693722000711682/adgroups?fields=name&limit=1000", fboauth)
1490382928676:# Define data range for data (2012 is out of bounds for some metrics)
1490382928677:# Facebook Functions ------------------------------------------------------
1490382928677:# A higher level wrap up of some Pablo's functions, in order to allow easy deployment
1490382928678:#FacebookAuth = function (app_id, app_secret, scope) {
1490382928679:#fbOAuth(app_id = app_id, app_secret,extended_permissions = scope)
1490382928680:#}
1490382928681:# Create looper for Ftokens
1490382975103:install.packages("devtool","compare","xlsx","httr","rjson","RCurl","roxygen2")
1490382996847:install.packages("devtools","compare","xlsx","httr","rjson","RCurl","roxygen2")
1490383004196:install.packages("devtools")
1490383166816:#library(zoo)
1490383166817:#library(forecast)
1490383166818:library(devtools)
1490383167271:library(ggplot2)
1490383167273:#library(scales)
1490383167273:library(devtools)
1490383167274:library(compare)
1490383167276:library(xlsx)
1490383167278:library(httr)
1490383167279:library(rjson)
1490383167280:library(RCurl)
1490383167282:library(roxygen2)
1490383167283:# Pull most up to date Github repositories for relevant packages
1490383167284:# Not frequently updated; does not need to be run every time
1490383167285:#install_github("pablobarbera/Rfacebook/Rfacebook")
1490383167285:#install_github("pablobarbera/instaR/instaR")
1490383167285:library(Rfacebook)
1490383176976:install.packages("Rfacebook")
1490383205952:tall_github("pablobarbera/Rfacebook/Rfacebook")
1490383205960:#install_github("pablobarbera/instaR/instaR")
1490383205961:library(Rfacebook)
1490383220427:# User Functions ----------------------------------------------------------
1490383220436:# Some built/discovered functions that help with data manipulation
1490383220437:# Convert Facebook date format to R date format
1490383220438:UnixDate <- function(datestring) {
1490383220440:return(as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT"))
1490383220440:}
1490383220442:# Convert retrieved dates to readable dates and append the dataset
1490383220443:FormatDate <- function (dataset) {
1490383220444:#return(names(dataset))
1490383220444:if ('created_time' %in% names(dataset)) {
1490383220445:if (c('day') %in% names(dataset) == FALSE) {
1490383220445:dataset[, 'datetime'] = UnixDate(dataset$created_time)
1490383220446:dataset[, 'day'] = format(dataset$datetime, "%Y-%m-%d")
1490383220446:dataset[, 'month'] = format(dataset$datetime, "%Y-%m")
1490383220447:} else {
1490383220447:print('Date fields already exist.')
1490383220448:continue
1490383220449:}
1490383220450:} else {
1490383220451:print('created_time field does not exist')
1490383220452:}
1490383220453:if (is.null(dataset$datetime[1]) == TRUE) {
1490383220455:df$datetime <- UnixDate(page$created_time)
1490383220456:dataset <- df
1490383220457:} else {
1490383220458:print("Date fields already exist.")
1490383220459:}
1490383220461:} & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1490383220462:df$month <- format( df$datetime, "%Y-%m")
1490383220463:df$day <- format( df$datetime, "%Y-%m-%d")
1490383220465:# Shift a vector up by an amount
1490383220465:shift <- function(x, n){
1490383220466:c(x[-(seq(n))], rep(NA, n))
1490383220467:}
1490383220469:# Get gcd from vector
1490383220470:gcd <- function(x,y) {
1490383220471:r <- x%%y;
1490383220472:return(ifelse(r, gcd(y, r), y))
1490383220472:}
1490383220474:#
1490383225933:# Inputs ------------------------------------------------------------------
1490383225941:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1490383225943:# Facebook App paramaters (Available at developer.facebook.com)
1490383225944:# Must be set up with localhost:1400 acess for verification
1490383225945:app_id = "955460364539237"
1490383225946:app_name = "r_access"
1490383225947:app_secret = "0a3e6943c90510dc158fc7683e560f7d"
1490383225948:scope = "ads_management,manage_pages,publish_actions"
1490383225949:# Set Desktop as working directory
1490383225950:setwd("~/")
1490383225951:getwd()
1490383225953:# Authorize with Facebook
1490383225953:#Using 'rFacebook' from Github
1490383225954:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
