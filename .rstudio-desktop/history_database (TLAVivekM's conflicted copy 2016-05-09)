1461354593415:#adcontentparsed <- adcontentparsed.store
1461354593416:names(adcontentparsed)[(names(adcontentparsed) == ("actions.value"))] <- adcontentparsed[(names(adcontentparsed) == ("actions.action_type"))]
1461354593418:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("actions.action_type")))]
1461354593419:if (length(which(names(adcontentparsed) %in% c("video_avg_pct_watched_actions.action_type","video_avg_sec_watched_actions.action_type"))) > 1) {
1461354593422:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_sec_watched_actions.value"))] <- paste0("video_avg_sec_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1461354593424:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_pct_watched_actions.value"))] <- paste0("video_avg_pct_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1461354593427:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("video_avg_pct_watched_actions.action_type")))]
1461354593428:} else {}
1461354593431:# Frame data for inclusion
1461354593432:days = length((adcontentparsed[overalladmetricsreturned[1] == names(adcontentparsed)]))
1461354593440:header <- c(adlist[ad,c("ad.campaign.id","ad.campaign.name","objective","created.time")])
1461354593441:footer <- data.frame()
1461354593443:if (is.null(adcontentparsed)==TRUE) {
1461354593445:footer <- rep(0,length(overalladmetricsreturned))
1461354593447:names(footer) <- overalladmetricsreturned
1461354593448:adoverallset <- c(unlist(header),footer)
1461354593451:} else {
1461354593452:for (day in 1:days) {
1461354593455:for (metric in 1:length(overalladmetricsreturned)) {
1461354593457:if (is.na(adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]) == TRUE) {
1461354593459:footer[day,metric] <- 0
1461354593460:} else {
1461354593463:footer[day,metric] <- adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]
1461354593590:}
1461354593613:colnames(footer) <- overalladmetricsreturned
1461354593622:adoverallset <- cbind(header,footer)
1461354593627:}
1461354593634:adoveralldata <- rbind(adoveralldata,adoverallset)
1461354593639:colnames(adoveralldata) <- c(names(header),overalladmetricsreturned)
1461354593645:# Print processing stats
1461354593651:completion <- (ad/(nrow(adlist))*100)
1461354593665:#print(ad)
1461354593673:#print(nrow(adoveralldata))
1461354593684:#print(paste0("Finding Facebook Data for Ad Set ",ad,": ",adlist[ad,2]))
1461354593702:print(paste0('Primary dataset appended: ',nrow(adoveralldata),' rows retrieved from Facebook.'))
1461354593707:print(paste(paste0(round(completion, digits = 0),"%"), "of Ads Processed."))
1461354593716:}
1461354594991:#names(adoveralldata) <- overalladmetricsreturned
1461354594992:print(adoveralldata)
1461354595002:# Exporting ---------------------------------------------------------------
1461354595003:adoveralldatastore <- adoveralldata
1461354595005:#adoveralldata <- adoveralldatastore
1461354595005:adoveralldata[is.na(adoveralldata)] <- ""
1461354595010:#adoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)
1461354595012:#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461354595013:#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461354595016:setwd("/Users/vivek.menon/Desktop")
1461354595016:datafolder <- "Data"
1461354595017:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461354595024:# Rename columns for Excel readability
1461354595024:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461354595027:# output Page dataset as final csv
1461354595028:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461354595028:#write.xlsx(adoveralldata, paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461354595028:write.csv(adoveralldata, file = paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".csv"), row.names=FALSE)
1461354595032:#####
1461354616719:### Warning: Massive while loop that continues until the ad list is retrieved from Facebook Need to restart/interrupt R to stop the loop.
1461354616722:#nrow(adlist))
1461354616722:for (ad in 1:nrow(adlist)) {
1461354616723:print(paste0('Querying Ad ',ad,": ", adlist$ad.campaign.name[ad]))
1461354616723:adreq$status_code <- 400
1461354616724:count <- 0
1461354616724:while(adreq$status_code == 400) {
1461354616728:try(adreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&time_increment=1"), config(token = fb_oauth)))
1461354616728:count <- count + 1
1461354616728:#print(paste('Attempt', count))
1461354616729:}
1461354616729:print('Query successful.')
1461354616730:#print(content(adreq))
1461354616730:# Organize/clean data
1461354616731:adcontent <- content(adreq)
1461354616732:adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1461354616733:nextpage <- adcontent$paging$`next`
1461354616735:while (is.null(nextpage) == FALSE) {
1461354616735:#print("Additional Days")
1461354616736:adreq.additional <- GET(adcontent$paging$`next`, config(token = fb_oauth))
1461354616737:adcontent.additional <- content(adreq.additional)
1461354616738:adcontent.additional.parsed <- unlist(adcontent.additional, use.names=TRUE, recursive=TRUE)
1461354616740:adcontentparsed <- c(adcontentparsed,adcontent.additional.parsed)
1461354616741:nextpage <- adcontent.additional$paging$`next`
1461354616742:}
1461354616743:#adcontent2 <- unlist(adcontent$data, use.names=FALSE, recursive=TRUE)
1461354616744:adcontentparsed.store <- adcontentparsed
1461354616745:#adcontentparsed <- adcontentparsed.store
1461354616748:names(adcontentparsed)[(names(adcontentparsed) == ("actions.value"))] <- adcontentparsed[(names(adcontentparsed) == ("actions.action_type"))]
1461354616749:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("actions.action_type")))]
1461354616752:if (length(which(names(adcontentparsed) %in% c("video_avg_pct_watched_actions.action_type","video_avg_sec_watched_actions.action_type"))) > 1) {
1461354616753:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_sec_watched_actions.value"))] <- paste0("video_avg_sec_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1461354616755:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_pct_watched_actions.value"))] <- paste0("video_avg_pct_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1461354616757:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("video_avg_pct_watched_actions.action_type")))]
1461354616760:} else {}
1461354616763:# Frame data for inclusion
1461354616765:days = length((adcontentparsed[overalladmetricsreturned[1] == names(adcontentparsed)]))
1461354616768:header <- c(adlist[ad,c("ad.campaign.id","ad.campaign.name","objective","created.time")])
1461354616769:footer <- data.frame()
1461354616772:if (is.null(adcontentparsed)==TRUE) {
1461354616773:footer <- rep(0,length(overalladmetricsreturned))
1461354616775:names(footer) <- overalladmetricsreturned
1461354616777:adoverallset <- c(unlist(header),footer)
1461354616780:} else {
1461354616781:for (day in 1:days) {
1461354616784:for (metric in 1:length(overalladmetricsreturned)) {
1461354616786:if (is.na(adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]) == TRUE) {
1461354616788:footer[day,metric] <- 0
1461354616790:} else {
1461354616793:footer[day,metric] <- adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]
1461354616794:}
1461354616800:colnames(footer) <- overalladmetricsreturned
1461354616802:adoverallset <- cbind(header,footer)
1461354616812:}
1461354616833:adoveralldata <- rbind(adoveralldata,adoverallset)
1461354616836:colnames(adoveralldata) <- c(names(header),overalladmetricsreturned)
1461354616840:# Print processing stats
1461354616842:completion <- (ad/(nrow(adlist))*100)
1461354616845:#print(ad)
1461354616847:#print(nrow(adoveralldata))
1461354616850:#print(paste0("Finding Facebook Data for Ad Set ",ad,": ",adlist[ad,2]))
1461354616852:print(paste0('Primary dataset appended: ',nrow(adoveralldata),' rows retrieved from Facebook.'))
1461354616854:print(paste(paste0(round(completion, digits = 0),"%"), "of Ads Processed."))
1461354616859:}
1461354617977:#names(adoveralldata) <- overalladmetricsreturned
1461354617977:print(adoveralldata)
1461354617992:# Exporting ---------------------------------------------------------------
1461354617993:adoveralldatastore <- adoveralldata
1461354617995:#adoveralldata <- adoveralldatastore
1461354617996:adoveralldata[is.na(adoveralldata)] <- ""
1461354617999:#adoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)
1461354617999:#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461354618002:#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461354618003:setwd("/Users/vivek.menon/Desktop")
1461354618003:datafolder <- "Data"
1461354618004:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461354618004:# Rename columns for Excel readability
1461354618005:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461354618008:# output Page dataset as final csv
1461354618008:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461354618008:#write.xlsx(adoveralldata, paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461354618009:write.csv(adoveralldata, file = paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".csv"), row.names=FALSE)
1461354618012:#####
1461354652854:for (ad in (1:(length(initialcontent$data)))) {
1461354652855:#print(i)
1461354652857:adlist[ad,c("ad.campaign.id")] <- initialcontent$data[[ad]]$id
1461354652857:adlist[ad,c("ad.campaign.name")] <- initialcontent$data[[ad]]$name
1461354652863:adlist[ad,c("objective")] <- initialcontent$data[[ad]]$objective
1461354652863:#adlist[ad,c("status")] <- initialcontent$data[[ad]]$campaign_group_status
1461354652865:adlist[ad,c("created.time")] <- substr(initialcontent$data[[ad]]$created_time, 1, 10)
1461354652866:#adlist[ad,c("campaign id")] <- initialcontent$data[[ad]]$campaign_id
1461354652868:#adlist[ad,c("campaign name")] <- initialcontent$data[[ad]]$campaign_name
1461354652869:# Use this loop to populate with admetrics, and augment initial dataset; will not affect following loops.
1461354652869:completion <- (ad/(length(initialcontent$data))*100)
1461354652870:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1461354652871:}
1461354652873:adlist_store <- adlist
1461354652874:# slice list
1461354652875:adlist <- adlist[adlist$created.time > "2016-02-29",]
1461354652876:adlist_sliced <- adlist
1461354652877:# Metrics to examine
1461354652880:admetrics <- c("frequency,newsfeed_avg_position,ctr,unique_ctr,spend,reach,social_reach,unique_clicks,social_clicks,cost_per_unique_click,total_actions,cost_per_total_action,actions,video_avg_pct_watched_actions,video_avg_sec_watched_actions") #"cost_per_action_type"
1461354652881:# Test Pull for Loop 2
1461354652884:#testreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[89,1],"/insights?fields=",paste(admetrics,collapse=",")), config(token = fb_oauth))
1461354652887:#warn_for_status(testreq)
1461354652887:#content(testreq)
1461354652888:# Metrics framed
1461354652888:overalladmetricsreturned <- c("date_start","date_stop","spend","reach","social_reach","frequency","page_engagement","post_engagement","unique_clicks","social_clicks","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view","video_avg_sec_watched_video_view","video_avg_sec_watched_page_engagement","video_avg_sec_watched_post_engagement","video_avg_pct_watched_video_view","video_avg_pct_watched_page_engagement","video_avg_pct_watched_post_engagement")
1461354652893:adoveralldata <- data.frame(stringsAsFactors = FALSE)
1461354652893:#number of columns = length(c(names(header),overalladmetricsreturned))
1461354652894:#adstart <- ad
1461354652894:#600 calls / 600 seconds rate limit
1461354652895:### Warning: Massive while loop that continues until the ad list is retrieved from Facebook Need to restart/interrupt R to stop the loop.
1461354652896:#nrow(adlist))
1461354652898:for (ad in 1:nrow(adlist)) {
1461354652899:print(paste0('Querying Ad ',ad,": ", adlist$ad.campaign.name[ad]))
1461354652902:adreq$status_code <- 400
1461354652903:count <- 0
1461354652903:while(adreq$status_code == 400) {
1461354652907:try(adreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&time_increment=1"), config(token = fb_oauth)))
1461354652907:count <- count + 1
1461354652911:#print(paste('Attempt', count))
1461354652914:}
1461354652915:print('Query successful.')
1461354652918:#print(content(adreq))
1461354652922:# Organize/clean data
1461354652922:adcontent <- content(adreq)
1461354652925:adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1461354652926:nextpage <- adcontent$paging$`next`
1461354652930:while (is.null(nextpage) == FALSE) {
1461354652932:#print("Additional Days")
1461354652933:adreq.additional <- GET(adcontent$paging$`next`, config(token = fb_oauth))
1461354652936:adcontent.additional <- content(adreq.additional)
1461354652938:adcontent.additional.parsed <- unlist(adcontent.additional, use.names=TRUE, recursive=TRUE)
1461354652940:adcontentparsed <- c(adcontentparsed,adcontent.additional.parsed)
1461354652941:nextpage <- adcontent.additional$paging$`next`
1461354652943:}
1461354652944:#adcontent2 <- unlist(adcontent$data, use.names=FALSE, recursive=TRUE)
1461354652948:adcontentparsed.store <- adcontentparsed
1461354652949:#adcontentparsed <- adcontentparsed.store
1461354652951:names(adcontentparsed)[(names(adcontentparsed) == ("actions.value"))] <- adcontentparsed[(names(adcontentparsed) == ("actions.action_type"))]
1461354652952:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("actions.action_type")))]
1461354652954:if (length(which(names(adcontentparsed) %in% c("video_avg_pct_watched_actions.action_type","video_avg_sec_watched_actions.action_type"))) > 1) {
1461354652956:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_sec_watched_actions.value"))] <- paste0("video_avg_sec_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1461354652958:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_pct_watched_actions.value"))] <- paste0("video_avg_pct_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1461354652960:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("video_avg_pct_watched_actions.action_type")))]
1461354652962:} else {}
1461354652965:# Frame data for inclusion
1461354652967:days = length((adcontentparsed[overalladmetricsreturned[1] == names(adcontentparsed)]))
1461354652969:header <- c(adlist[ad,c("ad.campaign.id","ad.campaign.name","objective","created.time")])
1461354652972:footer <- data.frame()
1461354652974:if (is.null(adcontentparsed)==TRUE) {
1461354652975:footer <- rep(0,length(overalladmetricsreturned))
1461354652977:names(footer) <- overalladmetricsreturned
1461354652980:adoverallset <- c(unlist(header),footer)
1461354652985:} else {
1461354652987:for (day in 1:days) {
1461354652988:for (metric in 1:length(overalladmetricsreturned)) {
1461354652991:if (is.na(adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]) == TRUE) {
1461354652993:footer[day,metric] <- 0
1461354652995:} else {
1461354652996:footer[day,metric] <- adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]
1461354652999:}
1461354653004:colnames(footer) <- overalladmetricsreturned
1461354653006:adoverallset <- cbind(header,footer)
1461354653008:}
1461354653012:adoveralldata <- rbind(adoveralldata,adoverallset)
1461354653016:colnames(adoveralldata) <- c(names(header),overalladmetricsreturned)
1461354653019:# Print processing stats
1461354653021:completion <- (ad/(nrow(adlist))*100)
1461354653023:#print(ad)
1461354653024:#print(nrow(adoveralldata))
1461354653027:#print(paste0("Finding Facebook Data for Ad Set ",ad,": ",adlist[ad,2]))
1461354653032:print(paste0('Primary dataset appended: ',nrow(adoveralldata),' rows retrieved from Facebook.'))
1461354653034:print(paste(paste0(round(completion, digits = 0),"%"), "of Ads Processed."))
1461354653037:}
1461354654054:#names(adoveralldata) <- overalladmetricsreturned
1461354654054:print(adoveralldata)
1461354654067:# Exporting ---------------------------------------------------------------
1461354654067:adoveralldatastore <- adoveralldata
1461354654069:#adoveralldata <- adoveralldatastore
1461354654070:adoveralldata[is.na(adoveralldata)] <- ""
1461354654071:#adoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)
1461354654071:#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461354654074:#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461354654074:setwd("/Users/vivek.menon")
1461354654075:datafolder <- "Data"
1461354654075:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461354654079:# Rename columns for Excel readability
1461354654080:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461354654083:# output Page dataset as final csv
1461354654083:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461354654083:#write.xlsx(adoveralldata, paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461354654084:write.csv(adoveralldata, file = paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".csv"), row.names=FALSE)
1461354801739:## Facebook Query Injector #####
1461354801741:## Mirum Agency ################
1461354801742:## By Vivek Menon ##############
1461354801742:## v.1.5.0 #####################
1461354801743:# Summary -----------------------------------------------------------------
1461354801743:# Todo --------------------------------------------------------------------
1461354801744:# - Run script for all major brands
1461354801745:# - Create 'participation rate' function
1461354801748:# - Incorporate Twitter
1461354801748:# Setup -------------------------------------------------------------------
1461354801749:# Load and install all necessary packages for the script
1461354801752:# Required Packages for dataframes, forecasting, graphical visualization, and development
1461354801752:# Use 'install.packages()' if unavailable.
1461354801756:#library(zoo)
1461354801756:#library(forecast)
1461354801756:library(ggplot2)
1461354802180:#library(scales)
1461354802181:library(devtools)
1461354802183:library(compare)
1461354802256:library(xlsx)
1461354802259:require(httr)
1461354802259:require(rjson)
1461354802320:require(RCurl)
1461354802320:# Pull most up to date Github repositories for relevant packages
1461354802324:# Not frequently updated; does not need to be run every time.
1461354802326:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461354802326:#install_github("pablobarbera/instaR/instaR")
1461354802327:# Required packags for plugging into Facebook API
1461354802327:#library(twitteR)
1461354802331:library(Rfacebook)
1461354802434:#library(instaR)
1461354802434:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1461354802434:# https://instagram.com/developer/authentication/?hl=en
1461354802435:setwd("~/")
1461354802435:getwd()
1461354802436:# Authorize with Facebook
1461354802436:#Using 'rFacebook' from Github
1461354802437:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461354806062:# Functions ---------------------------------------------------------------
1461354806066:# User Functions
1461354806066:# Function to convert Facebook date format to R date format
1461354806070:format.facebook.date <- function(datestring) {
1461354806070:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461354806071:}
1461354806071:# Shift a vector up by an amount
1461354806072:shift <- function(x, n){
1461354806072:c(x[-(seq(n))], rep(NA, n))
1461354806073:}
1461354806073:# Get gcd from vector
1461354806074:gcd <- function(x,y) {
1461354806076:r <- x%%y;
1461354806076:return(ifelse(r, gcd(y, r), y))
1461354806077:}
1461354806078:# Inputs ------------------------------------------------------------------
1461354806078:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1461354806079:# Define data range for data (2012 is out of bounds for some metrics)
1461354806080:posts <- 5000
1461354806081:roof = Sys.Date() #"2015-12-31"
1461354806082:floor = "2015-02-01" #"2015-05-01"
1461354806082:range = seq(as.Date(floor), as.Date(roof), by="days")
1461354806084:## Access ftoken
1461354806086:# Use token from Facebook Graph API
1461354806086:# token generated here: https://developers.facebook.com/tools/explorer
1461354806087:# Lasts two hours, and must be changed depending on page and permissions
1461354806087:ftokens <- c(
1461354806088:#Sledgehammer Wine
1461354806091:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461354806091:#Chateau Saint Jean
1461354806091:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461354806092:#19 Crimes
1461354806092:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461354806092:#Beringer Vneyards
1461354806093:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461354806093:#100% Canadian Milk
1461354806093:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461354806093:#Lait 100% Canadien
1461354806094:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461354806094:#Recharge with Milk
1461354806094:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461354806095:#Misc
1461354806095:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461354806095:#Baron
1461354806096:"CAACEdEose0cBAOzK81RWz8LOCCE77oAu3w1CBVjQJ0OlMn6H7XrWnpZCABb9zLMrE7rg1gr43wLZCAFLvt80g626f08f2mAlx1Xz498efviv8RP3KfTwbZCrYI3oHHhJvcXrZBJJPXkSztjjm4BMoZAeomlXJQys9ZCkKJ9U7BAklG8rOLYJsysZBAJ40lUh5AZD"
1461354806096:)
1461354806097:totalpagedata <- data.frame()
1461354806097:totalpostdata <- data.frame()
1461354806098:for (brand in 1:length(ftokens)) {
1461354806099:ftoken <- ftokens[brand]
1461354806102:## User Id
1461354806103:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461354806106:userid = "10153046308598756"
1461354806107:# Access public personal data; basically a ftoken test
1461354806107:me <- getUsers("me", token=ftoken)
1461354806108:print(me$name)
1461354806109:## Page Id
1461354806109:# Define which page will be used for the data collection. Change id's as necessary.
1461354806112:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461354806113:pageid = me$id
1461354806114:# Acquisition -------------------------------------------------------------
1461354806117:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461354806117:page <- getPage(pageid, ftoken, n = posts)
1461354806118:page.store <- page
1461354806121:# Create new vectors in dataset with datetime, month, and day formattiong
1461354806122:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461354806123:page$datetime <- format.facebook.date(page$created_time)
1461354806123:page$month <- format(page$datetime, "%Y-%m")
1461354806124:page$day <- format(page$datetime, "%Y-%m-%d")
1461354806125:page$datetime <- as.Date(page$datetime)
1461354806125:#page$month <- as.Date(page$month)
1461354806126:page$day <- as.Date(page$day)
1461354806127:} else {
1461354806128:print("Date fields already exist.")
1461354806131:}
1461354806132:# Processing --------------------------------------------------------------
1461354806135:# Process data to clean dataset and augment it with more data than default fields.
1461354806135:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1461354806137:## Cleaning =================================
1461354806137:# Page and Post Datasets
1461354806140:# Split dataset into two for pages and post data
1461354806141:# Create initial null sets
1461354806144:pagedata <- 0
1461354806145:postdata <- 0
1461354806148:## Appending =================================
1461354806150:### Page Metrics #############################
1461354806151:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461354806152:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461354806156:# Page Metrics to automatically pull
1461354806157:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461354806159:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461354806160:pagemetrics <- metrics
1461354806164:# Prep dataset by breaking into weeks
1461354806165:pagedata <- 0
1461354806168:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461354806172:colnames(pagedata) = c("pageid", "page", "date")
1461354806173:pagedata$page = page$from_name[1]
1461354806175:pagedata$pageid = page$from_id[1]
1461354806177:divisor = 5
1461354806177:remainder = length(range)%%divisor;
1461354806179:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461354806181:weeks <- (nrow(pagedata)/5)-2
1461354806183:# Start Data Acquisition Loop
1461354806187:for (metric in 1:length(metrics)) {
1461354806191:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461354806196:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461354806199:period = 'lifetime'
1461354806201:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461354806204:period = 'day'
1461354806208:tempfloor = "2014-02-01"
1461354806212:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461354806215:if (floor < tempfloor) {
1461354806222:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461354806224:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461354806226:weeks = tempweeks
1461354806233:} else {}
1461354806234:} else {
1461354806236:period = 'day'
1461354806239:weeks <- (nrow(pagedata)/5)-2
1461354806241:}
1461354806247:hold <- matrix(0, nrow=0, ncol=7)
1461354806251:for (week in 0:weeks) {
1461354806254:end <- pagedata$date[(week*5)+1]
1461354806255:start <- pagedata$date[((week+1)*5)+1]
1461354806260:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461354806263:pull <- NULL
1461354806264:attempt <- 1
1461354806268:while(is.null(pull) && attempt <= 10) {
1461354806270:attempt <- attempt + 1
1461354806271:try(
1461354806272:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461354806276:)
1461354806278:if (is.null(pull)) {
1461354806279:print("Empty Pull. Re-attempting.")
1461354806284:print(paste("Attempt", attempt))
1461354806286:} else {
1461354806288:pull$datetime <- format.facebook.date(pull$end_time)
1461354806290:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461354806291:pull$datetime <- as.Date(pull$datetime)
1461354806293:#page$month <- as.Date(page$month)
1461354806294:pull$day <- as.Date(pull$day)
1461354806298:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461354806300:print("Found Facebook data matching date range. Storing values.")
1461354806302:} else {
1461354806304:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461354806305:print(paste("Attempt", attempt))
1461354806307:pull <- NULL}
1461354806310:if (attempt > 100) {
1461354806312:print('Too many attempts. Skipping.')
1461354806313:pull <- NULL
1461354806315:break
1461354806318:} else {}
1461354806319:}
1461354806322:pulllength <- ncol(pull)
1461354806325:rpull = pull[rev(rownames(pull)),]
1461354806328:hold <- rbind(hold,rpull)
1461354806329:rawhold <- hold
1461354806332:}
1461354806338:rhold = hold[rev(rownames(hold)),]
1461354806340:rhold$value = shift(rhold$value, 1)
1461354806342:hold = rhold[rev(rownames(rhold)),]
1461354806344:hold$value[1] = rawhold$value[1]
1461354806347:hours <- seq(0,23)
1461354806348:names(hours) <- paste("Hour", hours)
1461354806353:subtypes <- c('link','comment', 'like')
1461354806355:names(subtypes) <- c('Shares','Comments', 'Likes')
1461354806359:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461354806361:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461354806367:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461354806371:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461354806374:for (type in 1:length(subtypes)) {
1461354806376:typehold <- NA
1461354806379:typehold <- hold[hold$variable == subtypes[type],]
1461354806383:pagedata <- cbind(NA,pagedata)
1461354806385:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461354806387:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461354806392:metrics <- c(metrics,subtypes[type])
1461354806400:}
1461354806404:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461354806408:for (demographic in 1:length(demographics)) {
1461354806414:print(names(demographics[demographic]))
1461354806416:typehold <- NA
1461354806419:typehold <- hold[hold$variable == demographics[demographic],]
1461354806420:typehold[typehold$value <= 10,] <- NA
1461354806425:pagedata <- cbind(NA,pagedata)
1461354806426:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461354806432:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461354806435:metrics <- c(metrics,demographics[demographic])
1461354806438:}
1461354806441:} else if ((metrics)[metric] == 'page_fans_online') {
1461354806445:for (hour in 1:length(hours)) {
1461354806447:typehold <- NA
1461354806449:typehold <- hold[hold$variable == hours[hour],]
1461354806454:pagedata <- cbind(NA,pagedata)
1461354806457:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461354806459:colnames(pagedata)[1] = paste("hour",hours[hour])
1461354806464:metrics <- c(metrics,hours[hour])
1461354806467:}
1461354806469:} else {
1461354806471:pagedata <- cbind(NA,pagedata)
1461354806474:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461354806477:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461354806482:}
1461354806486:cat("\n\n")
1461354806489:print(head(pagedata))
1461354806492:cat("\n")
1461354806498:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461354806501:break
1461354806504:} else {
1461354806507:}
1461354806519:pagedata.tempstore <- pagedata
1461354806522:#Page Metrics to remove because they have subtypes
1461354806524:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1461354806529:# Page Metrics to manually create
1461354806533:metrics <- c(metrics,"organic reach")
1461354806536:names(metrics)[length(metrics)] <- c("Organic Reach")
1461354806541:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1461354806543:colnames(pagedata)[1] = "organic reach"
1461354806550:# Final dataset formatting
1461354806553:pagedatastore <- pagedata
1461354806556:#pagedata <- pagedatastore
1461354806558:pagedata2 <- pagedata
1461354806563:# reorder and null NA's for excel
1461354806566:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1461354806569:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1461354806573:#pagedata2[is.na(pagedata2)] <- ""
1461354806575:#pagedata2[pagedata2 == 0] <- ""
1461354806580:# store final dataset
1461354806582:pagedata <- pagedata2
1461354806588:### Post Metrics #############################
1461354806590:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1461354806591:# Most are automated, and will continue to retry through errors until a value is found.
1461354806593:# Manual modifications are run after initial data acquisition.
1461354806598:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1461354806601:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1461354806607:# Populate sets with values from pull
1461354806614:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461354806618:page$datetime <- format.facebook.date(page$created_time)
1461354806621:page$month <- format(page$datetime, "%Y-%m")
1461354806624:page$day <- format(page$datetime, "%Y-%m-%d")
1461354806631:page$datetime <- as.Date(page$datetime)
1461354806633:#page$month <- as.Date(page$month)
1461354806636:page$day <- as.Date(page$day)
1461354806638:} else {
1461354806640:print("Date fields already exist for Post Data.")
1461354806642:}
1461354806647:postdata <- 0
1461354806655:postdata <- page[page$day > floor,]
1461354806659:postdata <- postdata[postdata$day < roof,]
1461354806665:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461354806675:# Name column for usability
1461354806677:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461354806684:rows <- nrow(postdata)
1461354806686:lpostmetrics <- postmetrics
1461354806695:testlength <- 2
1461354806700:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461354806708:for (pmetric in 1:length(postmetrics)) {
1461354806710:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461354806718:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461354806721:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461354806726:names(phold) <- c("id","name","period","title","description","value","variable")
1461354806729:} else {
1461354806733:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461354806735:names(phold) <- c("id","name","period","title","description","value")
1461354806738:}
1461354806751:for (post in 1:nrow(postdata)) {
1461354806756:period <- "lifetime"
1461354806764:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461354806769:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461354806772:print('Not a Facebook Video.')
1461354806774:phold <- rbind(phold, NA)
1461354806776:next()
1461354806780:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461354806783:} else {
1461354806786:}
1461354806794:postpull <- NULL
1461354806798:attempt <- 1
1461354806805:while( is.null(postpull) && attempt <= 100) {
1461354806808:attempt <- attempt + 1
1461354806812:try(
1461354806817:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461354806822:,silent=TRUE
1461354806827:)
1461354806831:if (attempt > 10) {
1461354806837:print('Too many attempts. Skipping.')
1461354806841:postpull <- NULL
1461354806847:break
1461354806852:} else {
1461354806856:}
1461354806870:colnames(phold) <- names(postpull)
1461354806874:phold <- rbind(phold, postpull)
1461354806878:}
1461354806883:pholdstore <- phold
1461354806892:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461354806897:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461354806906:phold <- phold[-1,]
1461354806916:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461354806926:postmetrics <- postmetrics[-pmetric]
1461354806930:pmetric <- pmetric + 1
1461354806939:for (ptype in (1:length(psubtypes))) {
1461354806943:ptyphehold <- NA
1461354806948:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461354806958:postdata <- cbind(NA,postdata)
1461354806963:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461354806977:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461354806982:postmetrics <- c(postmetrics,psubtypes[ptype])
1461354806986:}
1461354806999:} else {
1461354807004:postdata <- cbind(NA,postdata)
1461354807009:postdata[1:length(phold$value),1] <- phold$value
1461354807017:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461354807022:}
1461354807037:cat("\n\n")
1461354807043:print(head(postdata))
1461354807048:cat("\n")
1461354807054:}
1461354807067:postdatastore <- postdata
1461354807088:# Post Metrics to manually create
1461354807093:postmetrics <- c(postmetrics,"organic reach")
1461354807100:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1461354807113:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1461354807118:colnames(postdata)[1] = "organic reach"
1461354807130:# Final dataset formatting
1461354807137:#postdatastore <- postdata
1461354807142:#postdata <- postdatastore
1461354807151:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1461354807336:# reorder and null NA's for Excel
1461354807373:postdata2 <- postdata
1461354807405:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1461354807421:postdata2[is.na(postdata2)] <- ""
1461354807485:postdata2[postdata2 == 0] <- ""
1461354807543:# store final dataset
1461354807564:postdata <- as.data.frame(postdata2)
1461354807590:# Outputs -----------------------------------------------------------------
1461354807633:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461354807641:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461354807687:datafolder <- "Data"
1461354807700:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461354807711:# Rename columns for Excel readability
1461354807718:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461354807723:# output Page dataset as final csv
1461354807729:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461354807735:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461354807740:?wri
1461354807747:# Rename columns for Excel readability
1461354807764:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461354807776:# output Post dataset as final Excel
1461354807802:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461354807848:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461354807874:# Raw Data
1461354807887:# output dataset as raw csv
1461354807907:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461354807944:totalpagedata <- rbind(totalpagedata, pagedata)
1461354807960:totalpostdata <- rbind(totalpostdata, postdata)
1461354807984:}
1461355008837:y -----------------------------------------------------------------
1461355008840:# Todo --------------------------------------------------------------------
1461355008840:# - Run script for all major brands
1461355008841:# - Create 'participation rate' function
1461355008841:# - Incorporate Twitter
1461355008842:# Setup -------------------------------------------------------------------
1461355008842:# Load and install all necessary packages for the script
1461355008845:# Required Packages for dataframes, forecasting, graphical visualization, and development
1461355008846:# Use 'install.packages()' if unavailable.
1461355008849:#library(zoo)
1461355008850:#library(forecast)
1461355008850:library(ggplot2)
1461355008851:#library(scales)
1461355008852:library(devtools)
1461355008996:library(compare)
1461355009053:library(xlsx)
1461355012270:require(httr)
1461355012358:require(rjson)
1461355012613:require(RCurl)
1461355013176:# Pull most up to date Github repositories for relevant packages
1461355013176:# Not frequently updated; does not need to be run every time.
1461355013180:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461355013187:#install_github("pablobarbera/instaR/instaR")
1461355013187:# Required packags for plugging into Facebook API
1461355013194:#library(twitteR)
1461355013206:library(Rfacebook)
1461355013928:#library(instaR)
1461355013942:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1461355013943:# https://instagram.com/developer/authentication/?hl=en
1461355013953:setwd("~/")
1461355013957:getwd()
1461355013959:# Authorize with Facebook
1461355013960:#Using 'rFacebook' from Github
1461355013995:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461355018521:# Functions ---------------------------------------------------------------
1461355018522:# User Functions
1461355018523:# Function to convert Facebook date format to R date format
1461355018523:format.facebook.date <- function(datestring) {
1461355018524:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461355018524:}
1461355018525:# Shift a vector up by an amount
1461355018525:shift <- function(x, n){
1461355018528:c(x[-(seq(n))], rep(NA, n))
1461355018529:}
1461355018530:# Get gcd from vector
1461355018530:gcd <- function(x,y) {
1461355018533:r <- x%%y;
1461355018534:return(ifelse(r, gcd(y, r), y))
1461355018537:}
1461355018539:# Inputs ------------------------------------------------------------------
1461355018541:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1461355018542:# Define data range for data (2012 is out of bounds for some metrics)
1461355018542:posts <- 5000
1461355018545:roof = Sys.Date() #"2015-12-31"
1461355018546:floor = "2015-02-01" #"2015-05-01"
1461355018549:range = seq(as.Date(floor), as.Date(roof), by="days")
1461355024444:## Access ftoken
1461355024445:# Use token from Facebook Graph API
1461355024446:# token generated here: https://developers.facebook.com/tools/explorer
1461355024447:# Lasts two hours, and must be changed depending on page and permissions
1461355024447:ftokens <- c(
1461355024448:#Sledgehammer Wine
1461355024451:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461355024452:#Chateau Saint Jean
1461355024452:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461355024456:#19 Crimes
1461355024456:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461355024459:#Beringer Vneyards
1461355024459:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461355024460:#100% Canadian Milk
1461355024460:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461355024461:#Lait 100% Canadien
1461355024461:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461355024461:#Recharge with Milk
1461355024462:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461355024462:#Misc
1461355024462:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461355024463:#Baron
1461355024463:"CAACEdEose0cBAOzK81RWz8LOCCE77oAu3w1CBVjQJ0OlMn6H7XrWnpZCABb9zLMrE7rg1gr43wLZCAFLvt80g626f08f2mAlx1Xz498efviv8RP3KfTwbZCrYI3oHHhJvcXrZBJJPXkSztjjm4BMoZAeomlXJQys9ZCkKJ9U7BAklG8rOLYJsysZBAJ40lUh5AZD"
1461355024463:)
1461355024464:totalpagedata <- data.frame()
1461355024466:totalpostdata <- data.frame()
1461355028426:brand
1461355030327:ftokens
1461355037387:ftokens[brand]
1461355040057:ftoken <- ftokens[brand]
1461355040991:userid = "10153046308598756"
1461355041425:# Access public personal data; basically a ftoken test
1461355041707:me <- getUsers("me", token=ftoken)
1461355043242:print(me$name)
1461355043243:## Page Id
1461355043244:# Define which page will be used for the data collection. Change id's as necessary.
1461355043245:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461355043245:pageid = me$id
1461355046615:pageid
1461355051402:me$name
1461355055270:me <- getUsers("me", token=ftoken)
1461355056477:print(me$name)
1461355057424:## Page Id
1461355057659:# Define which page will be used for the data collection. Change id's as necessary.
1461355057869:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461355058070:pageid = me$id
1461355058260:# Acquisition -------------------------------------------------------------
1461355058444:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461355058654:page <- getPage(pageid, ftoken, n = posts)
1461355060298:page.store <- page
1461355062649:# Create new vectors in dataset with datetime, month, and day formattiong
1461355062649:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461355062652:page$datetime <- format.facebook.date(page$created_time)
1461355062652:page$month <- format(page$datetime, "%Y-%m")
1461355062655:page$day <- format(page$datetime, "%Y-%m-%d")
1461355062656:page$datetime <- as.Date(page$datetime)
1461355062656:#page$month <- as.Date(page$month)
1461355062660:page$day <- as.Date(page$day)
1461355062660:} else {
1461355062664:print("Date fields already exist.")
1461355062664:}
1461355071347:cessing --------------------------------------------------------------
1461355071347:# Process data to clean dataset and augment it with more data than default fields.
1461355071349:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1461355071350:## Cleaning =================================
1461355071350:# Page and Post Datasets
1461355071353:# Split dataset into two for pages and post data
1461355071354:# Create initial null sets
1461355071354:pagedata <- 0
1461355071355:postdata <- 0
1461355071356:## Appending =================================
1461355071359:### Page Metrics #############################
1461355071359:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461355071362:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461355071363:# Page Metrics to automatically pull
1461355071363:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461355071367:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461355071367:pagemetrics <- metrics
1461355071369:# Prep dataset by breaking into weeks
1461355071369:pagedata <- 0
1461355071370:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461355071374:colnames(pagedata) = c("pageid", "page", "date")
1461355071375:pagedata$page = page$from_name[1]
1461355071376:pagedata$pageid = page$from_id[1]
1461355071377:divisor = 5
1461355071380:remainder = length(range)%%divisor;
1461355071381:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461355073850:weeks <- (nrow(pagedata)/5)-2
1461355079145:for (metric in 1:length(metrics)) {
1461355079146:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461355079148:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461355079149:period = 'lifetime'
1461355079151:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461355079152:period = 'day'
1461355079155:tempfloor = "2014-02-01"
1461355079156:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461355079159:if (floor < tempfloor) {
1461355079160:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461355079162:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461355079163:weeks = tempweeks
1461355079167:} else {}
1461355079168:} else {
1461355079170:period = 'day'
1461355079171:weeks <- (nrow(pagedata)/5)-2
1461355079174:}
1461355079175:hold <- matrix(0, nrow=0, ncol=7)
1461355079178:for (week in 0:weeks) {
1461355079180:end <- pagedata$date[(week*5)+1]
1461355079182:start <- pagedata$date[((week+1)*5)+1]
1461355079184:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461355079186:pull <- NULL
1461355079187:attempt <- 1
1461355079190:while(is.null(pull) && attempt <= 10) {
1461355079191:attempt <- attempt + 1
1461355079193:try(
1461355079194:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461355079197:)
1461355079199:if (is.null(pull)) {
1461355079201:print("Empty Pull. Re-attempting.")
1461355079202:print(paste("Attempt", attempt))
1461355079203:} else {
1461355079204:pull$datetime <- format.facebook.date(pull$end_time)
1461355079205:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461355079218:pull$datetime <- as.Date(pull$datetime)
1461355079223:#page$month <- as.Date(page$month)
1461355079228:pull$day <- as.Date(pull$day)
1461355079234:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461355079238:print("Found Facebook data matching date range. Storing values.")
1461355079240:} else {
1461355079243:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461355079249:print(paste("Attempt", attempt))
1461355079250:pull <- NULL}
1461355079258:if (attempt > 100) {
1461355079263:print('Too many attempts. Skipping.')
1461355079269:pull <- NULL
1461355079271:break
1461355079274:} else {}
1461355079277:}
1461355079283:pulllength <- ncol(pull)
1461355079293:rpull = pull[rev(rownames(pull)),]
1461355079300:hold <- rbind(hold,rpull)
1461355079305:rawhold <- hold
1461355079313:}
1461355079357:rhold = hold[rev(rownames(hold)),]
1461355079359:rhold$value = shift(rhold$value, 1)
1461355079363:hold = rhold[rev(rownames(rhold)),]
1461355079366:hold$value[1] = rawhold$value[1]
1461355079371:hours <- seq(0,23)
1461355079376:names(hours) <- paste("Hour", hours)
1461355079380:subtypes <- c('link','comment', 'like')
1461355079388:names(subtypes) <- c('Shares','Comments', 'Likes')
1461355079395:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461355079401:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461355079408:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461355079459:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461355079462:for (type in 1:length(subtypes)) {
1461355079463:typehold <- NA
1461355079467:typehold <- hold[hold$variable == subtypes[type],]
1461355079473:pagedata <- cbind(NA,pagedata)
1461355079475:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461355079477:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461355079482:metrics <- c(metrics,subtypes[type])
1461355079505:}
1461355079509:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461355079513:for (demographic in 1:length(demographics)) {
1461355079516:print(names(demographics[demographic]))
1461355079520:typehold <- NA
1461355079521:typehold <- hold[hold$variable == demographics[demographic],]
1461355079524:typehold[typehold$value <= 10,] <- NA
1461355079528:pagedata <- cbind(NA,pagedata)
1461355079529:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461355079531:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461355079535:metrics <- c(metrics,demographics[demographic])
1461355079536:}
1461355079540:} else if ((metrics)[metric] == 'page_fans_online') {
1461355079544:for (hour in 1:length(hours)) {
1461355079547:typehold <- NA
1461355079549:typehold <- hold[hold$variable == hours[hour],]
1461355079553:pagedata <- cbind(NA,pagedata)
1461355079555:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461355079557:colnames(pagedata)[1] = paste("hour",hours[hour])
1461355079560:metrics <- c(metrics,hours[hour])
1461355079562:}
1461355079565:} else {
1461355079567:pagedata <- cbind(NA,pagedata)
1461355079569:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461355079571:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461355079578:}
1461355079583:cat("\n\n")
1461355079585:print(head(pagedata))
1461355079597:cat("\n")
1461355079602:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461355079605:break
1461355079611:} else {
1461355079614:}
1461607954517:## Facebook Ad API Scraper #####
1461607954518:## Mirum Agency ################
1461607954519:## By Vivek Menon ##############
1461607954522:## v.1.2.0 #####################
1461607954523:# Setup -------------------------------------------------------------------
1461607954523:#.Options - Check current factory options.
1461607954523:#options(stringsAsFactors = FALSE)
1461607954523:library(httr)
1461607954561:library(RJSONIO)
1461607954708:library(RCurl)
1461607954921:library(devtools)
1461607954982:library(xlsx)
1461607956190:# Install and use Rfacebook; deprecated for direct API call approach.
1461607956191:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461607956193:#library(Rfacebook)
1461607956193:#install.packages("Rfacebook")
1461607956194:#library(Rfacebook)
1461607956195:#Using 'rFacebook' from Github
1461607956195:#fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461607956196:#callAPI("https://graph.facebook.com/v2.5/act_693722000711682/adgroups?fields=name&limit=1000", fboauth)
1461607956196:# Functions ---------------------------------------------------------------
1461607956197:# User Functions
1461607956197:# Function to convert Facebook date format to R date format
1461607956197:format.facebook.date <- function(datestring) {
1461607956197:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461607956198:}
1461607956199:# Inputs ------------------------------------------------------------------
1461607956199:#Turn stringsAsFactors off so rbind works properly.
1461607956202:options(stringsAsFactors = FALSE)
1461607956203:# Find OAuth settings for facebook:
1461607956203:#http://developers.facebook.com/docs/authentication/server-side/
1461607956206:facebook <- oauth_endpoints("facebook")
1461607956208:#facebook <- oauth_endpoint(
1461607956208:#  authorize = "https://www.facebook.com/dialog/oauth",
1461607956211:#  access = "https://graph.facebook.com/oauth/access_token",
1461607956212:#  base = "https://localhost:1410")
1461607956215:# Register an application at https://developers.facebook.com/apps/
1461607956218:#Insert your values below - if secret is omitted, it will look it up in
1461607956219:#the FACEBOOK_CONSUMER_SECRET environmental variable.
1461607956224:app_name <- "r_access"
1461607956235:app_id <- "955460364539237"
1461607956241:app_secret <- "0a3e6943c90510dc158fc7683e560f7d"
1461607956258:scope = "ads_management,manage_pages,publish_actions"
1461607956259:## Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
1461607956259:full_url <- oauth_callback()
1461607956261:full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
1461607956265:message <- paste("Copy and paste into Site URL on Facebook App Settings:",
1461607956266:full_url, "\nWhen done, press any key to continue...")
1461607956272:## Reminder to add callback into the app page.
1461607956273:invisible(readline(message))
1461607956277:myapp <- oauth_app(app_name, app_id, app_secret)
1461607956278:## current httr version, to test which oauth protocol to use. [Required to set global port variables; won't work otherwise.]
1461607956279:if (packageVersion('httr') > "0.6.1"){
1461607956282:Sys.setenv("HTTR_SERVER_PORT" = "1410/")
1461607956282:fb_oauth <- oauth2.0_token(facebook, myapp,
1461607956282:scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
1461607956283:if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
1461607956283:message("Authentication successful.")
1461607956284:}
1461607959611:# Test 1: Facebook Profile Information
1461607959611:req <- GET("https://graph.facebook.com/v2.5/me?fields=id,name", config(token = fb_oauth))
1461607960157:stop_for_status(req)
1461607960157:str(content(req))
1461607960273:# Test 2: Ad Account Information
1461607960273:accountreq <- GET("https://graph.facebook.com/v2.5/act_693722000711682?fields=name", config(token = fb_oauth))
1461607960844:adaccountname <- content(accountreq)[1]$name
1461607960850:adaccountid <- content(accountreq)[2]$id
1461607960854:# Inputs ------------------------------------------------------------------
1461607960854:# /insights is the new /stats; gets ad data at the account and id level
1461607960856:# /keywordstats = interests in ad manager UI
1461607960857:## Variables
1461607960861:# Number of Ads to Pull
1461607960863:ads = 1000 #So far, only 167 in the account.
1461607960864:#try(
1461607960865:#  adreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=",")), config(token = fb_oauth))
1461607960867:#)
1461607960868:#stop_for_status(adreq)
1461607960868:#adcontent <- content(adreq)
1461607960868:#adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1461607960868:## Facebook:
1461607960869:#[1] All valid values are: date_start, date_stop, account_id, account_name, adgroup_id, adgroup_name, campaign_group_id, campaign_group_name, campaign_id, campaign_name, action_carousel_card_id, action_carousel_card_name, actions, unique_actions, total_actions, total_unique_actions, action_values, total_action_value, impressions, social_impressions, clicks, social_clicks, unique_impressions, unique_social_impressions, unique_clicks, unique_social_clicks, spend, frequency, social_spend, deeplink_clicks, app_store_clicks, website_clicks, call_to_action_clicks, newsfeed_avg_position, newsfeed_impressions, newsfeed_clicks, reach, social_reach, ctr, unique_ctr, cpc, cpm, cpp, cost_per_total_action, cost_per_action_type, cost_per_unique_click, cost_per_10_sec_video_view, relevance_score, website_ctr, video_avg_sec_watched_actions, video_avg_pct_watched_actions, video_p25_watched_actions, video_p50_watched_actions, video_p75_watched_actions, video_p95_watched_actions, video_p100_watched_actions, video_complete_watched_actions, video_10_sec_watched_actions, video_15_sec_watched_actions, video_30_sec_watched_actions"
1461607960869:# Processing --------------------------------------------------------------
1461607960869:### Intial Batch Ad Pull
1461607960870:# Dataframe and query result holder
1461607960870:initialcontent <- NULL
1461607960870:after <- NULL
1461607960871:# Pull all ad ids and names, batch mode
1461607960872:#initialreq <- GET(paste0("https://graph.facebook.com/v2.5/act_693722000711682/adcampaigns?fields=name&limit=",ads), config(token = fb_oauth))
1461607960872:initialreq <- 400
1461607960872:count <- 0
1461607960877:while (warn_for_status(initialreq) != TRUE) {
1461607960877:count <- count + 1
1461607960880:print(paste('Query Attempt', count))
1461607960881:initialreq <- GET(paste0("https://graph.facebook.com/v2.5/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
1461607960884:}
1461607961695:initialreq <- GET(paste0("https://graph.facebook.com/v2.5/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
1461607962343:str(content(initialreq))
1461607962617:initialcontent <- content(initialreq)
1461607962624:# List of 154; don't need to paginate yet
1461607962624:#after <- initialcontent$paging$cursors$after
1461607962629:## Loop 1, Organize all ads into dataset
1461607962629:print(paste("Pulling All Ad Campaigns for",paste0(adaccountname,".")))
1461607962633:adlist <- data.frame(NULL, stringsAsFactors = FALSE)
1461607962635:ad <- 0
1461607962637:for (ad in (1:(length(initialcontent$data)))) {
1461607962637:#print(i)
1461607962640:adlist[ad,c("ad.campaign.id")] <- initialcontent$data[[ad]]$id
1461607962641:adlist[ad,c("ad.campaign.name")] <- initialcontent$data[[ad]]$name
1461607962644:adlist[ad,c("objective")] <- initialcontent$data[[ad]]$objective
1461607962645:#adlist[ad,c("status")] <- initialcontent$data[[ad]]$campaign_group_status
1461607962648:adlist[ad,c("created.time")] <- substr(initialcontent$data[[ad]]$created_time, 1, 10)
1461607962649:#adlist[ad,c("campaign id")] <- initialcontent$data[[ad]]$campaign_id
1461607962652:#adlist[ad,c("campaign name")] <- initialcontent$data[[ad]]$campaign_name
1461607962653:# Use this loop to populate with admetrics, and augment initial dataset; will not affect following loops.
1461607962656:completion <- (ad/(length(initialcontent$data))*100)
1461607962657:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1461607962659:}
1461607962803:adlist_store <- adlist
1461607962804:# slice list
1461607962805:adlist <- adlist[adlist$created.time > "2016-02-29",]
1461607962807:adlist_sliced <- adlist
1461607962812:# Metrics to examine
1461607962813:admetrics <- c("frequency,newsfeed_avg_position,ctr,unique_ctr,spend,reach,social_reach,unique_clicks,social_clicks,cost_per_unique_click,total_actions,cost_per_total_action,actions,video_avg_pct_watched_actions,video_avg_sec_watched_actions") #"cost_per_action_type"
1461607962814:# Test Pull for Loop 2
1461607962815:#testreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[89,1],"/insights?fields=",paste(admetrics,collapse=",")), config(token = fb_oauth))
1461607962818:#warn_for_status(testreq)
1461607962818:#content(testreq)
1461607962819:# Metrics framed
1461607962819:overalladmetricsreturned <- c("date_start","date_stop","spend","reach","social_reach","frequency","page_engagement","post_engagement","unique_clicks","social_clicks","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view","video_avg_sec_watched_video_view","video_avg_sec_watched_page_engagement","video_avg_sec_watched_post_engagement","video_avg_pct_watched_video_view","video_avg_pct_watched_page_engagement","video_avg_pct_watched_post_engagement")
1461607962820:adoveralldata <- data.frame(stringsAsFactors = FALSE)
1461607962821:#number of columns = length(c(names(header),overalladmetricsreturned))
1461607962823:#adstart <- ad
1461607962824:#600 calls / 600 seconds rate limit
1461607962825:### Warning: Massive while loop that continues until the ad list is retrieved from Facebook Need to restart/interrupt R to stop the loop.
1461607962826:#nrow(adlist))
1461607962828:for (ad in 1:nrow(adlist)) {
1461607962832:print(paste0('Querying Ad ',ad,": ", adlist$ad.campaign.name[ad]))
1461607962832:adreq$status_code <- 400
1461607962836:count <- 0
1461607962839:while(adreq$status_code == 400) {
1461607962839:try(adreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&time_increment=1"), config(token = fb_oauth)))
1461607962840:count <- count + 1
1461607962844:#print(paste('Attempt', count))
1461607962847:}
1461607962848:print('Query successful.')
1461607962851:#print(content(adreq))
1461607962852:# Organize/clean data
1461607962854:adcontent <- content(adreq)
1461607962855:adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1461607962858:nextpage <- adcontent$paging$`next`
1461607962859:while (is.null(nextpage) == FALSE) {
1461607962863:#print("Additional Days")
1461607962865:adreq.additional <- GET(adcontent$paging$`next`, config(token = fb_oauth))
1461607962866:adcontent.additional <- content(adreq.additional)
1461607962867:adcontent.additional.parsed <- unlist(adcontent.additional, use.names=TRUE, recursive=TRUE)
1461607962870:adcontentparsed <- c(adcontentparsed,adcontent.additional.parsed)
1461607962871:nextpage <- adcontent.additional$paging$`next`
1461607962874:}
1461607962875:#adcontent2 <- unlist(adcontent$data, use.names=FALSE, recursive=TRUE)
1461607962877:adcontentparsed.store <- adcontentparsed
1461607962878:#adcontentparsed <- adcontentparsed.store
1461607962880:names(adcontentparsed)[(names(adcontentparsed) == ("actions.value"))] <- adcontentparsed[(names(adcontentparsed) == ("actions.action_type"))]
1461607962881:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("actions.action_type")))]
1461607962885:if (length(which(names(adcontentparsed) %in% c("video_avg_pct_watched_actions.action_type","video_avg_sec_watched_actions.action_type"))) > 1) {
1461607962886:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_sec_watched_actions.value"))] <- paste0("video_avg_sec_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1461607962888:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_pct_watched_actions.value"))] <- paste0("video_avg_pct_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1461607962889:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("video_avg_pct_watched_actions.action_type")))]
1461607962894:} else {}
1461607962897:# Frame data for inclusion
1461607962899:days = length((adcontentparsed[overalladmetricsreturned[1] == names(adcontentparsed)]))
1461607962901:header <- c(adlist[ad,c("ad.campaign.id","ad.campaign.name","objective","created.time")])
1461607962903:footer <- data.frame()
1461607962906:if (is.null(adcontentparsed)==TRUE) {
1461607962907:footer <- rep(0,length(overalladmetricsreturned))
1461607962909:names(footer) <- overalladmetricsreturned
1461607962910:adoverallset <- c(unlist(header),footer)
1461607962913:} else {
1461607962915:for (day in 1:days) {
1461607962917:for (metric in 1:length(overalladmetricsreturned)) {
1461607962920:if (is.na(adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]) == TRUE) {
1461607962921:footer[day,metric] <- 0
1461607962924:} else {
1461607962925:footer[day,metric] <- adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]
1461607962928:}
1461607962934:colnames(footer) <- overalladmetricsreturned
1461607962936:adoverallset <- cbind(header,footer)
1461607962938:}
1461607962942:adoveralldata <- rbind(adoveralldata,adoverallset)
1461607962946:colnames(adoveralldata) <- c(names(header),overalladmetricsreturned)
1461607962950:# Print processing stats
1461607962951:completion <- (ad/(nrow(adlist))*100)
1461607962954:#print(ad)
1461607962955:#print(nrow(adoveralldata))
1461607962958:#print(paste0("Finding Facebook Data for Ad Set ",ad,": ",adlist[ad,2]))
1461607962959:print(paste0('Primary dataset appended: ',nrow(adoveralldata),' rows retrieved from Facebook.'))
1461607962961:print(paste(paste0(round(completion, digits = 0),"%"), "of Ads Processed."))
1461607962966:}
1461607982331:#names(adoveralldata) <- overalladmetricsreturned
1461607982332:print(adoveralldata)
1461607982427:# Exporting ---------------------------------------------------------------
1461607982427:adoveralldatastore <- adoveralldata
1461607982428:#adoveralldata <- adoveralldatastore
1461607982428:adoveralldata[is.na(adoveralldata)] <- ""
1461607982430:#adoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)
1461607982430:#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461607982433:#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461607982433:setwd("/Users/vivek.menon")
1461607982433:datafolder <- "Data"
1461607982434:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461607982435:# Rename columns for Excel readability
1461607982435:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461607982435:# output Page dataset as final csv
1461607982436:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461607982436:#write.xlsx(adoveralldata, paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461607982436:write.csv(adoveralldata, file = paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".csv"), row.names=FALSE)
1461607982444:#####
1461607982445:## Ad Hourly Vector Frame
1461607982445:admetricsreturned <- c("campaign_id","campaign_name","date_start","date_stop","hourly_stats_aggregated_by_advertiser_time_zone","spend","reach","social_reach","frequency","page_engagement","post_engagement","clicks","social_clicks","ctr","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view")
1461607982447:adhourdata <- data.frame(NULL,stringsAsFactors=FALSE)
1461607982448:### Hourly Ad Metrics
1461607982448:## Loop 2: Hourly Ad Pull (Based on Loop 1)
1461607982452:for (ad in 1:nrow(adlist)) {
1461607982452:adhourreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=hourly_stats_aggregated_by_advertiser_time_zone"), config(token = fb_oauth))
1461607982453:adhourlydata <- content(adhourreq)
1461607982453:adhourlycontent <- unlist(adhourlydata$data, use.names=TRUE, recursive=TRUE)
1461607982454:completion <- (ad/(nrow(adlist))*100)
1461607982455:print(paste('Finding Facebook Ad Data for',adlist[ad,2]))
1461607982455:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1461607982456:if (length(adhourlycontent) > 0) {
1461607982457:names(adhourlycontent)[(names(adhourlycontent) == ("actions.value"))] <- adhourlycontent[(names(adhourlycontent) == ("actions.action_type"))]
1461607982457:adhourlycontent <- adhourlycontent[-which((names(adhourlycontent) == ("actions.action_type")))]
1461607982458:hours <- adhourlycontent[names(adhourlycontent) == "hourly_stats_aggregated_by_advertiser_time_zone"]
1461607982459:adhourlysetdata <- data.frame(NULL, stringsAsFactors = FALSE)
1461607982460:for (hour in 1:length(hours)){
1461607982460:if (hour <= 1) {
1461607982461:startindex = 1
1461607982462:endindex = which(adhourlycontent == hours[(hour)])
1461607982463:} else {
1461607982464:startindex = which(adhourlycontent == hours[(hour-1)])+1
1461607982465:endindex = which(adhourlycontent == hours[(hour)])
1461607982466:}
1461607982467:#print(paste("Set", hour))
1461607982468:#print(length(adhourlycontent[startindex:endindex]))
1461607982471:#print(adhourlycontent[startindex:endindex])
1461607982472:adhourlyset <- adhourlycontent[startindex:endindex]
1461607982473:adhourlyrow <- adhourlyset[match(admetricsreturned,names(adhourlyset))]
1461607982474:adhourlysetdata <- rbind(adhourlyrow,adhourlysetdata)
1461607982476:#print(adhourlyrow)
1461607982477:}
1461607982480:names(adhourlysetdata) <- admetricsreturned
1461607982481:#print(tail(adhourlysetdata))
1461607982482:adhourdata <- rbind(adhourlysetdata,adhourdata)
1461607982484:names(adhourdata) <- admetricsreturned
1461607982485:} else {
1461607982485:#next()
1461607982486:}
1461608001451:adstart <- ad
1461608001451:#Hourly Admetrics
1461608001453:for (ad in 1:nrow(adlist)) {
1461608001453:adhourreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=hourly_stats_aggregated_by_advertiser_time_zone"), config(token = fb_oauth))
1461608001453:adhourlydata <- content(adhourreq)
1461608001453:adhourlycontent <- unlist(adhourlydata$data, use.names=TRUE, recursive=TRUE)
1461608001454:if (length(adhourlycontent) > 0) {
1461608001454:names(adhourlycontent)[(names(adhourlycontent) == ("actions.value"))] <- adhourlycontent[(names(adhourlycontent) == ("actions.action_type"))]
1461608001458:adhourlycontent <- adhourlycontent[-which((names(adhourlycontent) == ("actions.action_type")))]
1461608001458:hours <- adhourlycontent[names(adhourlycontent) == "hourly_stats_aggregated_by_advertiser_time_zone"]
1461608001459:adhourlysetdata <- data.frame(NULL, stringsAsFactors = FALSE)
1461608001463:for (hour in 1:length(hours)){
1461608001464:if (hour <= 1) {
1461608001467:startindex = 1
1461608001467:endindex = which(adhourlycontent == hours[(hour)])
1461608001470:} else {
1461608001471:startindex = which(adhourlycontent == hours[(hour-1)])+1
1461608001474:endindex = which(adhourlycontent == hours[(hour)])
1461608001475:}
1461608001478:#print(paste("Set", hour))
1461608001479:#print(length(adhourlycontent[startindex:endindex]))
1461608001482:#print(adhourlycontent[startindex:endindex])
1461608001484:adhourlyset <- adhourlycontent[startindex:endindex]
1461608001484:adhourlyrow <- adhourlyset[match(admetricsreturned,names(adhourlyset))]
1461608001485:adhourlysetdata <- rbind(adhourlyrow,adhourlysetdata)
1461608001487:#print(adhourlyrow)
1461608001489:}
1461608001492:names(adhourlysetdata) <- admetricsreturned
1461608001493:#print(tail(adhourlysetdata))
1461608001496:adhourdata <- rbind(adhourlysetdata,adhourdata)
1461608001498:names(adhourdata) <- admetricsreturned
1461608001499:} else {
1461608001500:next()
1461608001503:}
1461608016926:### Segmented Ad Metrics
1461608016926:## Loop 3: Segmented Ad Pull (Based on Loop 1)
1461608016928:ad <-  0
1461608016930:admetricsreturned <- c("campaign_id","campaign_name","date_start","date_stop","gender","age","spend","reach","social_reach","frequency","page_engagement","post_engagement","clicks","social_clicks","ctr","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view")
1461608016931:### PICK UP FROM HERE; THIS LOOP ONLY GETS TO 5% ###
1461608016934:adsegmentsetdata <- data.frame(NULL,stringsAsFactors=FALSE)
1461608016934:for (ad in 1:nrow(adlist)) {
1461608016937:adsegmentreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=age,gender"), config(token = fb_oauth))
1461608016937:adsegmentdata <- content(adsegmentreq)
1461608016938:adsegmentcontent <- unlist(adsegmentdata$data, use.names=TRUE, recursive=TRUE)
1461608016941:completion <- (ad/(length(initialcontent$data))*100)
1461608016942:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1461608016945:if (length(adsegmentcontent) > 0) {
1461608016946:names(adsegmentcontent)[(names(adsegmentcontent) == ("actions.value"))] <- adsegmentcontent[(names(adsegmentcontent) == ("actions.action_type"))]
1461608016949:adsegmentcontent <- adsegmentcontent[-which((names(adsegmentcontent) == ("actions.action_type")))]
1461608016951:ages <- unique(adsegmentcontent[names(adsegmentcontent) == "age"])
1461608016954:genders <- unique(adsegmentcontent[names(adsegmentcontent) == "gender"])
1461608016956:adsegmentsetdata <- data.frame(NULL, stringsAsFactors = FALSE)
1461608016958:for (age in 1:length(ages)) {
1461608016960:if (age <= 1) {
1461608016961:startindex = 1
1461608016961:endindex = which(adsegmentcontent == ages[(age)])[3]+1
1461608016964:} else {
1461608016966:startindex = which(adsegmentcontent == ages[(age-1)])[3]+1
1461608016969:endindex = which(adsegmentcontent == ages[(age)])[3]+1
1461608016970:}
1461608016976:adsegmentset <- adsegmentcontent[startindex:endindex]
1461608016982:for (gender in 1:length(genders)) {
1461608016990:if (gender <= 1) {
1461608016993:startgenderindex = 1
1461608016994:endgenderindex = which(adsegmentset == genders[(gender)])
1461608016997:} else {
1461608016998:startgenderindex = which(adsegmentset == genders[(gender-1)])+1
1461608017000:endgenderindex = which(adsegmentset == genders[(gender)])
1461608017001:}
1461608017006:adsegmentrow <- adsegmentset[match(admetricsreturned,names(adsegmentset))]
1461608017007:adsegmentsetdata <- rbind(adsegmentrow,adsegmentsetdata)
1461608017009:}
1461608017011:} else {
1461608017013:next()
1461608017014:}
1461608031041:names(adsegmentdata) <- admetricsreturned
1461608031042:# Placement and Device
1461608031043:adplacereq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=placement,impression_device"), config(token = fb_oauth))
1461608031567:# Age and Gender
1461608031567:adreq2 <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=age,gender"), config(token = fb_oauth))
1461608032098:adcontent <- content(adreq)
1461608032104:adcontent1 <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1461608032105:# Clean out the NA's
1461608032106:# Exporting ---------------------------------------------------------------
1461608032107:adoveralldata[is.na(adoveralldata)] <- ""
1461608032111:adoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)
1461608032118:#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461608032118:#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461608032123:setwd("/Users/vivek.menon")
1461608032124:datafolder <- "Data"
1461608032126:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461608032127:# Rename columns for Excel readability
1461608032127:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461608032128:# output Page dataset as final csv
1461608032128:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461608032129:write.xlsx(adoveralldata, paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461608035228:# Rename columns for Excel readability
1461608035229:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461608035230:# output Post dataset as final Excel
1461608035231:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461940862206:## Facebook Ad API Scraper #####
1461940862208:## Mirum Agency ################
1461940862209:## By Vivek Menon ##############
1461940862211:## v.1.2.0 #####################
1461940862211:# Setup -------------------------------------------------------------------
1461940862212:#.Options - Check current factory options.
1461940862212:#options(stringsAsFactors = FALSE)
1461940862215:library(httr)
1461940862255:library(RJSONIO)
1461940862319:library(RCurl)
1461940862534:library(devtools)
1461940862593:library(xlsx)
1461940863674:# Install and use Rfacebook; deprecated for direct API call approach.
1461940863674:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461940863676:#library(Rfacebook)
1461940863678:#install.packages("Rfacebook")
1461940863678:#library(Rfacebook)
1461940863680:#Using 'rFacebook' from Github
1461940863681:#fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461940863685:#callAPI("https://graph.facebook.com/v2.5/act_693722000711682/adgroups?fields=name&limit=1000", fboauth)
1461940863691:# Functions ---------------------------------------------------------------
1461940863692:# User Functions
1461940863694:# Function to convert Facebook date format to R date format
1461940863702:format.facebook.date <- function(datestring) {
1461940863703:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461940863712:}
1461940863713:# Inputs ------------------------------------------------------------------
1461940863714:#Turn stringsAsFactors off so rbind works properly.
1461940863722:options(stringsAsFactors = FALSE)
1461940863723:# Find OAuth settings for facebook:
1461940863725:#http://developers.facebook.com/docs/authentication/server-side/
1461940863725:facebook <- oauth_endpoints("facebook")
1461940863729:#facebook <- oauth_endpoint(
1461940863729:#  authorize = "https://www.facebook.com/dialog/oauth",
1461940863732:#  access = "https://graph.facebook.com/oauth/access_token",
1461940863733:#  base = "https://localhost:1410")
1461940863733:# Register an application at https://developers.facebook.com/apps/
1461940863736:#Insert your values below - if secret is omitted, it will look it up in
1461940863737:#the FACEBOOK_CONSUMER_SECRET environmental variable.
1461940863738:app_name <- "r_access"
1461940863738:app_id <- "955460364539237"
1461940863742:app_secret <- "0a3e6943c90510dc158fc7683e560f7d"
1461940863743:scope = "ads_management,manage_pages,publish_actions"
1461940863746:## Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
1461940863747:full_url <- oauth_callback()
1461940863749:full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
1461940863749:message <- paste("Copy and paste into Site URL on Facebook App Settings:",
1461940863753:full_url, "\nWhen done, press any key to continue...")
1461940863753:## Reminder to add callback into the app page.
1461940863753:invisible(readline(message))
1461940863760:myapp <- oauth_app(app_name, app_id, app_secret)
1461940863761:## current httr version, to test which oauth protocol to use. [Required to set global port variables; won't work otherwise.]
1461940863761:if (packageVersion('httr') > "0.6.1"){
1461940863762:Sys.setenv("HTTR_SERVER_PORT" = "1410/")
1461940863763:fb_oauth <- oauth2.0_token(facebook, myapp,
1461940863763:scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
1461940863763:if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
1461940863763:message("Authentication successful.")
1461940863764:}
1461940894249:#devtools::install_github("pablobarbera/instaR/instaR")
1461940894250:#install_github("pablobarbera/instaR/instaR")
1461940894251:#update.packages("instaR")
1461940894252:library("instaR")
1461940894370:setwd("~/")
1461940894371:my_oauth <- instaOAuth(app_id="5933291741634bb29d46b067f8457c50", app_secret="73f4a7f7c78b4fa7b2aeb0a5e7d19dae")
1461940896867:# User Functions
1461940896867:# Function to convert Facebook date format to R date format
1461940896869:format.facebook.date <- function(datestring) {
1461940896869:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461940896870:}
1461940896870:#folder <- "19c"
1461940896871:#df <- searchInstagram(tag="womenchampions", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1461940896871:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1461940896871:#floor = "2015-12-31" #"2015-05-01"
1461940896871:#df <- df[df$created_time > floor,]
1461940896872:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1461940896872:#"19crimeswine", "19crimeswine,
1461940896872:accounts <- c("thebaronsamedi")
1461940896873:roof =  Sys.Date()+1
1461940896873:floor = "2015-03-01"
1461940896874:for (account in 1:length(accounts)) {
1461940896875:posts <- getUserMedia(accounts[account],token=my_oauth, n=500)#,n = 1)#, n=200, verbose = TRUE)
1461940896875:#user <- getUser(accounts[account], token=my_oauth)
1461940896878:#df <- getFollowers('womenchampions', token=my_oauth)
1461940896879:df <- posts
1461940896883:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1461940896884:df$datetime <- format.facebook.date(df$created_time)
1461940896886:df$month <- format(df$datetime, "%Y-%m")
1461940896887:df$day <- format(df$datetime, "%Y-%m-%d")
1461940896890:} else {
1461940896891:print("Date fields already exist.")
1461940896894:}
1461940896894:#roof = "2015-11-02"
1461940896897:#floor = "2013-01-01"
1461940896898:#df <- df[df$day > floor,]
1461940896901:#df <- df[df$day < roof,]
1461940896903:#posts <- posts[posts$created_time > floor,]
1461940896905:#posts <- posts[posts$created_time < roof,]
1461940896906:#posts <- df
1461940896909:follows <- NULL
1461940896910:impressions <- NULL
1461940896913:impressionusers <- NULL
1461940896913:count <- 0
1461940896916:jump <- 1 # Loop paramater
1461940896917:weight <- 0.1 # 10%
1461940896920:for (post in 1:nrow(df)) {
1461940896921:try(impressionusers <- c(
1461940896924:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1461940896925:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1461940896928:)
1461940896928:,silent = TRUE)
1461940896932:impression <- 0
1461940896935:if (is.null(impressionusers) == TRUE){
1461940896936:impressions[post] <- 0
1461940896939:} else {
1461940896939:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1461940896944:for (user in 1:length(impressionusers)){
1461940896945:#print(user)
1461940896947:#print(impression)
1461940896947:userdata <- NULL
1461940896948:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1461940896950:if (is.null(userdata)) {
1461940896950:newimpression <- 0
1461940896951:impression <- as.numeric(newimpression) + as.numeric(impression)
1461940896951:next
1461940896953:} else {
1461940896954:newimpression <- + userdata$follows + userdata$followed_by
1461940896955:impression <- as.numeric(impression) + as.numeric(newimpression)
1461940896957:}
1461940896959:# Scale down to simulate organic
1461940896962:impression = ceiling(weight * impression)
1461940896966:impressions[post] <- impression
1461940896967:}
1461940896969:print(impressions[post])
1461940896971:count = count + 1
1461940896973:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1461940896974:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1461940896977:}
1461940896979:impressions.store <- impressions
1461940896981:#impressions <- round(impressions/5,0)
1461940896982:df <- cbind(df, impressions)
1461940896985:df.store <- df
1461940896988:df[is.na(df)] <- ""
1461940896990:name <- paste(df$user_fullname[1],"Instagram", Sys.Date())
1461940896992:datafolder <- "/Data"
1461940896994:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461940896996:write.csv(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".csv")))#, row.names=FALSE)
1461940896998:}
1461941135876:#write.xlsx(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".xlsx")), row.names=FALSE)
1461941239446:## Facebook Ad API Scraper #####
1461941239447:## Mirum Agency ################
1461941239449:## By Vivek Menon ##############
1461941239449:## v.1.2.0 #####################
1461941239449:# Setup -------------------------------------------------------------------
1461941239449:#.Options - Check current factory options.
1461941239450:#options(stringsAsFactors = FALSE)
1461941239450:library(httr)
1461941239450:library(RJSONIO)
1461941239451:library(RCurl)
1461941239451:library(devtools)
1461941239451:library(xlsx)
1461941239452:# Install and use Rfacebook; deprecated for direct API call approach.
1461941239452:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461941239452:#library(Rfacebook)
1461941239452:#install.packages("Rfacebook")
1461941239453:#library(Rfacebook)
1461941239453:#Using 'rFacebook' from Github
1461941239453:#fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461941239453:#callAPI("https://graph.facebook.com/v2.5/act_693722000711682/adgroups?fields=name&limit=1000", fboauth)
1461941239454:# Functions ---------------------------------------------------------------
1461941239454:# User Functions
1461941239458:# Function to convert Facebook date format to R date format
1461941239458:format.facebook.date <- function(datestring) {
1461941239459:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461941239459:}
1461941239460:# Inputs ------------------------------------------------------------------
1461941239461:#Turn stringsAsFactors off so rbind works properly.
1461941239464:options(stringsAsFactors = FALSE)
1461941239465:# Find OAuth settings for facebook:
1461941239465:#http://developers.facebook.com/docs/authentication/server-side/
1461941239468:facebook <- oauth_endpoints("facebook")
1461941239469:#facebook <- oauth_endpoint(
1461941239469:#  authorize = "https://www.facebook.com/dialog/oauth",
1461941239473:#  access = "https://graph.facebook.com/oauth/access_token",
1461941239473:#  base = "https://localhost:1410")
1461941239477:# Register an application at https://developers.facebook.com/apps/
1461941239480:#Insert your values below - if secret is omitted, it will look it up in
1461941239480:#the FACEBOOK_CONSUMER_SECRET environmental variable.
1461941239484:app_name <- "r_access"
1461941239484:app_id <- "955460364539237"
1461941239488:app_secret <- "0a3e6943c90510dc158fc7683e560f7d"
1461941239491:scope = "ads_management,manage_pages,publish_actions"
1461941239492:## Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
1461941239495:full_url <- oauth_callback()
1461941239496:full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
1461941239496:message <- paste("Copy and paste into Site URL on Facebook App Settings:",
1461941239499:full_url, "\nWhen done, press any key to continue...")
1461941239500:## Reminder to add callback into the app page.
1461941239500:invisible(readline(message))
1461941239501:myapp <- oauth_app(app_name, app_id, app_secret)
1461941239502:## current httr version, to test which oauth protocol to use. [Required to set global port variables; won't work otherwise.]
1461941239504:if (packageVersion('httr') > "0.6.1"){
1461941239505:Sys.setenv("HTTR_SERVER_PORT" = "1410/")
1461941239508:fb_oauth <- oauth2.0_token(facebook, myapp,
1461941239508:scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
1461941239509:if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
1461941239509:message("Authentication successful.")
1461941239510:}
1461941242629:# Test 1: Facebook Profile Information
1461941242630:req <- GET("https://graph.facebook.com/v2.5/me?fields=id,name", config(token = fb_oauth))
1461941243177:stop_for_status(req)
1461941243178:str(content(req))
1461941243189:# Test 2: Ad Account Information
1461941243190:accountreq <- GET("https://graph.facebook.com/v2.5/act_693722000711682?fields=name", config(token = fb_oauth))
1461941243760:adaccountname <- content(accountreq)[1]$name
1461941243763:adaccountid <- content(accountreq)[2]$id
1461941243767:# Inputs ------------------------------------------------------------------
1461941243767:# /insights is the new /stats; gets ad data at the account and id level
1461941243769:# /keywordstats = interests in ad manager UI
1461941243770:## Variables
1461941243773:# Number of Ads to Pull
1461941243773:ads = 1000 #So far, only 167 in the account.
1461941243774:#try(
1461941243774:#  adreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=",")), config(token = fb_oauth))
1461941243778:#)
1461941243778:#stop_for_status(adreq)
1461941243781:#adcontent <- content(adreq)
1461941243783:#adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1461941243785:## Facebook:
1461941243785:#[1] All valid values are: date_start, date_stop, account_id, account_name, adgroup_id, adgroup_name, campaign_group_id, campaign_group_name, campaign_id, campaign_name, action_carousel_card_id, action_carousel_card_name, actions, unique_actions, total_actions, total_unique_actions, action_values, total_action_value, impressions, social_impressions, clicks, social_clicks, unique_impressions, unique_social_impressions, unique_clicks, unique_social_clicks, spend, frequency, social_spend, deeplink_clicks, app_store_clicks, website_clicks, call_to_action_clicks, newsfeed_avg_position, newsfeed_impressions, newsfeed_clicks, reach, social_reach, ctr, unique_ctr, cpc, cpm, cpp, cost_per_total_action, cost_per_action_type, cost_per_unique_click, cost_per_10_sec_video_view, relevance_score, website_ctr, video_avg_sec_watched_actions, video_avg_pct_watched_actions, video_p25_watched_actions, video_p50_watched_actions, video_p75_watched_actions, video_p95_watched_actions, video_p100_watched_actions, video_complete_watched_actions, video_10_sec_watched_actions, video_15_sec_watched_actions, video_30_sec_watched_actions"
1461941243788:# Processing --------------------------------------------------------------
1461941243789:### Intial Batch Ad Pull
1461941243792:# Dataframe and query result holder
1461941243793:initialcontent <- NULL
1461941243793:after <- NULL
1461941243794:# Pull all ad ids and names, batch mode
1461941243794:#initialreq <- GET(paste0("https://graph.facebook.com/v2.5/act_693722000711682/adcampaigns?fields=name&limit=",ads), config(token = fb_oauth))
1461941243797:initialreq <- 400
1461941243798:count <- 0
1461941243801:while (warn_for_status(initialreq) != TRUE) {
1461941243802:count <- count + 1
1461941243805:print(paste('Query Attempt', count))
1461941243805:initialreq <- GET(paste0("https://graph.facebook.com/v2.5/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
1461941243805:}
1461941244503:initialreq <- GET(paste0("https://graph.facebook.com/v2.5/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
1461941245212:str(content(initialreq))
1461941245536:initialcontent <- content(initialreq)
1461941245542:# List of 154; don't need to paginate yet
1461941245543:#after <- initialcontent$paging$cursors$after
1461941245545:## Loop 1, Organize all ads into dataset
1461941245545:print(paste("Pulling All Ad Campaigns for",paste0(adaccountname,".")))
1461941245549:adlist <- data.frame(NULL, stringsAsFactors = FALSE)
1461941245550:ad <- 0
1461941245552:for (ad in (1:(length(initialcontent$data)))) {
1461941245553:#print(i)
1461941245556:adlist[ad,c("ad.campaign.id")] <- initialcontent$data[[ad]]$id
1461941245557:adlist[ad,c("ad.campaign.name")] <- initialcontent$data[[ad]]$name
1461941245563:adlist[ad,c("objective")] <- initialcontent$data[[ad]]$objective
1461941245564:#adlist[ad,c("status")] <- initialcontent$data[[ad]]$campaign_group_status
1461941245565:adlist[ad,c("created.time")] <- substr(initialcontent$data[[ad]]$created_time, 1, 10)
1461941245569:#adlist[ad,c("campaign id")] <- initialcontent$data[[ad]]$campaign_id
1461941245570:#adlist[ad,c("campaign name")] <- initialcontent$data[[ad]]$campaign_name
1461941245573:# Use this loop to populate with admetrics, and augment initial dataset; will not affect following loops.
1461941245574:completion <- (ad/(length(initialcontent$data))*100)
1461941245578:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1461941245580:}
1461941245690:adlist_store <- adlist
1461941245690:# slice list
1461941245694:adlist <- adlist[adlist$created.time > "2016-02-29",]
1461941245696:adlist_sliced <- adlist
1461941245697:# Metrics to examine
1461941245697:admetrics <- c("frequency,newsfeed_avg_position,ctr,unique_ctr,spend,reach,social_reach,unique_clicks,social_clicks,cost_per_unique_click,total_actions,cost_per_total_action,actions,video_avg_pct_watched_actions,video_avg_sec_watched_actions") #"cost_per_action_type"
1461941245697:# Test Pull for Loop 2
1461941245697:#testreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[89,1],"/insights?fields=",paste(admetrics,collapse=",")), config(token = fb_oauth))
1461941245698:#warn_for_status(testreq)
1461941245698:#content(testreq)
1461941245698:# Metrics framed
1461941245698:overalladmetricsreturned <- c("date_start","date_stop","spend","reach","social_reach","frequency","page_engagement","post_engagement","unique_clicks","social_clicks","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view","video_avg_sec_watched_video_view","video_avg_sec_watched_page_engagement","video_avg_sec_watched_post_engagement","video_avg_pct_watched_video_view","video_avg_pct_watched_page_engagement","video_avg_pct_watched_post_engagement")
1461941245699:adoveralldata <- data.frame(stringsAsFactors = FALSE)
1461941245699:#number of columns = length(c(names(header),overalladmetricsreturned))
1461941245702:#adstart <- ad
1461941245703:#600 calls / 600 seconds rate limit
1461941245703:### Warning: Massive while loop that continues until the ad list is retrieved from Facebook Need to restart/interrupt R to stop the loop.
1461941245703:#nrow(adlist))
1461941245703:for (ad in 1:nrow(adlist)) {
1461941245704:print(paste0('Querying Ad ',ad,": ", adlist$ad.campaign.name[ad]))
1461941245704:adreq$status_code <- 400
1461941245704:count <- 0
1461941245705:while(adreq$status_code == 400) {
1461941245705:try(adreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&time_increment=1"), config(token = fb_oauth)))
1461941245705:count <- count + 1
1461941245706:#print(paste('Attempt', count))
1461941245706:}
1461941245706:print('Query successful.')
1461941245707:#print(content(adreq))
1461941245707:# Organize/clean data
1461941245707:adcontent <- content(adreq)
1461941245709:adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1461941245710:nextpage <- adcontent$paging$`next`
1461941245711:while (is.null(nextpage) == FALSE) {
1461941245715:#print("Additional Days")
1461941245715:adreq.additional <- GET(adcontent$paging$`next`, config(token = fb_oauth))
1461941245718:adcontent.additional <- content(adreq.additional)
1461941245718:adcontent.additional.parsed <- unlist(adcontent.additional, use.names=TRUE, recursive=TRUE)
1461941245722:adcontentparsed <- c(adcontentparsed,adcontent.additional.parsed)
1461941245722:nextpage <- adcontent.additional$paging$`next`
1461941245726:}
1461941245727:#adcontent2 <- unlist(adcontent$data, use.names=FALSE, recursive=TRUE)
1461941245729:adcontentparsed.store <- adcontentparsed
1461941245730:#adcontentparsed <- adcontentparsed.store
1461941245733:names(adcontentparsed)[(names(adcontentparsed) == ("actions.value"))] <- adcontentparsed[(names(adcontentparsed) == ("actions.action_type"))]
1461941245733:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("actions.action_type")))]
1461941245738:if (length(which(names(adcontentparsed) %in% c("video_avg_pct_watched_actions.action_type","video_avg_sec_watched_actions.action_type"))) > 1) {
1461941245739:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_sec_watched_actions.value"))] <- paste0("video_avg_sec_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1461941245741:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_pct_watched_actions.value"))] <- paste0("video_avg_pct_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1461941245742:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("video_avg_pct_watched_actions.action_type")))]
1461941245743:} else {}
1461941245744:# Frame data for inclusion
1461941245746:days = length((adcontentparsed[overalladmetricsreturned[1] == names(adcontentparsed)]))
1461941245747:header <- c(adlist[ad,c("ad.campaign.id","ad.campaign.name","objective","created.time")])
1461941245748:footer <- data.frame()
1461941245750:if (is.null(adcontentparsed)==TRUE) {
1461941245752:footer <- rep(0,length(overalladmetricsreturned))
1461941245753:names(footer) <- overalladmetricsreturned
1461941245754:adoverallset <- c(unlist(header),footer)
1461941245757:} else {
1461941245757:for (day in 1:days) {
1461941245760:for (metric in 1:length(overalladmetricsreturned)) {
1461941245762:if (is.na(adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]) == TRUE) {
1461941245763:footer[day,metric] <- 0
1461941245766:} else {
1461941245767:footer[day,metric] <- adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]
1461941245770:}
1461941245773:colnames(footer) <- overalladmetricsreturned
1461941245774:adoverallset <- cbind(header,footer)
1461941245777:}
1461941245780:adoveralldata <- rbind(adoveralldata,adoverallset)
1461941245782:colnames(adoveralldata) <- c(names(header),overalladmetricsreturned)
1461941245784:# Print processing stats
1461941245785:completion <- (ad/(nrow(adlist))*100)
1461941245786:#print(ad)
1461941245789:#print(nrow(adoveralldata))
1461941245790:#print(paste0("Finding Facebook Data for Ad Set ",ad,": ",adlist[ad,2]))
1461941245793:print(paste0('Primary dataset appended: ',nrow(adoveralldata),' rows retrieved from Facebook.'))
1461941245794:print(paste(paste0(round(completion, digits = 0),"%"), "of Ads Processed."))
1461941245798:}
1461941268218:#names(adoveralldata) <- overalladmetricsreturned
1461941268218:print(adoveralldata)
1461941268296:# Exporting ---------------------------------------------------------------
1461941268297:adoveralldatastore <- adoveralldata
1461941268299:#adoveralldata <- adoveralldatastore
1461941268299:adoveralldata[is.na(adoveralldata)] <- ""
1461941268299:#adoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)
1461941268300:#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461941268301:#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461941268301:setwd("/Users/vivek.menon")
1461941268301:datafolder <- "Data"
1461941268302:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461941268303:# Rename columns for Excel readability
1461941268303:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461941268306:# output Page dataset as final csv
1461941268307:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461941268310:#write.xlsx(adoveralldata, paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461941268310:write.csv(adoveralldata, file = paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".csv"), row.names=FALSE)
1461941268315:#####
1461941268316:## Ad Hourly Vector Frame
1461941268317:admetricsreturned <- c("campaign_id","campaign_name","date_start","date_stop","hourly_stats_aggregated_by_advertiser_time_zone","spend","reach","social_reach","frequency","page_engagement","post_engagement","clicks","social_clicks","ctr","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view")
1461941268318:adhourdata <- data.frame(NULL,stringsAsFactors=FALSE)
1461941268320:### Hourly Ad Metrics
1461941268322:## Loop 2: Hourly Ad Pull (Based on Loop 1)
1461941268322:for (ad in 1:nrow(adlist)) {
1461941268323:adhourreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=hourly_stats_aggregated_by_advertiser_time_zone"), config(token = fb_oauth))
1461941268323:adhourlydata <- content(adhourreq)
1461941268323:adhourlycontent <- unlist(adhourlydata$data, use.names=TRUE, recursive=TRUE)
1461941268324:completion <- (ad/(nrow(adlist))*100)
1461941268325:print(paste('Finding Facebook Ad Data for',adlist[ad,2]))
1461941268328:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1461941268329:if (length(adhourlycontent) > 0) {
1461941268331:names(adhourlycontent)[(names(adhourlycontent) == ("actions.value"))] <- adhourlycontent[(names(adhourlycontent) == ("actions.action_type"))]
1461941268331:adhourlycontent <- adhourlycontent[-which((names(adhourlycontent) == ("actions.action_type")))]
1461941268332:hours <- adhourlycontent[names(adhourlycontent) == "hourly_stats_aggregated_by_advertiser_time_zone"]
1461941268333:adhourlysetdata <- data.frame(NULL, stringsAsFactors = FALSE)
1461941268335:for (hour in 1:length(hours)){
1461941268336:if (hour <= 1) {
1461941268336:startindex = 1
1461941268337:endindex = which(adhourlycontent == hours[(hour)])
1461941268338:} else {
1461941268338:startindex = which(adhourlycontent == hours[(hour-1)])+1
1461941268339:endindex = which(adhourlycontent == hours[(hour)])
1461941268342:}
1461941268343:#print(paste("Set", hour))
1461941268344:#print(length(adhourlycontent[startindex:endindex]))
1461941268347:#print(adhourlycontent[startindex:endindex])
1461941268349:adhourlyset <- adhourlycontent[startindex:endindex]
1461941268352:adhourlyrow <- adhourlyset[match(admetricsreturned,names(adhourlyset))]
1461941268355:adhourlysetdata <- rbind(adhourlyrow,adhourlysetdata)
1461941268357:#print(adhourlyrow)
1461941268359:}
1461941268360:names(adhourlysetdata) <- admetricsreturned
1461941268362:#print(tail(adhourlysetdata))
1461941268364:adhourdata <- rbind(adhourlysetdata,adhourdata)
1461941268368:names(adhourdata) <- admetricsreturned
1461941268369:} else {
1461941268370:#next()
1461941268374:}
1461941290327:adstart <- ad
1461941290328:#Hourly Admetrics
1461941290329:for (ad in 1:nrow(adlist)) {
1461941290330:adhourreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=hourly_stats_aggregated_by_advertiser_time_zone"), config(token = fb_oauth))
1461941290333:adhourlydata <- content(adhourreq)
1461941290334:adhourlycontent <- unlist(adhourlydata$data, use.names=TRUE, recursive=TRUE)
1461941290338:if (length(adhourlycontent) > 0) {
1461941290339:names(adhourlycontent)[(names(adhourlycontent) == ("actions.value"))] <- adhourlycontent[(names(adhourlycontent) == ("actions.action_type"))]
1461941290341:adhourlycontent <- adhourlycontent[-which((names(adhourlycontent) == ("actions.action_type")))]
1461941290344:hours <- adhourlycontent[names(adhourlycontent) == "hourly_stats_aggregated_by_advertiser_time_zone"]
1461941290347:adhourlysetdata <- data.frame(NULL, stringsAsFactors = FALSE)
1461941290349:for (hour in 1:length(hours)){
1461941290350:if (hour <= 1) {
1461941290352:startindex = 1
1461941290353:endindex = which(adhourlycontent == hours[(hour)])
1461941290356:} else {
1461941290357:startindex = which(adhourlycontent == hours[(hour-1)])+1
1461941290360:endindex = which(adhourlycontent == hours[(hour)])
1461941290364:}
1461941290367:#print(paste("Set", hour))
1461941290368:#print(length(adhourlycontent[startindex:endindex]))
1461941290372:#print(adhourlycontent[startindex:endindex])
1461941290376:adhourlyset <- adhourlycontent[startindex:endindex]
1461941290378:adhourlyrow <- adhourlyset[match(admetricsreturned,names(adhourlyset))]
1461941290381:adhourlysetdata <- rbind(adhourlyrow,adhourlysetdata)
1461941290383:#print(adhourlyrow)
1461941290384:}
1461941290385:names(adhourlysetdata) <- admetricsreturned
1461941290389:#print(tail(adhourlysetdata))
1461941290390:adhourdata <- rbind(adhourlysetdata,adhourdata)
1461941290392:names(adhourdata) <- admetricsreturned
1461941290394:} else {
1461941290395:next()
1461941290398:}
1461941309234:### Segmented Ad Metrics
1461941309238:## Loop 3: Segmented Ad Pull (Based on Loop 1)
1461941309238:ad <-  0
1461941309241:admetricsreturned <- c("campaign_id","campaign_name","date_start","date_stop","gender","age","spend","reach","social_reach","frequency","page_engagement","post_engagement","clicks","social_clicks","ctr","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view")
1461941309242:### PICK UP FROM HERE; THIS LOOP ONLY GETS TO 5% ###
1461941309245:adsegmentsetdata <- data.frame(NULL,stringsAsFactors=FALSE)
1461941309246:for (ad in 1:nrow(adlist)) {
1461941309248:adsegmentreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=age,gender"), config(token = fb_oauth))
1461941309249:adsegmentdata <- content(adsegmentreq)
1461941309249:adsegmentcontent <- unlist(adsegmentdata$data, use.names=TRUE, recursive=TRUE)
1461941309250:completion <- (ad/(length(initialcontent$data))*100)
1461941309250:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1461941309254:if (length(adsegmentcontent) > 0) {
1461941309255:names(adsegmentcontent)[(names(adsegmentcontent) == ("actions.value"))] <- adsegmentcontent[(names(adsegmentcontent) == ("actions.action_type"))]
1461941309257:adsegmentcontent <- adsegmentcontent[-which((names(adsegmentcontent) == ("actions.action_type")))]
1461941309258:ages <- unique(adsegmentcontent[names(adsegmentcontent) == "age"])
1461941309261:genders <- unique(adsegmentcontent[names(adsegmentcontent) == "gender"])
1461941309262:adsegmentsetdata <- data.frame(NULL, stringsAsFactors = FALSE)
1461941309266:for (age in 1:length(ages)) {
1461941309267:if (age <= 1) {
1461941309269:startindex = 1
1461941309269:endindex = which(adsegmentcontent == ages[(age)])[3]+1
1461941309273:} else {
1461941309274:startindex = which(adsegmentcontent == ages[(age-1)])[3]+1
1461941309277:endindex = which(adsegmentcontent == ages[(age)])[3]+1
1461941309280:}
1461941309283:adsegmentset <- adsegmentcontent[startindex:endindex]
1461941309286:for (gender in 1:length(genders)) {
1461941309289:if (gender <= 1) {
1461941309290:startgenderindex = 1
1461941309291:endgenderindex = which(adsegmentset == genders[(gender)])
1461941309293:} else {
1461941309294:startgenderindex = which(adsegmentset == genders[(gender-1)])+1
1461941309298:endgenderindex = which(adsegmentset == genders[(gender)])
1461941309299:}
1461941309302:adsegmentrow <- adsegmentset[match(admetricsreturned,names(adsegmentset))]
1461941309303:adsegmentsetdata <- rbind(adsegmentrow,adsegmentsetdata)
1461941309305:}
1461941309306:} else {
1461941309307:next()
1461941309310:}
1461941328285:names(adsegmentdata) <- admetricsreturned
1461941328287:# Placement and Device
1461941328288:adplacereq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=placement,impression_device"), config(token = fb_oauth))
1461941328806:# Age and Gender
1461941328806:adreq2 <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=age,gender"), config(token = fb_oauth))
1461941329361:adcontent <- content(adreq)
1461941329366:adcontent1 <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1461941329367:# Clean out the NA's
1461941329368:# Exporting ---------------------------------------------------------------
1461941329368:adoveralldata[is.na(adoveralldata)] <- ""
1461941329369:adoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)
1461941329375:#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461941329376:#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461941329377:setwd("/Users/vivek.menon")
1461941329378:datafolder <- "Data"
1461941329381:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461941329387:# Rename columns for Excel readability
1461941329387:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461941329389:# output Page dataset as final csv
1461941329390:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461941329391:write.xlsx(adoveralldata, paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461941333451:# Rename columns for Excel readability
1461941333451:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461941333452:# output Post dataset as final Excel
1461941333453:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461941363669:## Facebook Ad API Scraper #####
1461941363671:## Mirum Agency ################
1461941363672:## By Vivek Menon ##############
1461941363672:## v.1.2.0 #####################
1461941363673:# Setup -------------------------------------------------------------------
1461941363673:#.Options - Check current factory options.
1461941363673:#options(stringsAsFactors = FALSE)
1461941363674:library(httr)
1461941363674:library(RJSONIO)
1461941363675:library(RCurl)
1461941363675:library(devtools)
1461941363675:library(xlsx)
1461941363676:# Install and use Rfacebook; deprecated for direct API call approach.
1461941363676:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461941363676:#library(Rfacebook)
1461941363677:#install.packages("Rfacebook")
1461941363677:#library(Rfacebook)
1461941363677:#Using 'rFacebook' from Github
1461941363678:#fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461941363681:#callAPI("https://graph.facebook.com/v2.5/act_693722000711682/adgroups?fields=name&limit=1000", fboauth)
1461941363682:# Functions ---------------------------------------------------------------
1461941363683:# User Functions
1461941363686:# Function to convert Facebook date format to R date format
1461941363686:format.facebook.date <- function(datestring) {
1461941363690:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461941363690:}
1461941363694:# Inputs ------------------------------------------------------------------
1461941363694:#Turn stringsAsFactors off so rbind works properly.
1461941363697:options(stringsAsFactors = FALSE)
1461941363698:# Find OAuth settings for facebook:
1461941363698:#http://developers.facebook.com/docs/authentication/server-side/
1461941363701:facebook <- oauth_endpoints("facebook")
1461941363702:#facebook <- oauth_endpoint(
1461941363706:#  authorize = "https://www.facebook.com/dialog/oauth",
1461941363706:#  access = "https://graph.facebook.com/oauth/access_token",
1461941363707:#  base = "https://localhost:1410")
1461941363707:# Register an application at https://developers.facebook.com/apps/
1461941363707:#Insert your values below - if secret is omitted, it will look it up in
1461941363708:#the FACEBOOK_CONSUMER_SECRET environmental variable.
1461941363708:app_name <- "r_access"
1461941363709:app_id <- "955460364539237"
1461941363709:app_secret <- "0a3e6943c90510dc158fc7683e560f7d"
1461941363710:scope = "ads_management,manage_pages,publish_actions"
1461941363710:## Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
1461941363710:full_url <- oauth_callback()
1461941363714:full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
1461941363714:message <- paste("Copy and paste into Site URL on Facebook App Settings:",
1461941363715:full_url, "\nWhen done, press any key to continue...")
1461941363715:## Reminder to add callback into the app page.
1461941363716:invisible(readline(message))
1461941363719:myapp <- oauth_app(app_name, app_id, app_secret)
1461941363720:## current httr version, to test which oauth protocol to use. [Required to set global port variables; won't work otherwise.]
1461941363723:if (packageVersion('httr') > "0.6.1"){
1461941363723:Sys.setenv("HTTR_SERVER_PORT" = "1410/")
1461941363723:fb_oauth <- oauth2.0_token(facebook, myapp,
1461941363724:scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
1461941363724:if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
1461941363725:message("Authentication successful.")
1461941363725:}
1461941368133:# Test 1: Facebook Profile Information
1461941368133:req <- GET("https://graph.facebook.com/v2.5/me?fields=id,name", config(token = fb_oauth))
1461941368727:stop_for_status(req)
1461941368728:str(content(req))
1461941368736:# Test 2: Ad Account Information
1461941368737:accountreq <- GET("https://graph.facebook.com/v2.5/act_693722000711682?fields=name", config(token = fb_oauth))
1461941369310:adaccountname <- content(accountreq)[1]$name
1461941369313:adaccountid <- content(accountreq)[2]$id
1461941369315:# Inputs ------------------------------------------------------------------
1461941369316:# /insights is the new /stats; gets ad data at the account and id level
1461941369316:# /keywordstats = interests in ad manager UI
1461941369316:## Variables
1461941369317:# Number of Ads to Pull
1461941369317:ads = 1000 #So far, only 167 in the account.
1461941369318:#try(
1461941369318:#  adreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=",")), config(token = fb_oauth))
1461941369321:#)
1461941369321:#stop_for_status(adreq)
1461941369322:#adcontent <- content(adreq)
1461941369322:#adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1461941369323:## Facebook:
1461941369323:#[1] All valid values are: date_start, date_stop, account_id, account_name, adgroup_id, adgroup_name, campaign_group_id, campaign_group_name, campaign_id, campaign_name, action_carousel_card_id, action_carousel_card_name, actions, unique_actions, total_actions, total_unique_actions, action_values, total_action_value, impressions, social_impressions, clicks, social_clicks, unique_impressions, unique_social_impressions, unique_clicks, unique_social_clicks, spend, frequency, social_spend, deeplink_clicks, app_store_clicks, website_clicks, call_to_action_clicks, newsfeed_avg_position, newsfeed_impressions, newsfeed_clicks, reach, social_reach, ctr, unique_ctr, cpc, cpm, cpp, cost_per_total_action, cost_per_action_type, cost_per_unique_click, cost_per_10_sec_video_view, relevance_score, website_ctr, video_avg_sec_watched_actions, video_avg_pct_watched_actions, video_p25_watched_actions, video_p50_watched_actions, video_p75_watched_actions, video_p95_watched_actions, video_p100_watched_actions, video_complete_watched_actions, video_10_sec_watched_actions, video_15_sec_watched_actions, video_30_sec_watched_actions"
1461941369327:# Processing --------------------------------------------------------------
1461941369330:### Intial Batch Ad Pull
1461941369330:# Dataframe and query result holder
1461941369331:initialcontent <- NULL
1461941369331:after <- NULL
1461941369332:# Pull all ad ids and names, batch mode
1461941369335:#initialreq <- GET(paste0("https://graph.facebook.com/v2.5/act_693722000711682/adcampaigns?fields=name&limit=",ads), config(token = fb_oauth))
1461941369335:initialreq <- 400
1461941369338:count <- 0
1461941377974:while (warn_for_status(initialreq) != TRUE) {
1461941377975:count <- count + 1
1461941377977:print(paste('Query Attempt', count))
1461941377977:initialreq <- GET(paste0("https://graph.facebook.com/v2.5/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
1461941377981:}
1461941630459:## Facebook Query Injector #####
1461941630461:## Mirum Agency ################
1461941630462:## By Vivek Menon ##############
1461941630462:## v.1.5.0 #####################
1461941630463:# Summary -----------------------------------------------------------------
1461941630466:# Todo --------------------------------------------------------------------
1461941630467:# - Run script for all major brands
1461941630470:# - Create 'participation rate' function
1461941630470:# - Incorporate Twitter
1461941630473:# Setup -------------------------------------------------------------------
1461941630474:# Load and install all necessary packages for the script
1461941630477:# Required Packages for dataframes, forecasting, graphical visualization, and development
1461941630477:# Use 'install.packages()' if unavailable.
1461941630481:#library(zoo)
1461941630481:#library(forecast)
1461941630481:library(ggplot2)
1461941630961:#library(scales)
1461941630962:library(devtools)
1461941631111:library(compare)
1461941631170:library(xlsx)
1461941634140:require(httr)
1461941634180:require(rjson)
1461941634240:require(RCurl)
1461941634518:# Pull most up to date Github repositories for relevant packages
1461941634519:# Not frequently updated; does not need to be run every time.
1461941634521:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461941634521:#install_github("pablobarbera/instaR/instaR")
1461941634521:# Required packags for plugging into Facebook API
1461941634522:#library(twitteR)
1461941634522:library(Rfacebook)
1461941634627:#library(instaR)
1461941634627:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1461941634629:# https://instagram.com/developer/authentication/?hl=en
1461941634629:setwd("~/")
1461941634630:getwd()
1461941634630:# Authorize with Facebook
1461941634631:#Using 'rFacebook' from Github
1461941634631:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461941638873:# Functions ---------------------------------------------------------------
1461941638875:# User Functions
1461941638876:# Function to convert Facebook date format to R date format
1461941638877:format.facebook.date <- function(datestring) {
1461941638880:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461941638881:}
1461941638884:# Shift a vector up by an amount
1461941638885:shift <- function(x, n){
1461941638888:c(x[-(seq(n))], rep(NA, n))
1461941638888:}
1461941638892:# Get gcd from vector
1461941638893:gcd <- function(x,y) {
1461941638895:r <- x%%y;
1461941638895:return(ifelse(r, gcd(y, r), y))
1461941638896:}
1461941638897:# Inputs ------------------------------------------------------------------
1461941638897:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1461941638900:# Define data range for data (2012 is out of bounds for some metrics)
1461941638901:posts <- 5000
1461941638904:roof = Sys.Date() #"2015-12-31"
1461941638905:floor = "2015-02-01" #"2015-05-01"
1461941638908:range = seq(as.Date(floor), as.Date(roof), by="days")
1461941638910:## Access ftoken
1461941638911:# Use token from Facebook Graph API
1461941638912:# token generated here: https://developers.facebook.com/tools/explorer
1461941638912:# Lasts two hours, and must be changed depending on page and permissions
1461941638913:ftokens <- c(
1461941638913:#Sledgehammer Wine
1461941638916:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461941638916:#Chateau Saint Jean
1461941638917:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461941638917:#19 Crimes
1461941638918:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461941638918:#Beringer Vneyards
1461941638921:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461941638922:#100% Canadian Milk
1461941638922:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461941638923:#Lait 100% Canadien
1461941638923:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461941638923:#Recharge with Milk
1461941638924:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461941638924:#Misc
1461941638925:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461941638925:#Baron
1461941638926:"EAACEdEose0cBAM9n3ZAkZBGZAvbOhDex9qZBvjNijZAB3RApcOarZB616UaTj7GUDXXHP8lfSH8OUaBVAL1NuIDc0U1vAGpT418KRiSc3hKmJ3Ka0hXaZA9IrBZAm8qmALWyjQkTZCBEa4Vp8GVHDcYjKp64neBtR4ClM9pLue4PLJAZDZD"
1461941638926:)
1461941638930:totalpagedata <- data.frame()
1461941638931:totalpostdata <- data.frame()
1461941638933:for (brand in 1:length(ftokens)) {
1461941638934:ftoken <- ftokens[brand]
1461941638937:## User Id
1461941638937:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461941638938:userid = "10153046308598756"
1461941638938:# Access public personal data; basically a ftoken test
1461941638939:me <- getUsers("me", token=ftoken)
1461941638942:print(me$name)
1461941638943:## Page Id
1461941638943:# Define which page will be used for the data collection. Change id's as necessary.
1461941638946:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461941638947:pageid = me$id
1461941638948:# Acquisition -------------------------------------------------------------
1461941638950:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461941638951:page <- getPage(pageid, ftoken, n = posts)
1461941638954:page.store <- page
1461941638955:# Create new vectors in dataset with datetime, month, and day formattiong
1461941638958:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461941638958:page$datetime <- format.facebook.date(page$created_time)
1461941638962:page$month <- format(page$datetime, "%Y-%m")
1461941638963:page$day <- format(page$datetime, "%Y-%m-%d")
1461941638966:page$datetime <- as.Date(page$datetime)
1461941638967:#page$month <- as.Date(page$month)
1461941638970:page$day <- as.Date(page$day)
1461941638971:} else {
1461941638971:print("Date fields already exist.")
1461941638971:}
1461941638972:# Processing --------------------------------------------------------------
1461941638972:# Process data to clean dataset and augment it with more data than default fields.
1461941638976:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1461941638977:## Cleaning =================================
1461941638980:# Page and Post Datasets
1461941638981:# Split dataset into two for pages and post data
1461941638983:# Create initial null sets
1461941638984:pagedata <- 0
1461941638987:postdata <- 0
1461941638989:## Appending =================================
1461941638992:### Page Metrics #############################
1461941638992:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461941638995:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461941638996:# Page Metrics to automatically pull
1461941638999:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461941638999:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461941639003:pagemetrics <- metrics
1461941639004:# Prep dataset by breaking into weeks
1461941639005:pagedata <- 0
1461941639008:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461941639010:colnames(pagedata) = c("pageid", "page", "date")
1461941639013:pagedata$page = page$from_name[1]
1461941639014:pagedata$pageid = page$from_id[1]
1461941639016:divisor = 5
1461941639017:remainder = length(range)%%divisor;
1461941639021:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461941639022:weeks <- (nrow(pagedata)/5)-2
1461941639027:# Start Data Acquisition Loop
1461941639028:for (metric in 1:length(metrics)) {
1461941639031:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461941639034:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461941639035:period = 'lifetime'
1461941639036:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461941639039:period = 'day'
1461941639040:tempfloor = "2014-02-01"
1461941639043:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461941639044:if (floor < tempfloor) {
1461941639047:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461941639048:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461941639051:weeks = tempweeks
1461941639053:} else {}
1461941639054:} else {
1461941639055:period = 'day'
1461941639058:weeks <- (nrow(pagedata)/5)-2
1461941639059:}
1461941639064:hold <- matrix(0, nrow=0, ncol=7)
1461941639066:for (week in 0:weeks) {
1461941639068:end <- pagedata$date[(week*5)+1]
1461941639070:start <- pagedata$date[((week+1)*5)+1]
1461941639073:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461941639076:pull <- NULL
1461941639077:attempt <- 1
1461941639080:while(is.null(pull) && attempt <= 10) {
1461941639081:attempt <- attempt + 1
1461941639083:try(
1461941639084:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461941639087:)
1461941639089:if (is.null(pull)) {
1461941639091:print("Empty Pull. Re-attempting.")
1461941639092:print(paste("Attempt", attempt))
1461941639095:} else {
1461941639096:pull$datetime <- format.facebook.date(pull$end_time)
1461941639099:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461941639102:pull$datetime <- as.Date(pull$datetime)
1461941639104:#page$month <- as.Date(page$month)
1461941639106:pull$day <- as.Date(pull$day)
1461941639109:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461941639111:print("Found Facebook data matching date range. Storing values.")
1461941639114:} else {
1461941639115:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461941639117:print(paste("Attempt", attempt))
1461941639119:pull <- NULL}
1461941639123:if (attempt > 100) {
1461941639124:print('Too many attempts. Skipping.')
1461941639127:pull <- NULL
1461941639129:break
1461941639133:} else {}
1461941639135:}
1461941639139:pulllength <- ncol(pull)
1461941639142:rpull = pull[rev(rownames(pull)),]
1461941639144:hold <- rbind(hold,rpull)
1461941639145:rawhold <- hold
1461941639147:}
1461941639154:rhold = hold[rev(rownames(hold)),]
1461941639155:rhold$value = shift(rhold$value, 1)
1461941639157:hold = rhold[rev(rownames(rhold)),]
1461941639159:hold$value[1] = rawhold$value[1]
1461941639162:hours <- seq(0,23)
1461941639164:names(hours) <- paste("Hour", hours)
1461941639168:subtypes <- c('link','comment', 'like')
1461941639170:names(subtypes) <- c('Shares','Comments', 'Likes')
1461941639174:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461941639176:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461941639178:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461941639182:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461941639186:for (type in 1:length(subtypes)) {
1461941639188:typehold <- NA
1461941639191:typehold <- hold[hold$variable == subtypes[type],]
1461941639195:pagedata <- cbind(NA,pagedata)
1461941639197:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461941639200:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461941639204:metrics <- c(metrics,subtypes[type])
1461941639207:}
1461941639214:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461941639219:for (demographic in 1:length(demographics)) {
1461941639224:print(names(demographics[demographic]))
1461941639229:typehold <- NA
1461941639232:typehold <- hold[hold$variable == demographics[demographic],]
1461941639234:typehold[typehold$value <= 10,] <- NA
1461941639240:pagedata <- cbind(NA,pagedata)
1461941639242:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461941639245:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461941639250:metrics <- c(metrics,demographics[demographic])
1461941639253:}
1461941639257:} else if ((metrics)[metric] == 'page_fans_online') {
1461941639263:for (hour in 1:length(hours)) {
1461941639268:typehold <- NA
1461941639271:typehold <- hold[hold$variable == hours[hour],]
1461941639276:pagedata <- cbind(NA,pagedata)
1461941639278:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461941639282:colnames(pagedata)[1] = paste("hour",hours[hour])
1461941639288:metrics <- c(metrics,hours[hour])
1461941639291:}
1461941639294:} else {
1461941639298:pagedata <- cbind(NA,pagedata)
1461941639301:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461941639304:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461941639311:}
1461941639318:cat("\n\n")
1461941639322:print(head(pagedata))
1461941639325:cat("\n")
1461941639333:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461941639336:break
1461941639339:} else {
1461941639342:}
1461941639352:pagedata.tempstore <- pagedata
1461941639358:#Page Metrics to remove because they have subtypes
1461941639360:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1461941639364:# Page Metrics to manually create
1461941639366:metrics <- c(metrics,"organic reach")
1461941639369:names(metrics)[length(metrics)] <- c("Organic Reach")
1461941639374:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1461941639376:colnames(pagedata)[1] = "organic reach"
1461941639381:# Final dataset formatting
1461941639384:pagedatastore <- pagedata
1461941639385:#pagedata <- pagedatastore
1461941639390:pagedata2 <- pagedata
1461941639397:# reorder and null NA's for excel
1461941639402:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1461941639405:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1461941639408:#pagedata2[is.na(pagedata2)] <- ""
1461941639410:#pagedata2[pagedata2 == 0] <- ""
1461941639416:# store final dataset
1461941639418:pagedata <- pagedata2
1461941639422:### Post Metrics #############################
1461941639424:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1461941639427:# Most are automated, and will continue to retry through errors until a value is found.
1461941639429:# Manual modifications are run after initial data acquisition.
1461941639434:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1461941639439:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1461941639445:# Populate sets with values from pull
1461941639450:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461941639453:page$datetime <- format.facebook.date(page$created_time)
1461941639456:page$month <- format(page$datetime, "%Y-%m")
1461941639458:page$day <- format(page$datetime, "%Y-%m-%d")
1461941639462:page$datetime <- as.Date(page$datetime)
1461941639466:#page$month <- as.Date(page$month)
1461941639469:page$day <- as.Date(page$day)
1461941639473:} else {
1461941639475:print("Date fields already exist for Post Data.")
1461941639478:}
1461941639483:postdata <- 0
1461941639485:postdata <- page[page$day > floor,]
1461941639490:postdata <- postdata[postdata$day < roof,]
1461941639497:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461941639508:# Name column for usability
1461941639510:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461941639514:rows <- nrow(postdata)
1461941639517:lpostmetrics <- postmetrics
1461941639523:testlength <- 2
1461941639525:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461941639539:for (pmetric in 1:length(postmetrics)) {
1461941639542:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461941639548:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461941639550:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461941639554:names(phold) <- c("id","name","period","title","description","value","variable")
1461941639556:} else {
1461941639558:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461941639561:names(phold) <- c("id","name","period","title","description","value")
1461941639563:}
1461941639573:for (post in 1:nrow(postdata)) {
1461941639578:period <- "lifetime"
1461941639585:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461941639592:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461941639596:print('Not a Facebook Video.')
1461941639598:phold <- rbind(phold, NA)
1461941639600:next()
1461941639603:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461941639606:} else {
1461941639610:}
1461941639620:postpull <- NULL
1461941639622:attempt <- 1
1461941639629:while( is.null(postpull) && attempt <= 100) {
1461941639633:attempt <- attempt + 1
1461941639637:try(
1461941639640:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461941639642:,silent=TRUE
1461941639645:)
1461941639648:if (attempt > 10) {
1461941639652:print('Too many attempts. Skipping.')
1461941639656:postpull <- NULL
1461941639660:break
1461941639664:} else {
1461941639667:}
1461941639677:colnames(phold) <- names(postpull)
1461941639681:phold <- rbind(phold, postpull)
1461941639685:}
1461941639688:pholdstore <- phold
1461941639697:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461941639701:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461941639709:phold <- phold[-1,]
1461941639717:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461941639723:postmetrics <- postmetrics[-pmetric]
1461941639728:pmetric <- pmetric + 1
1461941639735:for (ptype in (1:length(psubtypes))) {
1461941639738:ptyphehold <- NA
1461941639744:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461941639753:postdata <- cbind(NA,postdata)
1461941639756:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461941639762:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461941639767:postmetrics <- c(postmetrics,psubtypes[ptype])
1461941639772:}
1461941639784:} else {
1461941639787:postdata <- cbind(NA,postdata)
1461941639790:postdata[1:length(phold$value),1] <- phold$value
1461941639793:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461941639795:}
1461941639808:cat("\n\n")
1461941639811:print(head(postdata))
1461941639814:cat("\n")
1461941639818:}
1461941639826:postdatastore <- postdata
1461941639844:# Post Metrics to manually create
1461941639848:postmetrics <- c(postmetrics,"organic reach")
1461941639852:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1461941639859:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1461941639862:colnames(postdata)[1] = "organic reach"
1461941639870:# Final dataset formatting
1461941639875:#postdatastore <- postdata
1461941639879:#postdata <- postdatastore
1461941639887:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1461941639897:# reorder and null NA's for Excel
1461941639902:postdata2 <- postdata
1461941639907:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1461941639910:postdata2[is.na(postdata2)] <- ""
1461941639915:postdata2[postdata2 == 0] <- ""
1461941639925:# store final dataset
1461941639931:postdata <- as.data.frame(postdata2)
1461941639938:# Outputs -----------------------------------------------------------------
1461941639948:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461941639951:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461941639957:datafolder <- "Data"
1461941639967:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461941639974:# Rename columns for Excel readability
1461941639980:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461941639985:# output Page dataset as final csv
1461941639990:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461941639995:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461941640000:?wri
1461941640006:# Rename columns for Excel readability
1461941640012:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461941640019:# output Post dataset as final Excel
1461941640024:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461941640030:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461941640041:# Raw Data
1461941640046:# output dataset as raw csv
1461941640053:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461941640067:totalpagedata <- rbind(totalpagedata, pagedata)
1461941640071:totalpostdata <- rbind(totalpostdata, postdata)
1461941640081:}
1461942863777:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("TWE","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461942863960:# Rename columns for Excel readability
1461942863960:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461942863961:# output Post dataset as final Excel
1461942863961:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461942863961:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("TWE","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461942863974:# Images
1461942863975:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1461942863975:#for (picture in (1:nrow(postdata))) {
1461942863976:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1461942863976:#
1461942863976:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1461942863976:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1461942863977:#
1461942863977:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1461942863978:# Edit the core program and change feedback loop.
1461942863978:#
1461942863978:#}
1461942896522:## Facebook Query Injector #####
1461942896525:## Mirum Agency ################
1461942896525:## By Vivek Menon ##############
1461942896528:## v.1.5.0 #####################
1461942896529:# Summary -----------------------------------------------------------------
1461942896529:# Todo --------------------------------------------------------------------
1461942896530:# - Run script for all major brands
1461942896530:# - Create 'participation rate' function
1461942896530:# - Incorporate Twitter
1461942896530:# Setup -------------------------------------------------------------------
1461942896531:# Load and install all necessary packages for the script
1461942896531:# Required Packages for dataframes, forecasting, graphical visualization, and development
1461942896531:# Use 'install.packages()' if unavailable.
1461942896532:#library(zoo)
1461942896532:#library(forecast)
1461942896532:library(ggplot2)
1461942896532:#library(scales)
1461942896533:library(devtools)
1461942896533:library(compare)
1461942896534:library(xlsx)
1461942896534:require(httr)
1461942896535:require(rjson)
1461942896535:require(RCurl)
1461942896536:# Pull most up to date Github repositories for relevant packages
1461942896536:# Not frequently updated; does not need to be run every time.
1461942896537:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461942896537:#install_github("pablobarbera/instaR/instaR")
1461942896537:# Required packags for plugging into Facebook API
1461942896537:#library(twitteR)
1461942896538:library(Rfacebook)
1461942896539:#library(instaR)
1461942896539:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1461942896539:# https://instagram.com/developer/authentication/?hl=en
1461942896540:setwd("~/")
1461942896540:getwd()
1461942896541:# Authorize with Facebook
1461942896541:#Using 'rFacebook' from Github
1461942896542:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461942899999:# Functions ---------------------------------------------------------------
1461942900000:# User Functions
1461942900002:# Function to convert Facebook date format to R date format
1461942900003:format.facebook.date <- function(datestring) {
1461942900006:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461942900007:}
1461942900010:# Shift a vector up by an amount
1461942900011:shift <- function(x, n){
1461942900014:c(x[-(seq(n))], rep(NA, n))
1461942900014:}
1461942900019:# Get gcd from vector
1461942900021:gcd <- function(x,y) {
1461942900021:r <- x%%y;
1461942900022:return(ifelse(r, gcd(y, r), y))
1461942900022:}
1461942900023:# Inputs ------------------------------------------------------------------
1461942900024:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1461942900027:# Define data range for data (2012 is out of bounds for some metrics)
1461942900027:posts <- 5000
1461942900030:roof = Sys.Date() #"2015-12-31"
1461942900031:floor = "2016-04-01" #"2015-05-01"
1461942900032:range = seq(as.Date(floor), as.Date(roof), by="days")
1461942900033:## Access ftoken
1461942900033:# Use token from Facebook Graph API
1461942900034:# token generated here: https://developers.facebook.com/tools/explorer
1461942900034:# Lasts two hours, and must be changed depending on page and permissions
1461942900035:ftokens <- c(
1461942900035:#Sledgehammer Wine
1461942900036:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461942900036:#Chateau Saint Jean
1461942900037:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461942900037:#19 Crimes
1461942900037:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461942900038:#Beringer Vneyards
1461942900038:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461942900038:#100% Canadian Milk
1461942900040:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461942900041:#Lait 100% Canadien
1461942900041:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461942900044:#Recharge with Milk
1461942900046:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461942900051:#Misc
1461942900052:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461942900054:#Baron
1461942900054:"EAACEdEose0cBAM9n3ZAkZBGZAvbOhDex9qZBvjNijZAB3RApcOarZB616UaTj7GUDXXHP8lfSH8OUaBVAL1NuIDc0U1vAGpT418KRiSc3hKmJ3Ka0hXaZA9IrBZAm8qmALWyjQkTZCBEa4Vp8GVHDcYjKp64neBtR4ClM9pLue4PLJAZDZD"
1461942900054:)
1461942900056:totalpagedata <- data.frame()
1461942900056:totalpostdata <- data.frame()
1461942900059:for (brand in 1:length(ftokens)) {
1461942900059:ftoken <- ftokens[brand]
1461942900062:## User Id
1461942900063:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461942900066:userid = "10153046308598756"
1461942900067:# Access public personal data; basically a ftoken test
1461942900068:me <- getUsers("me", token=ftoken)
1461942900071:print(me$name)
1461942900074:## Page Id
1461942900074:# Define which page will be used for the data collection. Change id's as necessary.
1461942900077:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461942900078:pageid = me$id
1461942900079:# Acquisition -------------------------------------------------------------
1461942900081:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461942900082:page <- getPage(pageid, ftoken, n = posts)
1461942900083:page.store <- page
1461942900084:# Create new vectors in dataset with datetime, month, and day formattiong
1461942900085:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461942900090:page$datetime <- format.facebook.date(page$created_time)
1461942900090:page$month <- format(page$datetime, "%Y-%m")
1461942900094:page$day <- format(page$datetime, "%Y-%m-%d")
1461942900095:page$datetime <- as.Date(page$datetime)
1461942900098:#page$month <- as.Date(page$month)
1461942900098:page$day <- as.Date(page$day)
1461942900101:} else {
1461942900102:print("Date fields already exist.")
1461942900103:}
1461942900106:# Processing --------------------------------------------------------------
1461942900106:# Process data to clean dataset and augment it with more data than default fields.
1461942900109:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1461942900110:## Cleaning =================================
1461942900113:# Page and Post Datasets
1461942900114:# Split dataset into two for pages and post data
1461942900117:# Create initial null sets
1461942900118:pagedata <- 0
1461942900120:postdata <- 0
1461942900121:## Appending =================================
1461942900123:### Page Metrics #############################
1461942900125:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461942900125:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461942900128:# Page Metrics to automatically pull
1461942900129:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461942900131:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461942900133:pagemetrics <- metrics
1461942900137:# Prep dataset by breaking into weeks
1461942900137:pagedata <- 0
1461942900138:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461942900143:colnames(pagedata) = c("pageid", "page", "date")
1461942900144:pagedata$page = page$from_name[1]
1461942900148:pagedata$pageid = page$from_id[1]
1461942900150:divisor = 5
1461942900150:remainder = length(range)%%divisor;
1461942900155:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461942900158:weeks <- (nrow(pagedata)/5)-2
1461942900159:# Start Data Acquisition Loop
1461942900162:for (metric in 1:length(metrics)) {
1461942900164:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461942900165:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461942900166:period = 'lifetime'
1461942900169:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461942900170:period = 'day'
1461942900173:tempfloor = "2014-02-01"
1461942900174:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461942900177:if (floor < tempfloor) {
1461942900179:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461942900181:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461942900182:weeks = tempweeks
1461942900184:} else {}
1461942900185:} else {
1461942900188:period = 'day'
1461942900190:weeks <- (nrow(pagedata)/5)-2
1461942900192:}
1461942900194:hold <- matrix(0, nrow=0, ncol=7)
1461942900197:for (week in 0:weeks) {
1461942900199:end <- pagedata$date[(week*5)+1]
1461942900202:start <- pagedata$date[((week+1)*5)+1]
1461942900205:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461942900206:pull <- NULL
1461942900207:attempt <- 1
1461942900209:while(is.null(pull) && attempt <= 10) {
1461942900213:attempt <- attempt + 1
1461942900214:try(
1461942900216:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461942900217:)
1461942900221:if (is.null(pull)) {
1461942900224:print("Empty Pull. Re-attempting.")
1461942900225:print(paste("Attempt", attempt))
1461942900226:} else {
1461942900230:pull$datetime <- format.facebook.date(pull$end_time)
1461942900231:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461942900235:pull$datetime <- as.Date(pull$datetime)
1461942900238:#page$month <- as.Date(page$month)
1461942900239:pull$day <- as.Date(pull$day)
1461942900242:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461942900243:print("Found Facebook data matching date range. Storing values.")
1461942900245:} else {
1461942900247:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461942900249:print(paste("Attempt", attempt))
1461942900251:pull <- NULL}
1461942900256:if (attempt > 100) {
1461942900257:print('Too many attempts. Skipping.')
1461942900260:pull <- NULL
1461942900263:break
1461942900265:} else {}
1461942900267:}
1461942900271:pulllength <- ncol(pull)
1461942900276:rpull = pull[rev(rownames(pull)),]
1461942900279:hold <- rbind(hold,rpull)
1461942900280:rawhold <- hold
1461942900283:}
1461942900291:rhold = hold[rev(rownames(hold)),]
1461942900293:rhold$value = shift(rhold$value, 1)
1461942900295:hold = rhold[rev(rownames(rhold)),]
1461942900299:hold$value[1] = rawhold$value[1]
1461942900300:hours <- seq(0,23)
1461942900304:names(hours) <- paste("Hour", hours)
1461942900308:subtypes <- c('link','comment', 'like')
1461942900310:names(subtypes) <- c('Shares','Comments', 'Likes')
1461942900313:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461942900315:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461942900321:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461942900326:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461942900331:for (type in 1:length(subtypes)) {
1461942900334:typehold <- NA
1461942900337:typehold <- hold[hold$variable == subtypes[type],]
1461942900341:pagedata <- cbind(NA,pagedata)
1461942900343:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461942900345:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461942900350:metrics <- c(metrics,subtypes[type])
1461942900352:}
1461942900359:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461942900363:for (demographic in 1:length(demographics)) {
1461942900368:print(names(demographics[demographic]))
1461942900373:typehold <- NA
1461942900376:typehold <- hold[hold$variable == demographics[demographic],]
1461942900378:typehold[typehold$value <= 10,] <- NA
1461942900382:pagedata <- cbind(NA,pagedata)
1461942900384:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461942900387:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461942900391:metrics <- c(metrics,demographics[demographic])
1461942900394:}
1461942900397:} else if ((metrics)[metric] == 'page_fans_online') {
1461942900402:for (hour in 1:length(hours)) {
1461942900405:typehold <- NA
1461942900407:typehold <- hold[hold$variable == hours[hour],]
1461942900411:pagedata <- cbind(NA,pagedata)
1461942900412:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461942900415:colnames(pagedata)[1] = paste("hour",hours[hour])
1461942900419:metrics <- c(metrics,hours[hour])
1461942900422:}
1461942900424:} else {
1461942900427:pagedata <- cbind(NA,pagedata)
1461942900430:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461942900431:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461942900437:}
1461942900442:cat("\n\n")
1461942900445:print(head(pagedata))
1461942900447:cat("\n")
1461942900453:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461942900456:break
1461942900459:} else {
1461942900461:}
1461942900470:pagedata.tempstore <- pagedata
1461942900476:#Page Metrics to remove because they have subtypes
1461942900479:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1461942900484:# Page Metrics to manually create
1461942900486:metrics <- c(metrics,"organic reach")
1461942900488:names(metrics)[length(metrics)] <- c("Organic Reach")
1461942900492:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1461942900494:colnames(pagedata)[1] = "organic reach"
1461942900500:# Final dataset formatting
1461942900503:pagedatastore <- pagedata
1461942900506:#pagedata <- pagedatastore
1461942900509:pagedata2 <- pagedata
1461942900514:# reorder and null NA's for excel
1461942900516:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1461942900519:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1461942900522:#pagedata2[is.na(pagedata2)] <- ""
1461942900524:#pagedata2[pagedata2 == 0] <- ""
1461942900530:# store final dataset
1461942900534:pagedata <- pagedata2
1461942900540:### Post Metrics #############################
1461942900543:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1461942900546:# Most are automated, and will continue to retry through errors until a value is found.
1461942900549:# Manual modifications are run after initial data acquisition.
1461942900554:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1461942900556:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1461942900561:# Populate sets with values from pull
1461942900564:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461942900567:page$datetime <- format.facebook.date(page$created_time)
1461942900571:page$month <- format(page$datetime, "%Y-%m")
1461942900574:page$day <- format(page$datetime, "%Y-%m-%d")
1461942900580:page$datetime <- as.Date(page$datetime)
1461942900583:#page$month <- as.Date(page$month)
1461942900586:page$day <- as.Date(page$day)
1461942900590:} else {
1461942900593:print("Date fields already exist for Post Data.")
1461942900596:}
1461942900601:postdata <- 0
1461942900604:postdata <- page[page$day > floor,]
1461942900606:postdata <- postdata[postdata$day < roof,]
1461942900611:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461942900619:# Name column for usability
1461942900622:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461942900625:rows <- nrow(postdata)
1461942900629:lpostmetrics <- postmetrics
1461942900636:testlength <- 2
1461942900639:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461942900650:for (pmetric in 1:length(postmetrics)) {
1461942900653:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461942900657:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461942900660:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461942900664:names(phold) <- c("id","name","period","title","description","value","variable")
1461942900666:} else {
1461942900670:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461942900672:names(phold) <- c("id","name","period","title","description","value")
1461942900675:}
1461942900682:for (post in 1:nrow(postdata)) {
1461942900689:period <- "lifetime"
1461942900697:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461942900704:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461942900707:print('Not a Facebook Video.')
1461942900710:phold <- rbind(phold, NA)
1461942900714:next()
1461942900720:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461942900728:} else {
1461942900733:}
1461942900748:postpull <- NULL
1461942900755:attempt <- 1
1461942900766:while( is.null(postpull) && attempt <= 100) {
1461942900771:attempt <- attempt + 1
1461942900777:try(
1461942900782:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461942900787:,silent=TRUE
1461942900792:)
1461942900797:if (attempt > 10) {
1461942900802:print('Too many attempts. Skipping.')
1461942900807:postpull <- NULL
1461942900812:break
1461942900820:} else {
1461942900825:}
1461942900842:colnames(phold) <- names(postpull)
1461942900844:phold <- rbind(phold, postpull)
1461942900846:}
1461942900851:pholdstore <- phold
1461942900857:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461942900860:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461942900867:phold <- phold[-1,]
1461942900873:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461942900880:postmetrics <- postmetrics[-pmetric]
1461942900883:pmetric <- pmetric + 1
1461942900890:for (ptype in (1:length(psubtypes))) {
1461942900893:ptyphehold <- NA
1461942900898:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461942900906:postdata <- cbind(NA,postdata)
1461942900909:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461942900914:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461942900919:postmetrics <- c(postmetrics,psubtypes[ptype])
1461942900924:}
1461942900933:} else {
1461942900936:postdata <- cbind(NA,postdata)
1461942900940:postdata[1:length(phold$value),1] <- phold$value
1461942900945:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461942900950:}
1461942900960:cat("\n\n")
1461942900963:print(head(postdata))
1461942900965:cat("\n")
1461942900968:}
1461942900977:postdatastore <- postdata
1461942900988:# Post Metrics to manually create
1461942900992:postmetrics <- c(postmetrics,"organic reach")
1461942900996:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1461942901001:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1461942901006:colnames(postdata)[1] = "organic reach"
1461942901012:# Final dataset formatting
1461942901014:#postdatastore <- postdata
1461942901019:#postdata <- postdatastore
1461942901025:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1461942901031:# reorder and null NA's for Excel
1461942901034:postdata2 <- postdata
1461942901038:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1461942901044:postdata2[is.na(postdata2)] <- ""
1461942901048:postdata2[postdata2 == 0] <- ""
1461942901055:# store final dataset
1461942901059:postdata <- as.data.frame(postdata2)
1461942901068:# Outputs -----------------------------------------------------------------
1461942901076:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461942901079:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461942901088:datafolder <- "Data"
1461942901097:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461942901106:# Rename columns for Excel readability
1461942901112:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461942901118:# output Page dataset as final csv
1461942901122:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461942901126:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461942901131:?wri
1461942901134:# Rename columns for Excel readability
1461942901139:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461942901144:# output Post dataset as final Excel
1461942901148:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461942901154:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461942901165:# Raw Data
1461942901172:# output dataset as raw csv
1461942901178:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461942901185:totalpagedata <- rbind(totalpagedata, pagedata)
1461942901191:totalpostdata <- rbind(totalpostdata, postdata)
1461942901198:}
1461942958752:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("TWE","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461942958806:# Rename columns for Excel readability
1461942958807:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461942958811:# output Post dataset as final Excel
1461942958812:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461942958813:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("TWE","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461942958953:# Images
1461942958959:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1461942958959:#for (picture in (1:nrow(postdata))) {
1461942958964:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1461942958967:#
1461942958971:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1461942958974:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1461942958978:#
1461942958981:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1461942958984:# Edit the core program and change feedback loop.
1461942958984:#
1461942958985:#}
1461942968723:totalpostdata
1461942971083:totalpagedata
1461942981424:postdatastore
1461942991932:pagedata
1461942997275:postdata
1461943005396:totalpagedata <- data.frame()
1461943005397:totalpostdata <- data.frame()
1461943013082:postdata <- 0
1461943022242:### Page Metrics #############################
1461943022243:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461943022245:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461943022246:# Page Metrics to automatically pull
1461943022246:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461943022247:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461943022248:pagemetrics <- metrics
1461943022252:# Prep dataset by breaking into weeks
1461943022252:pagedata <- 0
1461943022255:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461943022256:colnames(pagedata) = c("pageid", "page", "date")
1461943022259:pagedata$page = page$from_name[1]
1461943022259:pagedata$pageid = page$from_id[1]
1461943022262:divisor = 5
1461943022263:remainder = length(range)%%divisor;
1461943022266:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461943022267:weeks <- (nrow(pagedata)/5)-2
1461943022270:# Start Data Acquisition Loop
1461943022270:for (metric in 1:length(metrics)) {
1461943022273:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461943022274:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461943022277:period = 'lifetime'
1461943022277:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461943022278:period = 'day'
1461943022278:tempfloor = "2014-02-01"
1461943022279:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461943022282:if (floor < tempfloor) {
1461943022282:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461943022285:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461943022286:weeks = tempweeks
1461943022287:} else {}
1461943022287:} else {
1461943022288:period = 'day'
1461943022289:weeks <- (nrow(pagedata)/5)-2
1461943022290:}
1461943022291:hold <- matrix(0, nrow=0, ncol=7)
1461943022291:for (week in 0:weeks) {
1461943022292:end <- pagedata$date[(week*5)+1]
1461943022293:start <- pagedata$date[((week+1)*5)+1]
1461943022294:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461943022295:pull <- NULL
1461943022297:attempt <- 1
1461943022299:while(is.null(pull) && attempt <= 10) {
1461943022301:attempt <- attempt + 1
1461943022302:try(
1461943022305:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461943022306:)
1461943022309:if (is.null(pull)) {
1461943022310:print("Empty Pull. Re-attempting.")
1461943022313:print(paste("Attempt", attempt))
1461943022314:} else {
1461943022317:pull$datetime <- format.facebook.date(pull$end_time)
1461943022318:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461943022319:pull$datetime <- as.Date(pull$datetime)
1461943022320:#page$month <- as.Date(page$month)
1461943022323:pull$day <- as.Date(pull$day)
1461943022325:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461943022327:print("Found Facebook data matching date range. Storing values.")
1461943022328:} else {
1461943022331:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461943022332:print(paste("Attempt", attempt))
1461943022334:pull <- NULL}
1461943022336:if (attempt > 100) {
1461943022338:print('Too many attempts. Skipping.')
1461943022341:pull <- NULL
1461943022342:break
1461943022344:} else {}
1461943022345:}
1461943022349:pulllength <- ncol(pull)
1461943022351:rpull = pull[rev(rownames(pull)),]
1461943022353:hold <- rbind(hold,rpull)
1461943022354:rawhold <- hold
1461943022357:}
1461943022359:rhold = hold[rev(rownames(hold)),]
1461943022361:rhold$value = shift(rhold$value, 1)
1461943022362:hold = rhold[rev(rownames(rhold)),]
1461943022365:hold$value[1] = rawhold$value[1]
1461943022367:hours <- seq(0,23)
1461943022369:names(hours) <- paste("Hour", hours)
1461943022373:subtypes <- c('link','comment', 'like')
1461943022374:names(subtypes) <- c('Shares','Comments', 'Likes')
1461943022380:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461943022383:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461943022385:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461943022388:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461943022390:for (type in 1:length(subtypes)) {
1461943022392:typehold <- NA
1461943022393:typehold <- hold[hold$variable == subtypes[type],]
1461943022398:pagedata <- cbind(NA,pagedata)
1461943022399:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461943022402:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461943022404:metrics <- c(metrics,subtypes[type])
1461943022405:}
1461943022408:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461943022410:for (demographic in 1:length(demographics)) {
1461943022414:print(names(demographics[demographic]))
1461943022417:typehold <- NA
1461943022419:typehold <- hold[hold$variable == demographics[demographic],]
1461943022420:typehold[typehold$value <= 10,] <- NA
1461943022424:pagedata <- cbind(NA,pagedata)
1461943022426:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461943022428:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461943022432:metrics <- c(metrics,demographics[demographic])
1461943022433:}
1461943022436:} else if ((metrics)[metric] == 'page_fans_online') {
1461943022438:for (hour in 1:length(hours)) {
1461943022441:typehold <- NA
1461943022442:typehold <- hold[hold$variable == hours[hour],]
1461943022444:pagedata <- cbind(NA,pagedata)
1461943022446:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461943022449:colnames(pagedata)[1] = paste("hour",hours[hour])
1461943022453:metrics <- c(metrics,hours[hour])
1461943022454:}
1461943022457:} else {
1461943022459:pagedata <- cbind(NA,pagedata)
1461943022461:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461943022463:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461943022468:}
1461943022470:cat("\n\n")
1461943022471:print(head(pagedata))
1461943022472:cat("\n")
1461943022477:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461943022478:break
1461943022480:} else {
1461943022481:}
1461943071342:pagedata.tempstore <- pagedata
1461943071347:#Page Metrics to remove because they have subtypes
1461943071347:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1461943071350:# Page Metrics to manually create
1461943071351:metrics <- c(metrics,"organic reach")
1461943071353:names(metrics)[length(metrics)] <- c("Organic Reach")
1461943071354:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1461943071359:colnames(pagedata)[1] = "organic reach"
1461943071360:# Final dataset formatting
1461943071362:pagedatastore <- pagedata
1461943071363:#pagedata <- pagedatastore
1461943071365:pagedata2 <- pagedata
1461943071366:# reorder and null NA's for excel
1461943071369:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1461943071370:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1461943071370:#pagedata2[is.na(pagedata2)] <- ""
1461943071373:#pagedata2[pagedata2 == 0] <- ""
1461943071374:# store final dataset
1461943071374:pagedata <- pagedata2
1461943423127:pagedata
1461943424496:postdata
1461943429181:### Post Metrics #############################
1461943429181:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1461943429185:# Most are automated, and will continue to retry through errors until a value is found.
1461943429186:# Manual modifications are run after initial data acquisition.
1461943429186:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1461943429187:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1461943438461:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461943438462:page$datetime <- format.facebook.date(page$created_time)
1461943438463:page$month <- format(page$datetime, "%Y-%m")
1461943438464:page$day <- format(page$datetime, "%Y-%m-%d")
1461943438464:page$datetime <- as.Date(page$datetime)
1461943438465:#page$month <- as.Date(page$month)
1461943438470:page$day <- as.Date(page$day)
1461943438470:} else {
1461943438472:print("Date fields already exist for Post Data.")
1461943438473:}
1461943442710:postdata <- page[page$day > floor,]
1461943443227:postdata <- postdata[postdata$day < roof,]
1461943444059:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461943444246:# Name column for usability
1461943444625:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461943444879:rows <- nrow(postdata)
1461943445229:lpostmetrics <- postmetrics
1461943445729:testlength <- 2
1461943449533:for (pmetric in 1:length(postmetrics)) {
1461943449536:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461943449536:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461943449539:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943449540:names(phold) <- c("id","name","period","title","description","value","variable")
1461943449544:} else {
1461943449545:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943449547:names(phold) <- c("id","name","period","title","description","value")
1461943449548:}
1461943449552:for (post in 1:nrow(postdata)) {
1461943449555:period <- "lifetime"
1461943449557:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461943449558:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461943449560:print('Not a Facebook Video.')
1461943449560:phold <- rbind(phold, NA)
1461943449563:next()
1461943449564:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461943449568:} else {
1461943449571:}
1461943449573:postpull <- NULL
1461943449574:attempt <- 1
1461943449576:while( is.null(postpull) && attempt <= 100) {
1461943449578:attempt <- attempt + 1
1461943449579:try(
1461943449582:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461943449583:,silent=TRUE
1461943449586:)
1461943449587:if (attempt > 10) {
1461943449589:print('Too many attempts. Skipping.')
1461943449590:postpull <- NULL
1461943449593:break
1461943449594:} else {
1461943449595:}
1461943449598:colnames(phold) <- names(postpull)
1461943449599:phold <- rbind(phold, postpull)
1461943449600:}
1461943449604:pholdstore <- phold
1461943449606:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461943449608:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461943449610:phold <- phold[-1,]
1461943449611:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461943449612:postmetrics <- postmetrics[-pmetric]
1461943449615:pmetric <- pmetric + 1
1461943449616:for (ptype in (1:length(psubtypes))) {
1461943449618:ptyphehold <- NA
1461943449619:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461943449624:postdata <- cbind(NA,postdata)
1461943449625:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461943449630:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461943449631:postmetrics <- c(postmetrics,psubtypes[ptype])
1461943449634:}
1461943449637:} else {
1461943449639:postdata <- cbind(NA,postdata)
1461943449640:postdata[1:length(phold$value),1] <- phold$value
1461943449642:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461943449645:}
1461943449649:cat("\n\n")
1461943449650:print(head(postdata))
1461943449653:cat("\n")
1461943449654:}
1461943459778:postdatastore <- postdata
1461943487517:postdata
1461943496915:pmetric
1461943499663:postmetrics
1461943511321:#postdata <- 0
1461943511321:postdata <- page[page$day > floor,]
1461943511324:postdata <- postdata[postdata$day < roof,]
1461943511326:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461943511328:# Name column for usability
1461943511328:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461943511330:rows <- nrow(postdata)
1461943511330:lpostmetrics <- postmetrics
1461943511334:testlength <- 2
1461943511335:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461943511337:for (pmetric in 1:length(postmetrics)) {
1461943511338:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461943511341:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461943511343:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943511344:names(phold) <- c("id","name","period","title","description","value","variable")
1461943511345:} else {
1461943511345:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943511345:names(phold) <- c("id","name","period","title","description","value")
1461943511346:}
1461943511347:for (post in 1:nrow(postdata)) {
1461943511348:period <- "lifetime"
1461943511351:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461943511352:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461943511354:print('Not a Facebook Video.')
1461943511355:phold <- rbind(phold, NA)
1461943511358:next()
1461943511358:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461943511360:} else {
1461943511361:}
1461943511362:postpull <- NULL
1461943511363:attempt <- 1
1461943511364:while( is.null(postpull) && attempt <= 100) {
1461943511364:attempt <- attempt + 1
1461943511365:try(
1461943511366:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461943511367:,silent=TRUE
1461943511368:)
1461943511368:if (attempt > 10) {
1461943511369:print('Too many attempts. Skipping.')
1461943511373:postpull <- NULL
1461943511373:break
1461943511374:} else {
1461943511376:}
1461943511380:colnames(phold) <- names(postpull)
1461943511381:phold <- rbind(phold, postpull)
1461943511383:}
1461943511384:pholdstore <- phold
1461943511388:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461943511389:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461943511394:phold <- phold[-1,]
1461943511396:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461943511401:postmetrics <- postmetrics[-pmetric]
1461943511402:pmetric <- pmetric + 1
1461943511405:for (ptype in (1:length(psubtypes))) {
1461943511405:ptyphehold <- NA
1461943511408:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461943511410:postdata <- cbind(NA,postdata)
1461943511412:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461943511414:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461943511416:postmetrics <- c(postmetrics,psubtypes[ptype])
1461943511417:}
1461943511421:} else {
1461943511421:postdata <- cbind(NA,postdata)
1461943511424:postdata[1:length(phold$value),1] <- phold$value
1461943511425:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461943511428:}
1461943511430:cat("\n\n")
1461943511432:print(head(postdata))
1461943511433:cat("\n")
1461943511436:}
1461943546629:for (pmetric in 1:length(postmetrics)) {
1461943546629:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461943546631:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461943546632:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943546636:names(phold) <- c("id","name","period","title","description","value","variable")
1461943546636:} else {
1461943546639:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943546639:names(phold) <- c("id","name","period","title","description","value")
1461943546640:}
1461943546641:for (post in 1:nrow(postdata)) {
1461943546641:period <- "lifetime"
1461943546645:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461943546647:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461943546648:print('Not a Facebook Video.')
1461943546649:phold <- rbind(phold, NA)
1461943546652:next()
1461943546653:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461943546656:} else {
1461943546657:}
1461943546661:postpull <- NULL
1461943546662:attempt <- 1
1461943546664:while( is.null(postpull) && attempt <= 100) {
1461943546665:attempt <- attempt + 1
1461943546667:try(
1461943546668:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461943546671:,silent=TRUE
1461943546672:)
1461943546675:if (attempt > 10) {
1461943546676:print('Too many attempts. Skipping.')
1461943546679:postpull <- NULL
1461943546680:next
1461943546683:} else {
1461943546684:}
1461943546688:colnames(phold) <- names(postpull)
1461943546689:phold <- rbind(phold, postpull)
1461943546691:}
1461943546692:pholdstore <- phold
1461943546695:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461943546697:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461943546700:phold <- phold[-1,]
1461943546701:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461943546703:postmetrics <- postmetrics[-pmetric]
1461943546705:pmetric <- pmetric + 1
1461943546708:for (ptype in (1:length(psubtypes))) {
1461943546709:ptyphehold <- NA
1461943546711:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461943546713:postdata <- cbind(NA,postdata)
1461943546714:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461943546716:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461943546720:postmetrics <- c(postmetrics,psubtypes[ptype])
1461943546721:}
1461943546724:} else {
1461943546725:postdata <- cbind(NA,postdata)
1461943546727:postdata[1:length(phold$value),1] <- phold$value
1461943546728:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461943546729:}
1461943546734:cat("\n\n")
1461943546735:print(head(postdata))
1461943546737:cat("\n")
1461943546739:}
1461943605650:for (pmetric in 1:length(postmetrics)) {
1461943605652:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461943605654:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461943605657:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943605660:names(phold) <- c("id","name","period","title","description","value","variable")
1461943605661:} else {
1461943605664:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943605664:names(phold) <- c("id","name","period","title","description","value")
1461943605668:}
1461943605669:for (post in 1:nrow(postdata)) {
1461943605672:period <- "lifetime"
1461943605673:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461943605676:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461943605677:print('Not a Facebook Video.')
1461943605679:phold <- rbind(phold, NA)
1461943605680:next()
1461943605683:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461943605684:} else {
1461943605687:}
1461943605689:postpull <- NULL
1461943605690:attempt <- 1
1461943605692:while( is.null(postpull) && attempt <= 12) {
1461943605695:attempt <- attempt + 1
1461943605696:try(
1461943605699:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461943605700:,silent=TRUE
1461943605703:)
1461943605704:if (attempt > 10) {
1461943605707:print('Too many attempts. Skipping.')
1461943605708:postpull <- NULL
1461943605711:break
1461943605713:} else {
1461943605714:}
1461943605721:colnames(phold) <- names(postpull)
1461943605722:phold <- rbind(phold, postpull)
1461943605723:}
1461943605728:pholdstore <- phold
1461943605731:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461943605733:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461943605739:phold <- phold[-1,]
1461943605742:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461943605744:postmetrics <- postmetrics[-pmetric]
1461943605746:pmetric <- pmetric + 1
1461943605749:for (ptype in (1:length(psubtypes))) {
1461943605750:ptyphehold <- NA
1461943605752:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461943605755:postdata <- cbind(NA,postdata)
1461943605756:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461943605759:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461943605760:postmetrics <- c(postmetrics,psubtypes[ptype])
1461943605762:}
1461943605766:} else {
1461943605768:postdata <- cbind(NA,postdata)
1461943605769:postdata[1:length(phold$value),1] <- phold$value
1461943605771:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461943605773:}
1461943605778:cat("\n\n")
1461943605785:print(head(postdata))
1461943605786:cat("\n")
1461943605789:}
1461943622939:pmetric <- 2
1461943624727:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461943625390:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461943625674:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943625845:names(phold) <- c("id","name","period","title","description","value","variable")
1461943626050:} else {
1461943626245:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943626428:names(phold) <- c("id","name","period","title","description","value")
1461943626588:}
1461943627822:for (post in 1:nrow(postdata)) {
1461943628325:period <- "lifetime"
1461943628499:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461943628645:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461943628855:print('Not a Facebook Video.')
1461943628982:phold <- rbind(phold, NA)
1461943629289:next()
1461943629479:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461943629721:} else {
1461943630004:}
1461943631756:postpull <- NULL
1461943632177:attempt <- 1
1461943632749:while( is.null(postpull) && attempt <= 12) {
1461943632962:attempt <- attempt + 1
1461943633144:try(
1461943633486:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461943633667:,silent=TRUE
1461943633815:)
1461943633949:if (attempt > 10) {
1461943634146:print('Too many attempts. Skipping.')
1461943634319:postpull <- NULL
1461943634478:break
1461943634640:} else {
1461943634794:}
1461943635267:colnames(phold) <- names(postpull)
1461943635545:phold <- rbind(phold, postpull)
1461943635804:}
1461943648373:postdata
1461943658314:#postdata <- 0
1461943658314:postdata <- page[page$day > floor,]
1461943658316:postdata <- postdata[postdata$day < roof,]
1461943658317:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461943658320:# Name column for usability
1461943658320:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461943658320:rows <- nrow(postdata)
1461943658321:lpostmetrics <- postmetrics
1461943676290:# Name column for usability
1461943676290:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461943676292:rows <- nrow(postdata)
1461943676293:lpostmetrics <- postmetrics
1461943676294:#testlength <- 2
1461943676294:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461943676296:for (pmetric in 1:length(postmetrics)) {
1461943676296:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461943676299:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461943676300:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943676301:names(phold) <- c("id","name","period","title","description","value","variable")
1461943676302:} else {
1461943676305:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943676308:names(phold) <- c("id","name","period","title","description","value")
1461943676309:}
1461943676312:for (post in 1:nrow(postdata)) {
1461943676313:period <- "lifetime"
1461943676316:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461943676317:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461943676319:print('Not a Facebook Video.')
1461943676320:phold <- rbind(phold, NA)
1461943676323:next()
1461943676324:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461943676327:} else {
1461943676327:}
1461943676331:postpull <- NULL
1461943676332:attempt <- 1
1461943676335:while( is.null(postpull) && attempt <= 12) {
1461943676335:attempt <- attempt + 1
1461943676338:try(
1461943676338:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461943676342:,silent=TRUE
1461943676343:)
1461943676346:if (attempt > 10) {
1461943676347:print('Too many attempts. Skipping.')
1461943676350:postpull <- NULL
1461943676351:break
1461943676353:} else {
1461943676354:}
1461943676359:colnames(phold) <- names(postpull)
1461943676360:phold <- rbind(phold, postpull)
1461943676362:}
1461943676363:pholdstore <- phold
1461943676367:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461943676368:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461943676370:phold <- phold[-1,]
1461943676375:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461943676376:postmetrics <- postmetrics[-pmetric]
1461943676378:pmetric <- pmetric + 1
1461943676380:for (ptype in (1:length(psubtypes))) {
1461943676382:ptyphehold <- NA
1461943676383:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461943676387:postdata <- cbind(NA,postdata)
1461943676388:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461943676391:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461943676392:postmetrics <- c(postmetrics,psubtypes[ptype])
1461943676394:}
1461943676397:} else {
1461943676398:postdata <- cbind(NA,postdata)
1461943676401:postdata[1:length(phold$value),1] <- phold$value
1461943676402:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461943676404:}
1461943676406:cat("\n\n")
1461943676409:print(head(postdata))
1461943676412:cat("\n")
1461943676413:}
1461943676463:postdatastore <- postdata
1461943681899:postdata
1461943692927:#postdata <- 0
1461943692927:postdata <- page[page$day > floor,]
1461943692930:postdata <- postdata[postdata$day < roof,]
1461943692931:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461943692933:# Name column for usability
1461943692933:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461943696334:rows <- nrow(postdata)
1461943697190:lpostmetrics <- postmetrics
1461943700054:rows
1461943701618:lpostmetrics
1461943703054:postmetrics
1461943720899:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461943721722:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461943721851:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943722017:names(phold) <- c("id","name","period","title","description","value","variable")
1461943722237:} else {
1461943722368:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943722534:names(phold) <- c("id","name","period","title","description","value")
1461943722716:}
1461943733606:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461943733607:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461943733611:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943733611:names(phold) <- c("id","name","period","title","description","value","variable")
1461943733611:} else {
1461943733612:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943733612:names(phold) <- c("id","name","period","title","description","value")
1461943733612:}
1461943733613:for (post in 1:nrow(postdata)) {
1461943733614:period <- "lifetime"
1461943733616:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461943733617:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461943733621:print('Not a Facebook Video.')
1461943733622:phold <- rbind(phold, NA)
1461943733624:next()
1461943733625:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461943733628:} else {
1461943733628:}
1461943733632:postpull <- NULL
1461943733633:attempt <- 1
1461943733636:while( is.null(postpull) && attempt <= 12) {
1461943733638:attempt <- attempt + 1
1461943733639:try(
1461943733640:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461943733643:,silent=TRUE
1461943733644:)
1461943733647:if (attempt > 10) {
1461943733648:print('Too many attempts. Skipping.')
1461943733651:postpull <- NULL
1461943733652:break
1461943733656:} else {
1461943733657:}
1461943733660:colnames(phold) <- names(postpull)
1461943733661:phold <- rbind(phold, postpull)
1461943733664:}
1461943733727:pholdstore <- phold
1461943733727:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461943733727:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461943733728:phold <- phold[-1,]
1461943733728:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461943733729:postmetrics <- postmetrics[-pmetric]
1461943733729:pmetric <- pmetric + 1
1461943733729:for (ptype in (1:length(psubtypes))) {
1461943733730:ptyphehold <- NA
1461943733730:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461943733730:postdata <- cbind(NA,postdata)
1461943733731:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461943733731:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461943733731:postmetrics <- c(postmetrics,psubtypes[ptype])
1461943733732:}
1461943733733:} else {
1461943733733:postdata <- cbind(NA,postdata)
1461943733736:postdata[1:length(phold$value),1] <- phold$value
1461943733737:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461943733738:}
1461943733741:cat("\n\n")
1461943733742:print(head(postdata))
1461943733751:cat("\n")
1461943744384:rows <- nrow(postdata)
1461943744385:lpostmetrics <- postmetrics
1461943744387:#testlength <- 2
1461943744387:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461943744391:for (pmetric in 1:length(postmetrics)) {
1461943744391:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461943744394:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461943744394:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943744395:names(phold) <- c("id","name","period","title","description","value","variable")
1461943744395:} else {
1461943744396:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943744396:names(phold) <- c("id","name","period","title","description","value")
1461943744400:}
1461943744401:for (post in 1:nrow(postdata)) {
1461943744407:period <- "lifetime"
1461943744410:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461943744411:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461943744416:print('Not a Facebook Video.')
1461943744418:phold <- rbind(phold, NA)
1461943744418:next()
1461943744420:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461943744421:} else {
1461943744422:}
1461943744424:postpull <- NULL
1461943744425:attempt <- 1
1461943744434:while( is.null(postpull) && attempt <= 12) {
1461943744435:attempt <- attempt + 1
1461943744439:try(
1461943744440:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461943744443:,silent=TRUE
1461943744444:)
1461943744445:if (attempt > 10) {
1461943744446:print('Too many attempts. Skipping.')
1461943744447:postpull <- NULL
1461943744450:break
1461943744451:} else {
1461943744452:}
1461943744456:colnames(phold) <- names(postpull)
1461943744457:phold <- rbind(phold, postpull)
1461943744459:}
1461943744460:pholdstore <- phold
1461943744464:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461943744465:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461943744468:phold <- phold[-1,]
1461943744470:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461943744475:postmetrics <- postmetrics[-pmetric]
1461943744476:pmetric <- pmetric + 1
1461943744479:for (ptype in (1:length(psubtypes))) {
1461943744481:ptyphehold <- NA
1461943744483:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461943744488:postdata <- cbind(NA,postdata)
1461943744490:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461943744492:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461943744494:postmetrics <- c(postmetrics,psubtypes[ptype])
1461943744496:}
1461943744499:} else {
1461943744501:postdata <- cbind(NA,postdata)
1461943744505:postdata[1:length(phold$value),1] <- phold$value
1461943744508:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461943744509:}
1461943744518:cat("\n\n")
1461943744520:print(head(postdata))
1461943744522:cat("\n")
1461943744526:}
1461943744589:postdatastore <- postdata
1461943770688:postdata
1461943805232:try(
1461943805232:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461943805234:,silent=TRUE
1461943805235:)
1461943808099:postpull
1461943817513:getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461943825115:# Summary -----------------------------------------------------------------
1461943825117:# Todo --------------------------------------------------------------------
1461943825118:# - Run script for all major brands
1461943825119:# - Create 'participation rate' function
1461943825122:# - Incorporate Twitter
1461943825123:# Setup -------------------------------------------------------------------
1461943825123:# Load and install all necessary packages for the script
1461943825127:# Required Packages for dataframes, forecasting, graphical visualization, and development
1461943825128:# Use 'install.packages()' if unavailable.
1461943825130:#library(zoo)
1461943825131:#library(forecast)
1461943825134:library(ggplot2)
1461943825604:#library(scales)
1461943825604:library(devtools)
1461943825760:library(compare)
1461943825809:library(xlsx)
1461943828700:require(httr)
1461943828748:require(rjson)
1461943828801:require(RCurl)
1461943829023:# Pull most up to date Github repositories for relevant packages
1461943829023:# Not frequently updated; does not need to be run every time.
1461943829026:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461943829029:#install_github("pablobarbera/instaR/instaR")
1461943829030:# Required packags for plugging into Facebook API
1461943829030:#library(twitteR)
1461943829034:library(Rfacebook)
1461943829203:#library(instaR)
1461943829203:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1461943829205:# https://instagram.com/developer/authentication/?hl=en
1461943829205:setwd("~/")
1461943829206:getwd()
1461943829206:# Authorize with Facebook
1461943829207:#Using 'rFacebook' from Github
1461943829207:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461943840383:for (pmetric in 1:length(postmetrics)) {
1461943840384:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461943840386:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461943840387:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943840387:names(phold) <- c("id","name","period","title","description","value","variable")
1461943840388:} else {
1461943840389:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943840391:names(phold) <- c("id","name","period","title","description","value")
1461943840392:}
1461943840398:for (post in 1:nrow(postdata)) {
1461943840399:period <- "lifetime"
1461943840402:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461943840403:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461943840404:print('Not a Facebook Video.')
1461943840405:phold <- rbind(phold, NA)
1461943840408:next()
1461943840409:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461943840413:} else {
1461943840416:}
1461943840418:postpull <- NULL
1461943840419:attempt <- 1
1461943840420:while( is.null(postpull) && attempt <= 100) {
1461943840423:attempt <- attempt + 1
1461943840424:try(
1461943840428:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461943840429:,silent=TRUE
1461943840431:)
1461943840432:if (attempt > 10) {
1461943840435:print('Too many attempts. Skipping.')
1461943840436:postpull <- NULL
1461943840439:break
1461943840440:} else {
1461943840443:}
1461943840446:colnames(phold) <- names(postpull)
1461943840447:phold <- rbind(phold, postpull)
1461943840448:}
1461943840449:pholdstore <- phold
1461943840452:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461943840454:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461943840458:phold <- phold[-1,]
1461943840460:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461943840463:postmetrics <- postmetrics[-pmetric]
1461943840464:pmetric <- pmetric + 1
1461943840469:for (ptype in (1:length(psubtypes))) {
1461943840470:ptyphehold <- NA
1461943840473:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461943840476:postdata <- cbind(NA,postdata)
1461943840480:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461943840483:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461943840484:postmetrics <- c(postmetrics,psubtypes[ptype])
1461943840487:}
1461943840489:} else {
1461943840491:postdata <- cbind(NA,postdata)
1461943840492:postdata[1:length(phold$value),1] <- phold$value
1461943840495:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461943840496:}
1461943840499:cat("\n\n")
1461943840500:print(head(postdata))
1461943840502:cat("\n")
1461943840504:}
1461943850602:postdatastore <- postdata
1461943862898:postdatastore
1461943883742:postpull
1461943889024:phold
1461943902858:#postdata <- 0
1461943902858:postdata <- page[page$day > floor,]
1461943902861:postdata <- postdata[postdata$day < roof,]
1461943902862:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461943902864:# Name column for usability
1461943902865:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461943902870:rows <- nrow(postdata)
1461943902871:lpostmetrics <- postmetrics
1461943902873:#testlength <- 2
1461943902876:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461943902877:for (pmetric in 1:length(postmetrics)) {
1461943902877:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461943902878:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461943902878:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943902881:names(phold) <- c("id","name","period","title","description","value","variable")
1461943902882:} else {
1461943902885:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943902886:names(phold) <- c("id","name","period","title","description","value")
1461943902889:}
1461943902891:for (post in 1:nrow(postdata)) {
1461943902893:period <- "lifetime"
1461943902894:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461943902895:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461943902896:print('Not a Facebook Video.')
1461943902896:phold <- rbind(phold, NA)
1461943902897:next()
1461943902897:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461943902898:} else {
1461943902899:}
1461943902901:postpull <- NULL
1461943902901:attempt <- 1
1461943902905:while( is.null(postpull) && attempt <= 100) {
1461943902906:attempt <- attempt + 1
1461943902908:try(
1461943902909:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461943902912:,silent=TRUE
1461943902913:)
1461943902916:if (attempt > 10) {
1461943902917:print('Too many attempts. Skipping.')
1461943902920:postpull <- NULL
1461943902921:break
1461943902923:} else {
1461943902924:}
1461943902929:colnames(phold) <- names(postpull)
1461943902930:phold <- rbind(phold, postpull)
1461943902932:}
1461943902935:pholdstore <- phold
1461943902936:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461943902940:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461943902942:phold <- phold[-1,]
1461943902943:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461943902944:postmetrics <- postmetrics[-pmetric]
1461943902946:pmetric <- pmetric + 1
1461943902947:for (ptype in (1:length(psubtypes))) {
1461943902951:ptyphehold <- NA
1461943902951:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461943902955:postdata <- cbind(NA,postdata)
1461943902955:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461943902959:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461943902960:postmetrics <- c(postmetrics,psubtypes[ptype])
1461943902963:}
1461943902965:} else {
1461943902966:postdata <- cbind(NA,postdata)
1461943902967:postdata[1:length(phold$value),1] <- phold$value
1461943902970:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461943902970:}
1461943902975:cat("\n\n")
1461943902976:print(head(postdata))
1461943902978:cat("\n")
1461943902979:}
1461943913547:postdatastore <- postdata
1461943913548:postdata <- 0
1461943913550:postdata <- page[page$day > floor,]
1461943913551:postdata <- postdata[postdata$day < roof,]
1461943913554:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461943913555:# Name column for usability
1461943913558:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461943913560:rows <- nrow(postdata)
1461943913561:lpostmetrics <- postmetrics
1461943913562:#testlength <- 2
1461943913565:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461943913567:for (pmetric in 1:length(postmetrics)) {
1461943913569:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461943913570:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461943913572:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943913573:names(phold) <- c("id","name","period","title","description","value","variable")
1461943913576:} else {
1461943913578:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461943913580:names(phold) <- c("id","name","period","title","description","value")
1461943913581:}
1461943913584:for (post in 1:nrow(postdata)) {
1461943913585:period <- "lifetime"
1461943913585:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461943913586:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461943913587:print('Not a Facebook Video.')
1461943913587:phold <- rbind(phold, NA)
1461943913588:next()
1461943913589:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461943913590:} else {
1461943913590:}
1461943913595:postpull <- NULL
1461943913595:attempt <- 1
1461943913598:while( is.null(postpull) && attempt <= 100) {
1461943913599:attempt <- attempt + 1
1461943913601:try(
1461943913602:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461943913605:,silent=TRUE
1461943913607:)
1461943913609:if (attempt > 10) {
1461943913610:print('Too many attempts. Skipping.')
1461943913613:postpull <- NULL
1461943913614:break
1461943913616:} else {
1461943913617:}
1461943913622:colnames(phold) <- names(postpull)
1461943913622:phold <- rbind(phold, postpull)
1461943913627:}
1461943913628:pholdstore <- phold
1461943913630:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461943913631:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461943913634:phold <- phold[-1,]
1461943913636:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461943913639:postmetrics <- postmetrics[-pmetric]
1461943913641:pmetric <- pmetric + 1
1461943913644:for (ptype in (1:length(psubtypes))) {
1461943913645:ptyphehold <- NA
1461943913646:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461943913648:postdata <- cbind(NA,postdata)
1461943913651:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461943913653:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461943913654:postmetrics <- c(postmetrics,psubtypes[ptype])
1461943913655:}
1461943913660:} else {
1461943913660:postdata <- cbind(NA,postdata)
1461943913663:postdata[1:length(phold$value),1] <- phold$value
1461943913664:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461943913667:}
1461943913670:cat("\n\n")
1461943913671:print(head(postdata))
1461943913674:cat("\n")
1461943913675:}
1461943924045:postdatastore <- postdata
1461943982159:phold
1461943986414:colnames(phold) <- names(postpull)
1461943986563:phold <- rbind(phold, postpull)
1461943989517:phold
1461944000542:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461944000543:rows <- nrow(postdata)
1461944000545:lpostmetrics <- postmetrics
1461944000545:#testlength <- 2
1461944000549:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461944000550:for (pmetric in 1:length(postmetrics)) {
1461944000553:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461944000555:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461944000557:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944000557:names(phold) <- c("id","name","period","title","description","value","variable")
1461944000561:} else {
1461944000561:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944000565:names(phold) <- c("id","name","period","title","description","value")
1461944000568:}
1461944000569:for (post in 1:nrow(postdata)) {
1461944000572:period <- "lifetime"
1461944000573:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461944000576:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461944000577:print('Not a Facebook Video.')
1461944000580:phold <- rbind(phold, NA)
1461944000581:next()
1461944000584:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461944000587:} else {
1461944000588:}
1461944000592:postpull <- NULL
1461944000593:attempt <- 1
1461944000595:while( is.null(postpull) && attempt <= 50) {
1461944000596:attempt <- attempt + 1
1461944000599:try(
1461944000599:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461944000603:,silent=TRUE
1461944000603:)
1461944000606:if (attempt > 10) {
1461944000607:print('Too many attempts. Skipping.')
1461944000608:postpull <- NULL
1461944000609:break
1461944000609:} else {
1461944000610:print('Retrying.')
1461944000611:}
1461944000613:colnames(phold) <- names(postpull)
1461944000614:phold <- rbind(phold, postpull)
1461944000616:}
1461944000617:pholdstore <- phold
1461944000621:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461944000622:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461944000625:phold <- phold[-1,]
1461944000627:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461944000629:postmetrics <- postmetrics[-pmetric]
1461944000630:pmetric <- pmetric + 1
1461944000633:for (ptype in (1:length(psubtypes))) {
1461944000634:ptyphehold <- NA
1461944000637:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461944000638:postdata <- cbind(NA,postdata)
1461944000641:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461944000644:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461944000645:postmetrics <- c(postmetrics,psubtypes[ptype])
1461944000646:}
1461944000651:} else {
1461944000652:postdata <- cbind(NA,postdata)
1461944000654:postdata[1:length(phold$value),1] <- phold$value
1461944000655:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461944000655:}
1461944000659:cat("\n\n")
1461944000660:print(head(postdata))
1461944000663:cat("\n")
1461944000664:}
1461944098011:phold$value
1461944099114:phold
1461944106913:pholdstore
1461944115897:postpull
1461944120349:pmetric
1461944127127:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461944127129:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461944127130:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944127130:names(phold) <- c("id","name","period","title","description","value","variable")
1461944127131:} else {
1461944127132:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944127136:names(phold) <- c("id","name","period","title","description","value")
1461944127138:}
1461944133784:for (post in 1:nrow(postdata)) {
1461944138136:period <- "lifetime"
1461944138581:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461944139280:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461944139669:print('Not a Facebook Video.')
1461944139881:phold <- rbind(phold, NA)
1461944140016:next()
1461944140182:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461944140369:} else {
1461944140514:}
1461944141883:postpull <- NULL
1461944142087:attempt <- 1
1461944142591:while( is.null(postpull) && attempt <= 50) {
1461944142934:attempt <- attempt + 1
1461944143089:try(
1461944143254:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461944143403:#,silent=TRUE
1461944143566:)
1461944143757:if (attempt > 10) {
1461944143917:print('Too many attempts. Skipping.')
1461944144051:postpull <- NULL
1461944144204:break
1461944144370:} else {
1461944144550:print('Retrying.')
1461944144702:}
1461944145303:colnames(phold) <- names(postpull)
1461944145534:phold <- rbind(phold, postpull)
1461944145927:}
1461944203857:# Todo --------------------------------------------------------------------
1461944203858:# - Run script for all major brands
1461944203860:# - Create 'participation rate' function
1461944203860:# - Incorporate Twitter
1461944203861:# Setup -------------------------------------------------------------------
1461944203861:# Load and install all necessary packages for the script
1461944203865:# Required Packages for dataframes, forecasting, graphical visualization, and development
1461944203865:# Use 'install.packages()' if unavailable.
1461944203868:#library(zoo)
1461944203869:#library(forecast)
1461944203869:library(ggplot2)
1461944203869:#library(scales)
1461944203869:library(devtools)
1461944203870:library(compare)
1461944203870:library(xlsx)
1461944203874:require(httr)
1461944203875:require(rjson)
1461944203878:require(RCurl)
1461944203879:# Pull most up to date Github repositories for relevant packages
1461944203881:# Not frequently updated; does not need to be run every time.
1461944203882:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461944203882:#install_github("pablobarbera/instaR/instaR")
1461944203882:# Required packags for plugging into Facebook API
1461944203883:#library(twitteR)
1461944203886:library(Rfacebook)
1461944203887:#library(instaR)
1461944203887:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1461944203890:# https://instagram.com/developer/authentication/?hl=en
1461944203891:setwd("~/")
1461944203891:getwd()
1461944203892:# Authorize with Facebook
1461944203895:#Using 'rFacebook' from Github
1461944203895:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461944207041:# Functions ---------------------------------------------------------------
1461944207042:# User Functions
1461944207043:# Function to convert Facebook date format to R date format
1461944207044:format.facebook.date <- function(datestring) {
1461944207044:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461944207044:}
1461944207045:# Shift a vector up by an amount
1461944207045:shift <- function(x, n){
1461944207048:c(x[-(seq(n))], rep(NA, n))
1461944207049:}
1461944207052:# Get gcd from vector
1461944207053:gcd <- function(x,y) {
1461944207056:r <- x%%y;
1461944207056:return(ifelse(r, gcd(y, r), y))
1461944207056:}
1461944207057:# Inputs ------------------------------------------------------------------
1461944207058:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1461944207061:# Define data range for data (2012 is out of bounds for some metrics)
1461944207062:posts <- 5000
1461944207065:roof = Sys.Date() #"2015-12-31"
1461944207065:floor = "2016-04-01" #"2015-05-01"
1461944207068:range = seq(as.Date(floor), as.Date(roof), by="days")
1461944207070:## Access ftoken
1461944207072:# Use token from Facebook Graph API
1461944207072:# token generated here: https://developers.facebook.com/tools/explorer
1461944207073:# Lasts two hours, and must be changed depending on page and permissions
1461944207073:ftokens <- c(
1461944207074:#Sledgehammer Wine
1461944207077:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461944207077:#Chateau Saint Jean
1461944207078:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461944207078:#19 Crimes
1461944207078:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461944207079:#Beringer Vneyards
1461944207079:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461944207079:#100% Canadian Milk
1461944207080:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461944207080:#Lait 100% Canadien
1461944207080:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461944207081:#Recharge with Milk
1461944207081:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461944207081:#Misc
1461944207082:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461944207082:#Baron
1461944207082:"EAACEdEose0cBAGykbTGkQBxALbyuXlTrhCGQbHY8B120pXdJca4gv03JrZAaioZBNg9f0ZAFnjiXYt6AM2ZC8ZAFgvSXTnQXq4CJfiDz80Xb57svAUdtYIcNSi4kopiaWvA0KSS4vhBjdMeQrZAVnlebvsd15VegJnVhmvWpEqnQZDZD"
1461944207083:)
1461944207084:totalpagedata <- data.frame()
1461944207084:totalpostdata <- data.frame()
1461944207085:for (brand in 1:length(ftokens)) {
1461944207086:ftoken <- ftokens[brand]
1461944207089:## User Id
1461944207089:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461944207092:userid = "10153046308598756"
1461944207093:# Access public personal data; basically a ftoken test
1461944207094:me <- getUsers("me", token=ftoken)
1461944207094:print(me$name)
1461944207098:## Page Id
1461944207098:# Define which page will be used for the data collection. Change id's as necessary.
1461944207101:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461944207102:pageid = me$id
1461944207105:# Acquisition -------------------------------------------------------------
1461944207106:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461944207107:page <- getPage(pageid, ftoken, n = posts)
1461944207107:page.store <- page
1461944207109:# Create new vectors in dataset with datetime, month, and day formattiong
1461944207109:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944207110:page$datetime <- format.facebook.date(page$created_time)
1461944207111:page$month <- format(page$datetime, "%Y-%m")
1461944207112:page$day <- format(page$datetime, "%Y-%m-%d")
1461944207113:page$datetime <- as.Date(page$datetime)
1461944207114:#page$month <- as.Date(page$month)
1461944207115:page$day <- as.Date(page$day)
1461944207116:} else {
1461944207117:print("Date fields already exist.")
1461944207118:}
1461944207122:# Processing --------------------------------------------------------------
1461944207122:# Process data to clean dataset and augment it with more data than default fields.
1461944207125:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1461944207126:## Cleaning =================================
1461944207129:# Page and Post Datasets
1461944207130:# Split dataset into two for pages and post data
1461944207132:# Create initial null sets
1461944207132:pagedata <- 0
1461944207133:postdata <- 0
1461944226504:## Appending =================================
1461944226506:### Page Metrics #############################
1461944226507:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461944226508:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461944226512:# Page Metrics to automatically pull
1461944226513:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461944226516:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461944226518:pagemetrics <- metrics
1461944226521:# Prep dataset by breaking into weeks
1461944226522:pagedata <- 0
1461944226523:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461944226527:colnames(pagedata) = c("pageid", "page", "date")
1461944226528:pagedata$page = page$from_name[1]
1461944226530:pagedata$pageid = page$from_id[1]
1461944226532:divisor = 5
1461944226534:remainder = length(range)%%divisor;
1461944226536:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461944226539:weeks <- (nrow(pagedata)/5)-2
1461944226540:# Start Data Acquisition Loop
1461944226542:for (metric in 1:length(metrics)) {
1461944226544:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461944226548:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461944226550:period = 'lifetime'
1461944226551:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461944226553:period = 'day'
1461944226558:tempfloor = "2014-02-01"
1461944226559:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461944226561:if (floor < tempfloor) {
1461944226563:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461944226567:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461944226568:weeks = tempweeks
1461944226571:} else {}
1461944226571:} else {
1461944226572:period = 'day'
1461944226576:weeks <- (nrow(pagedata)/5)-2
1461944226577:}
1461944226581:hold <- matrix(0, nrow=0, ncol=7)
1461944226583:for (week in 0:weeks) {
1461944226584:end <- pagedata$date[(week*5)+1]
1461944226585:start <- pagedata$date[((week+1)*5)+1]
1461944226590:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461944226591:pull <- NULL
1461944226592:attempt <- 1
1461944226594:while(is.null(pull) && attempt <= 10) {
1461944226594:attempt <- attempt + 1
1461944226596:try(
1461944226598:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461944226600:)
1461944226603:if (is.null(pull)) {
1461944226604:print("Empty Pull. Re-attempting.")
1461944226607:print(paste("Attempt", attempt))
1461944226609:} else {
1461944226611:pull$datetime <- format.facebook.date(pull$end_time)
1461944226613:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461944226616:pull$datetime <- as.Date(pull$datetime)
1461944226617:#page$month <- as.Date(page$month)
1461944226622:pull$day <- as.Date(pull$day)
1461944226626:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461944226628:print("Found Facebook data matching date range. Storing values.")
1461944226629:} else {
1461944226630:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461944226634:print(paste("Attempt", attempt))
1461944226635:pull <- NULL}
1461944226640:if (attempt > 100) {
1461944226641:print('Too many attempts. Skipping.')
1461944226644:pull <- NULL
1461944226646:break
1461944226647:} else {}
1461944226649:}
1461944226654:pulllength <- ncol(pull)
1461944226656:rpull = pull[rev(rownames(pull)),]
1461944226658:hold <- rbind(hold,rpull)
1461944226661:rawhold <- hold
1461944226662:}
1461944226670:rhold = hold[rev(rownames(hold)),]
1461944226671:rhold$value = shift(rhold$value, 1)
1461944226676:hold = rhold[rev(rownames(rhold)),]
1461944226678:hold$value[1] = rawhold$value[1]
1461944226682:hours <- seq(0,23)
1461944226684:names(hours) <- paste("Hour", hours)
1461944226687:subtypes <- c('link','comment', 'like')
1461944226689:names(subtypes) <- c('Shares','Comments', 'Likes')
1461944226692:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461944226694:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461944226697:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461944226703:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461944226705:for (type in 1:length(subtypes)) {
1461944226706:typehold <- NA
1461944226710:typehold <- hold[hold$variable == subtypes[type],]
1461944226713:pagedata <- cbind(NA,pagedata)
1461944226715:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944226716:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461944226722:metrics <- c(metrics,subtypes[type])
1461944226724:}
1461944226729:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461944226732:for (demographic in 1:length(demographics)) {
1461944226737:print(names(demographics[demographic]))
1461944226740:typehold <- NA
1461944226741:typehold <- hold[hold$variable == demographics[demographic],]
1461944226745:typehold[typehold$value <= 10,] <- NA
1461944226751:pagedata <- cbind(NA,pagedata)
1461944226754:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944226755:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461944226757:metrics <- c(metrics,demographics[demographic])
1461944226759:}
1461944226762:} else if ((metrics)[metric] == 'page_fans_online') {
1461944226767:for (hour in 1:length(hours)) {
1461944226771:typehold <- NA
1461944226773:typehold <- hold[hold$variable == hours[hour],]
1461944226778:pagedata <- cbind(NA,pagedata)
1461944226781:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944226783:colnames(pagedata)[1] = paste("hour",hours[hour])
1461944226788:metrics <- c(metrics,hours[hour])
1461944226790:}
1461944226792:} else {
1461944226793:pagedata <- cbind(NA,pagedata)
1461944226795:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461944226798:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461944226804:}
1461944226809:cat("\n\n")
1461944226812:print(head(pagedata))
1461944226814:cat("\n")
1461944226820:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461944226821:break
1461944226824:} else {
1461944226827:}
1461944226835:pagedata.tempstore <- pagedata
1461944243585:}
1461944262117:## Cleaning =================================
1461944262118:# Page and Post Datasets
1461944262119:# Split dataset into two for pages and post data
1461944262120:# Create initial null sets
1461944262123:pagedata <- 0
1461944262125:postdata <- 0
1461944262128:## Appending =================================
1461944262130:### Page Metrics #############################
1461944262131:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461944262131:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461944262135:# Page Metrics to automatically pull
1461944262136:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461944262139:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461944262139:pagemetrics <- metrics
1461944262143:# Prep dataset by breaking into weeks
1461944262143:pagedata <- 0
1461944262146:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461944262152:colnames(pagedata) = c("pageid", "page", "date")
1461944262153:pagedata$page = page$from_name[1]
1461944262155:pagedata$pageid = page$from_id[1]
1461944262156:divisor = 5
1461944262158:remainder = length(range)%%divisor;
1461944262159:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461944262160:weeks <- (nrow(pagedata)/5)-2
1461944262161:# Start Data Acquisition Loop
1461944262163:for (metric in 1:length(metrics)) {
1461944262164:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461944262164:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461944262167:period = 'lifetime'
1461944262168:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461944262168:period = 'day'
1461944262169:tempfloor = "2014-02-01"
1461944262170:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461944262173:if (floor < tempfloor) {
1461944262174:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461944262177:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461944262177:weeks = tempweeks
1461944262181:} else {}
1461944262182:} else {
1461944262185:period = 'day'
1461944262188:weeks <- (nrow(pagedata)/5)-2
1461944262188:}
1461944262189:hold <- matrix(0, nrow=0, ncol=7)
1461944262191:for (week in 0:weeks) {
1461944262193:end <- pagedata$date[(week*5)+1]
1461944262194:start <- pagedata$date[((week+1)*5)+1]
1461944262197:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461944262199:pull <- NULL
1461944262200:attempt <- 1
1461944262201:while(is.null(pull) && attempt <= 10) {
1461944262202:attempt <- attempt + 1
1461944262202:try(
1461944262203:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461944262204:)
1461944262208:if (is.null(pull)) {
1461944262209:print("Empty Pull. Re-attempting.")
1461944262212:print(paste("Attempt", attempt))
1461944262213:} else {
1461944262216:pull$datetime <- format.facebook.date(pull$end_time)
1461944262217:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461944262218:pull$datetime <- as.Date(pull$datetime)
1461944262218:#page$month <- as.Date(page$month)
1461944262219:pull$day <- as.Date(pull$day)
1461944262220:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461944262221:print("Found Facebook data matching date range. Storing values.")
1461944262224:} else {
1461944262225:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461944262228:print(paste("Attempt", attempt))
1461944262229:pull <- NULL}
1461944262233:if (attempt > 100) {
1461944262234:print('Too many attempts. Skipping.')
1461944262236:pull <- NULL
1461944262238:break
1461944262240:} else {}
1461944262240:}
1461944262242:pulllength <- ncol(pull)
1461944262244:rpull = pull[rev(rownames(pull)),]
1461944262247:hold <- rbind(hold,rpull)
1461944262248:rawhold <- hold
1461944262250:}
1461944262253:rhold = hold[rev(rownames(hold)),]
1461944262254:rhold$value = shift(rhold$value, 1)
1461944262254:hold = rhold[rev(rownames(rhold)),]
1461944262259:hold$value[1] = rawhold$value[1]
1461944262261:hours <- seq(0,23)
1461944262263:names(hours) <- paste("Hour", hours)
1461944262266:subtypes <- c('link','comment', 'like')
1461944262267:names(subtypes) <- c('Shares','Comments', 'Likes')
1461944262272:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461944262273:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461944262276:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461944262280:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461944262283:for (type in 1:length(subtypes)) {
1461944262284:typehold <- NA
1461944262287:typehold <- hold[hold$variable == subtypes[type],]
1461944262289:pagedata <- cbind(NA,pagedata)
1461944262291:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944262292:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461944262294:metrics <- c(metrics,subtypes[type])
1461944262295:}
1461944262301:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461944262305:for (demographic in 1:length(demographics)) {
1461944262308:print(names(demographics[demographic]))
1461944262311:typehold <- NA
1461944262313:typehold <- hold[hold$variable == demographics[demographic],]
1461944262316:typehold[typehold$value <= 10,] <- NA
1461944262318:pagedata <- cbind(NA,pagedata)
1461944262320:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944262322:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461944262325:metrics <- c(metrics,demographics[demographic])
1461944262327:}
1461944262332:} else if ((metrics)[metric] == 'page_fans_online') {
1461944262335:for (hour in 1:length(hours)) {
1461944262337:typehold <- NA
1461944262340:typehold <- hold[hold$variable == hours[hour],]
1461944262344:pagedata <- cbind(NA,pagedata)
1461944262345:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944262347:colnames(pagedata)[1] = paste("hour",hours[hour])
1461944262350:metrics <- c(metrics,hours[hour])
1461944262351:}
1461944262354:} else {
1461944262356:pagedata <- cbind(NA,pagedata)
1461944262359:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461944262361:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461944262365:}
1461944262369:cat("\n\n")
1461944262372:print(head(pagedata))
1461944262375:cat("\n")
1461944262378:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461944262380:break
1461944262383:} else {
1461944262384:}
1461944262414:pagedata.tempstore <- pagedata
1461944262415:#Page Metrics to remove because they have subtypes
1461944262416:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1461944262417:# Page Metrics to manually create
1461944262418:metrics <- c(metrics,"organic reach")
1461944262421:names(metrics)[length(metrics)] <- c("Organic Reach")
1461944262421:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1461944262426:colnames(pagedata)[1] = "organic reach"
1461944262427:# Final dataset formatting
1461944262429:pagedatastore <- pagedata
1461944262429:#pagedata <- pagedatastore
1461944262429:pagedata2 <- pagedata
1461944262430:# reorder and null NA's for excel
1461944262430:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1461944262434:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1461944262435:#pagedata2[is.na(pagedata2)] <- ""
1461944262437:#pagedata2[pagedata2 == 0] <- ""
1461944262438:# store final dataset
1461944262438:pagedata <- pagedata2
1461944297796:### Post Metrics #############################
1461944297797:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1461944297799:# Most are automated, and will continue to retry through errors until a value is found.
1461944297799:# Manual modifications are run after initial data acquisition.
1461944297799:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1461944297800:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1461944297801:# Populate sets with values from pull
1461944297804:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944297804:page$datetime <- format.facebook.date(page$created_time)
1461944297805:page$month <- format(page$datetime, "%Y-%m")
1461944297805:page$day <- format(page$datetime, "%Y-%m-%d")
1461944297806:page$datetime <- as.Date(page$datetime)
1461944297806:#page$month <- as.Date(page$month)
1461944297806:page$day <- as.Date(page$day)
1461944297807:} else {
1461944297807:print("Date fields already exist for Post Data.")
1461944297807:}
1461944297808:postdata <- 0
1461944297809:postdata <- page[page$day > floor,]
1461944297813:postdata <- postdata[postdata$day < roof,]
1461944297814:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461944297815:# Name column for usability
1461944297815:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461944297816:rows <- nrow(postdata)
1461944297816:lpostmetrics <- postmetrics
1461944297817:#testlength <- 2
1461944297817:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461944297821:for (pmetric in 1:length(postmetrics)) {
1461944297821:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461944297824:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461944297825:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944297828:names(phold) <- c("id","name","period","title","description","value","variable")
1461944297829:} else {
1461944297832:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944297832:names(phold) <- c("id","name","period","title","description","value")
1461944297836:}
1461944297837:for (post in 1:nrow(postdata)) {
1461944297840:period <- "lifetime"
1461944297841:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461944297844:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461944297845:print('Not a Facebook Video.')
1461944297848:phold <- rbind(phold, NA)
1461944297848:next()
1461944297851:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461944297852:} else {
1461944297855:}
1461944297857:postpull <- NULL
1461944297859:attempt <- 1
1461944297860:while( is.null(postpull) && attempt <= 50) {
1461944297863:attempt <- attempt + 1
1461944297864:try(
1461944297865:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461944297866:#,silent=TRUE
1461944297869:)
1461944297870:if (attempt > 10) {
1461944297873:print('Too many attempts. Skipping.')
1461944297874:postpull <- NULL
1461944297877:break
1461944297878:} else {
1461944297881:print('Retrying.')
1461944297882:}
1461944297884:colnames(phold) <- names(postpull)
1461944297884:phold <- rbind(phold, postpull)
1461944297885:}
1461944297885:pholdstore <- phold
1461944297886:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461944297887:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461944297891:phold <- phold[-1,]
1461944297892:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461944297894:postmetrics <- postmetrics[-pmetric]
1461944297895:pmetric <- pmetric + 1
1461944297899:for (ptype in (1:length(psubtypes))) {
1461944297900:ptyphehold <- NA
1461944297902:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461944297904:postdata <- cbind(NA,postdata)
1461944297906:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461944297907:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461944297910:postmetrics <- c(postmetrics,psubtypes[ptype])
1461944297911:}
1461944297915:} else {
1461944297917:postdata <- cbind(NA,postdata)
1461944297922:postdata[1:length(phold$value),1] <- phold$value
1461944297924:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461944297925:}
1461944297930:cat("\n\n")
1461944297931:print(head(postdata))
1461944297932:cat("\n")
1461944297936:}
1461944297995:postdatastore <- postdata
1461944325785:.0 #####################
1461944325786:# Summary -----------------------------------------------------------------
1461944325788:# Todo --------------------------------------------------------------------
1461944325788:# - Run script for all major brands
1461944325791:# - Create 'participation rate' function
1461944325791:# - Incorporate Twitter
1461944325792:# Setup -------------------------------------------------------------------
1461944325792:# Load and install all necessary packages for the script
1461944325792:# Required Packages for dataframes, forecasting, graphical visualization, and development
1461944325792:# Use 'install.packages()' if unavailable.
1461944325793:#library(zoo)
1461944325793:#library(forecast)
1461944325793:library(ggplot2)
1461944326077:#library(scales)
1461944326077:library(devtools)
1461944326142:library(compare)
1461944326173:library(xlsx)
1461944327233:require(httr)
1461944327269:require(rjson)
1461944327310:require(RCurl)
1461944327504:# Pull most up to date Github repositories for relevant packages
1461944327505:# Not frequently updated; does not need to be run every time.
1461944327512:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461944327514:#install_github("pablobarbera/instaR/instaR")
1461944327517:# Required packags for plugging into Facebook API
1461944327518:#library(twitteR)
1461944327521:library(Rfacebook)
1461944327635:#library(instaR)
1461944327635:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1461944327637:# https://instagram.com/developer/authentication/?hl=en
1461944327638:setwd("~/")
1461944327638:getwd()
1461944327639:# Authorize with Facebook
1461944327642:#Using 'rFacebook' from Github
1461944327642:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461944330417:# Functions ---------------------------------------------------------------
1461944330417:# User Functions
1461944330419:# Function to convert Facebook date format to R date format
1461944330419:format.facebook.date <- function(datestring) {
1461944330420:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461944330421:}
1461944330424:# Shift a vector up by an amount
1461944330425:shift <- function(x, n){
1461944330428:c(x[-(seq(n))], rep(NA, n))
1461944330429:}
1461944330434:# Get gcd from vector
1461944330434:gcd <- function(x,y) {
1461944330436:r <- x%%y;
1461944330437:return(ifelse(r, gcd(y, r), y))
1461944330440:}
1461944330441:# Inputs ------------------------------------------------------------------
1461944330444:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1461944330444:# Define data range for data (2012 is out of bounds for some metrics)
1461944330445:posts <- 5000
1461944330448:roof = Sys.Date() #"2015-12-31"
1461944330449:floor = "2016-04-01" #"2015-05-01"
1461944330452:range = seq(as.Date(floor), as.Date(roof), by="days")
1461944330454:## Access ftoken
1461944330455:# Use token from Facebook Graph API
1461944330455:# token generated here: https://developers.facebook.com/tools/explorer
1461944330456:# Lasts two hours, and must be changed depending on page and permissions
1461944330456:ftokens <- c(
1461944330457:#Sledgehammer Wine
1461944330457:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461944330458:#Chateau Saint Jean
1461944330458:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461944330459:#19 Crimes
1461944330459:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461944330459:#Beringer Vneyards
1461944330460:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461944330460:#100% Canadian Milk
1461944330460:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461944330460:#Lait 100% Canadien
1461944330461:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461944330461:#Recharge with Milk
1461944330462:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461944330462:#Misc
1461944330462:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461944330463:#Baron
1461944330463:"EAACEdEose0cBAGykbTGkQBxALbyuXlTrhCGQbHY8B120pXdJca4gv03JrZAaioZBNg9f0ZAFnjiXYt6AM2ZC8ZAFgvSXTnQXq4CJfiDz80Xb57svAUdtYIcNSi4kopiaWvA0KSS4vhBjdMeQrZAVnlebvsd15VegJnVhmvWpEqnQZDZD"
1461944330463:)
1461944330464:totalpagedata <- data.frame()
1461944330465:totalpostdata <- data.frame()
1461944330468:for (brand in 1:length(ftokens)) {
1461944330469:ftoken <- ftokens[brand]
1461944330471:## User Id
1461944330472:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461944330475:userid = "10153046308598756"
1461944330476:# Access public personal data; basically a ftoken test
1461944330476:me <- getUsers("me", token=ftoken)
1461944330480:print(me$name)
1461944330483:## Page Id
1461944330483:# Define which page will be used for the data collection. Change id's as necessary.
1461944330484:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461944330484:pageid = me$id
1461944330485:# Acquisition -------------------------------------------------------------
1461944330486:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461944330487:page <- getPage(pageid, ftoken, n = posts)
1461944330487:page.store <- page
1461944330490:# Create new vectors in dataset with datetime, month, and day formattiong
1461944330491:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944330494:page$datetime <- format.facebook.date(page$created_time)
1461944330494:page$month <- format(page$datetime, "%Y-%m")
1461944330495:page$day <- format(page$datetime, "%Y-%m-%d")
1461944330495:page$datetime <- as.Date(page$datetime)
1461944330496:#page$month <- as.Date(page$month)
1461944330499:page$day <- as.Date(page$day)
1461944330502:} else {
1461944330503:print("Date fields already exist.")
1461944330506:}
1461944330507:# Processing --------------------------------------------------------------
1461944330510:# Process data to clean dataset and augment it with more data than default fields.
1461944330511:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1461944330514:## Cleaning =================================
1461944330515:# Page and Post Datasets
1461944330518:# Split dataset into two for pages and post data
1461944330518:# Create initial null sets
1461944330519:pagedata <- 0
1461944330521:postdata <- 0
1461944330522:## Appending =================================
1461944330523:### Page Metrics #############################
1461944330524:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461944330525:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461944330526:# Page Metrics to automatically pull
1461944330526:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461944330526:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461944330527:pagemetrics <- metrics
1461944330528:# Prep dataset by breaking into weeks
1461944330529:pagedata <- 0
1461944330529:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461944330531:colnames(pagedata) = c("pageid", "page", "date")
1461944330532:pagedata$page = page$from_name[1]
1461944330532:pagedata$pageid = page$from_id[1]
1461944330537:divisor = 5
1461944330538:remainder = length(range)%%divisor;
1461944330541:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461944330542:weeks <- (nrow(pagedata)/5)-2
1461944330544:# Start Data Acquisition Loop
1461944330545:for (metric in 1:length(metrics)) {
1461944330548:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461944330550:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461944330552:period = 'lifetime'
1461944330552:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461944330555:period = 'day'
1461944330557:tempfloor = "2014-02-01"
1461944330559:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461944330561:if (floor < tempfloor) {
1461944330563:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461944330565:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461944330567:weeks = tempweeks
1461944330571:} else {}
1461944330572:} else {
1461944330574:period = 'day'
1461944330575:weeks <- (nrow(pagedata)/5)-2
1461944330577:}
1461944330578:hold <- matrix(0, nrow=0, ncol=7)
1461944330584:for (week in 0:weeks) {
1461944330585:end <- pagedata$date[(week*5)+1]
1461944330586:start <- pagedata$date[((week+1)*5)+1]
1461944330588:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461944330590:pull <- NULL
1461944330592:attempt <- 1
1461944330594:while(is.null(pull) && attempt <= 10) {
1461944330595:attempt <- attempt + 1
1461944330597:try(
1461944330599:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461944330600:)
1461944330605:if (is.null(pull)) {
1461944330606:print("Empty Pull. Re-attempting.")
1461944330609:print(paste("Attempt", attempt))
1461944330610:} else {
1461944330612:pull$datetime <- format.facebook.date(pull$end_time)
1461944330613:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461944330617:pull$datetime <- as.Date(pull$datetime)
1461944330618:#page$month <- as.Date(page$month)
1461944330620:pull$day <- as.Date(pull$day)
1461944330621:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461944330624:print("Found Facebook data matching date range. Storing values.")
1461944330625:} else {
1461944330628:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461944330630:print(paste("Attempt", attempt))
1461944330632:pull <- NULL}
1461944330634:if (attempt > 100) {
1461944330637:print('Too many attempts. Skipping.')
1461944330639:pull <- NULL
1461944330641:break
1461944330643:} else {}
1461944330644:}
1461944330646:pulllength <- ncol(pull)
1461944330649:rpull = pull[rev(rownames(pull)),]
1461944330651:hold <- rbind(hold,rpull)
1461944330653:rawhold <- hold
1461944330655:}
1461944330662:rhold = hold[rev(rownames(hold)),]
1461944330664:rhold$value = shift(rhold$value, 1)
1461944330668:hold = rhold[rev(rownames(rhold)),]
1461944330670:hold$value[1] = rawhold$value[1]
1461944330675:hours <- seq(0,23)
1461944330677:names(hours) <- paste("Hour", hours)
1461944330680:subtypes <- c('link','comment', 'like')
1461944330682:names(subtypes) <- c('Shares','Comments', 'Likes')
1461944330685:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461944330687:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461944330691:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461944330698:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461944330700:for (type in 1:length(subtypes)) {
1461944330701:typehold <- NA
1461944330702:typehold <- hold[hold$variable == subtypes[type],]
1461944330706:pagedata <- cbind(NA,pagedata)
1461944330707:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944330710:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461944330714:metrics <- c(metrics,subtypes[type])
1461944330717:}
1461944330723:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461944330727:for (demographic in 1:length(demographics)) {
1461944330729:print(names(demographics[demographic]))
1461944330732:typehold <- NA
1461944330734:typehold <- hold[hold$variable == demographics[demographic],]
1461944330736:typehold[typehold$value <= 10,] <- NA
1461944330741:pagedata <- cbind(NA,pagedata)
1461944330742:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944330747:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461944330753:metrics <- c(metrics,demographics[demographic])
1461944330755:}
1461944330758:} else if ((metrics)[metric] == 'page_fans_online') {
1461944330760:for (hour in 1:length(hours)) {
1461944330763:typehold <- NA
1461944330765:typehold <- hold[hold$variable == hours[hour],]
1461944330769:pagedata <- cbind(NA,pagedata)
1461944330772:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944330775:colnames(pagedata)[1] = paste("hour",hours[hour])
1461944330780:metrics <- c(metrics,hours[hour])
1461944330782:}
1461944330783:} else {
1461944330785:pagedata <- cbind(NA,pagedata)
1461944330786:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461944330790:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461944330793:}
1461944330796:cat("\n\n")
1461944330798:print(head(pagedata))
1461944330800:cat("\n")
1461944330803:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461944330806:break
1461944330809:} else {
1461944330812:}
1461944330820:pagedata.tempstore <- pagedata
1461944330826:#Page Metrics to remove because they have subtypes
1461944330827:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1461944330831:# Page Metrics to manually create
1461944330833:metrics <- c(metrics,"organic reach")
1461944330836:names(metrics)[length(metrics)] <- c("Organic Reach")
1461944330843:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1461944330847:colnames(pagedata)[1] = "organic reach"
1461944330852:# Final dataset formatting
1461944330853:pagedatastore <- pagedata
1461944330857:#pagedata <- pagedatastore
1461944330861:pagedata2 <- pagedata
1461944330867:# reorder and null NA's for excel
1461944330870:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1461944330933:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1461944330936:#pagedata2[is.na(pagedata2)] <- ""
1461944330938:#pagedata2[pagedata2 == 0] <- ""
1461944330945:# store final dataset
1461944330949:pagedata <- pagedata2
1461944354135:[]
1461944404140:# Page and Post Datasets
1461944404141:# Split dataset into two for pages and post data
1461944404143:# Create initial null sets
1461944404143:pagedata <- 0
1461944404144:postdata <- 0
1461944404148:## Appending =================================
1461944404148:### Page Metrics #############################
1461944404151:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461944404151:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461944404155:# Page Metrics to automatically pull
1461944404156:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461944404158:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461944404159:pagemetrics <- metrics
1461944404159:# Prep dataset by breaking into weeks
1461944404160:pagedata <- 0
1461944404160:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461944404162:colnames(pagedata) = c("pageid", "page", "date")
1461944404162:pagedata$page = page$from_name[1]
1461944404164:pagedata$pageid = page$from_id[1]
1461944404165:divisor = 5
1461944404168:remainder = length(range)%%divisor;
1461944404168:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461944404169:weeks <- (nrow(pagedata)/5)-2
1461944409248:# Start Data Acquisition Loop
1461944409248:for (metric in 1:length(metrics)) {
1461944409250:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461944409251:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461944409254:period = 'lifetime'
1461944409254:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461944409255:period = 'day'
1461944409256:tempfloor = "2014-02-01"
1461944409258:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461944409259:if (floor < tempfloor) {
1461944409260:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461944409263:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461944409264:weeks = tempweeks
1461944409267:} else {}
1461944409268:} else {
1461944409271:period = 'day'
1461944409271:weeks <- (nrow(pagedata)/5)-2
1461944409275:}
1461944409278:hold <- matrix(0, nrow=0, ncol=7)
1461944409280:for (week in 0:weeks) {
1461944409282:end <- pagedata$date[(week*5)+1]
1461944409283:start <- pagedata$date[((week+1)*5)+1]
1461944409286:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461944409287:pull <- NULL
1461944409289:attempt <- 1
1461944409290:while(is.null(pull) && attempt <= 10) {
1461944409293:attempt <- attempt + 1
1461944409294:try(
1461944409299:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461944409304:)
1461944409305:if (is.null(pull)) {
1461944409308:print("Empty Pull. Re-attempting.")
1461944409311:print(paste("Attempt", attempt))
1461944409311:} else {
1461944409315:pull$datetime <- format.facebook.date(pull$end_time)
1461944409316:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461944409319:pull$datetime <- as.Date(pull$datetime)
1461944409320:#page$month <- as.Date(page$month)
1461944409322:pull$day <- as.Date(pull$day)
1461944409324:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461944409326:print("Found Facebook data matching date range. Storing values.")
1461944409327:} else {
1461944409330:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461944409331:print(paste("Attempt", attempt))
1461944409333:pull <- NULL}
1461944409335:if (attempt > 100) {
1461944409338:print('Too many attempts. Skipping.')
1461944409339:pull <- NULL
1461944409342:break
1461944409343:} else {}
1461944409346:}
1461944409347:pulllength <- ncol(pull)
1461944409349:rpull = pull[rev(rownames(pull)),]
1461944409350:hold <- rbind(hold,rpull)
1461944409352:rawhold <- hold
1461944409353:}
1461944409361:rhold = hold[rev(rownames(hold)),]
1461944409362:rhold$value = shift(rhold$value, 1)
1461944409363:hold = rhold[rev(rownames(rhold)),]
1461944409364:hold$value[1] = rawhold$value[1]
1461944409369:hours <- seq(0,23)
1461944409371:names(hours) <- paste("Hour", hours)
1461944409373:subtypes <- c('link','comment', 'like')
1461944409377:names(subtypes) <- c('Shares','Comments', 'Likes')
1461944409380:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461944409381:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461944409383:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461944409385:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461944409389:for (type in 1:length(subtypes)) {
1461944409391:typehold <- NA
1461944409392:typehold <- hold[hold$variable == subtypes[type],]
1461944409394:pagedata <- cbind(NA,pagedata)
1461944409397:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944409398:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461944409402:metrics <- c(metrics,subtypes[type])
1461944409403:}
1461944409407:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461944409409:for (demographic in 1:length(demographics)) {
1461944409413:print(names(demographics[demographic]))
1461944409416:typehold <- NA
1461944409417:typehold <- hold[hold$variable == demographics[demographic],]
1461944409420:typehold[typehold$value <= 10,] <- NA
1461944409424:pagedata <- cbind(NA,pagedata)
1461944409426:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944409428:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461944409432:metrics <- c(metrics,demographics[demographic])
1461944409433:}
1461944409436:} else if ((metrics)[metric] == 'page_fans_online') {
1461944409440:for (hour in 1:length(hours)) {
1461944409444:typehold <- NA
1461944409446:typehold <- hold[hold$variable == hours[hour],]
1461944409450:pagedata <- cbind(NA,pagedata)
1461944409453:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944409455:colnames(pagedata)[1] = paste("hour",hours[hour])
1461944409458:metrics <- c(metrics,hours[hour])
1461944409459:}
1461944409463:} else {
1461944409465:pagedata <- cbind(NA,pagedata)
1461944409467:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461944409470:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461944409473:}
1461944409477:cat("\n\n")
1461944409479:print(head(pagedata))
1461944409481:cat("\n")
1461944409486:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461944409489:break
1461944409491:} else {
1461944409494:}
1461944457099:pagedata.tempstore <- pagedata
1461944457100:#Page Metrics to remove because they have subtypes
1461944457102:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1461944457103:# Page Metrics to manually create
1461944457106:metrics <- c(metrics,"organic reach")
1461944457106:names(metrics)[length(metrics)] <- c("Organic Reach")
1461944457108:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1461944457112:colnames(pagedata)[1] = "organic reach"
1461944465514:postdata
1461944468278:pagedata
1461944495803:### Post Metrics #############################
1461944495803:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1461944495805:# Most are automated, and will continue to retry through errors until a value is found.
1461944495806:# Manual modifications are run after initial data acquisition.
1461944495810:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1461944495810:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1461944495814:# Populate sets with values from pull
1461944495816:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944495817:page$datetime <- format.facebook.date(page$created_time)
1461944495818:page$month <- format(page$datetime, "%Y-%m")
1461944495821:page$day <- format(page$datetime, "%Y-%m-%d")
1461944495822:page$datetime <- as.Date(page$datetime)
1461944495826:#page$month <- as.Date(page$month)
1461944495828:page$day <- as.Date(page$day)
1461944495829:} else {
1461944495830:print("Date fields already exist for Post Data.")
1461944495830:}
1461944495834:postdata <- 0
1461944495834:postdata <- page[page$day > floor,]
1461944495837:postdata <- postdata[postdata$day < roof,]
1461944495838:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461944495841:# Name column for usability
1461944495841:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461944495845:rows <- nrow(postdata)
1461944495845:lpostmetrics <- postmetrics
1461944495846:#testlength <- 2
1461944495846:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461944495847:for (pmetric in 1:length(postmetrics)) {
1461944495847:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461944495848:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461944495849:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944495849:names(phold) <- c("id","name","period","title","description","value","variable")
1461944495850:} else {
1461944495851:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944495851:names(phold) <- c("id","name","period","title","description","value")
1461944495854:}
1461944495856:for (post in 1:nrow(postdata)) {
1461944495859:period <- "lifetime"
1461944495860:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461944495863:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461944495863:print('Not a Facebook Video.')
1461944495866:phold <- rbind(phold, NA)
1461944495867:next()
1461944495870:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461944495870:} else {
1461944495874:}
1461944495875:postpull <- NULL
1461944495877:attempt <- 1
1461944495879:while( is.null(postpull) && attempt <= 50) {
1461944495881:attempt <- attempt + 1
1461944495882:try(
1461944495885:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461944495886:#,silent=TRUE
1461944495887:)
1461944495888:if (attempt > 10) {
1461944495889:print('Too many attempts. Skipping.')
1461944495890:postpull <- NULL
1461944495890:break
1461944495891:} else {
1461944495892:print('Retrying.')
1461944495896:}
1461944495898:colnames(phold) <- names(postpull)
1461944495899:phold <- rbind(phold, postpull)
1461944495900:}
1461944495903:pholdstore <- phold
1461944495905:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461944495907:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461944495908:phold <- phold[-1,]
1461944495909:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461944495913:postmetrics <- postmetrics[-pmetric]
1461944495914:pmetric <- pmetric + 1
1461944495918:for (ptype in (1:length(psubtypes))) {
1461944495919:ptyphehold <- NA
1461944495920:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461944495922:postdata <- cbind(NA,postdata)
1461944495924:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461944495927:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461944495928:postmetrics <- c(postmetrics,psubtypes[ptype])
1461944495932:}
1461944495935:} else {
1461944495936:postdata <- cbind(NA,postdata)
1461944495939:postdata[1:length(phold$value),1] <- phold$value
1461944495940:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461944495946:}
1461944495949:cat("\n\n")
1461944495950:print(head(postdata))
1461944495952:cat("\n")
1461944495953:}
1461944503994:postdatastore <- postdata
1461944503995:# Post Metrics to manually create
1461944503996:postmetrics <- c(postmetrics,"organic reach")
1461944503997:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1461944504001:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1461944504005:colnames(postdata)[1] = "organic reach"
1461944504007:# Final dataset formatting
1461944504008:#postdatastore <- postdata
1461944504008:#postdata <- postdatastore
1461944504009:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1461944504009:# reorder and null NA's for Excel
1461944504013:postdata2 <- postdata
1461944504014:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1461944504017:postdata2[is.na(postdata2)] <- ""
1461944504018:postdata2[postdata2 == 0] <- ""
1461944504022:# store final dataset
1461944504022:postdata <- as.data.frame(postdata2)
1461944544058:pagedata
1461944566716:## Facebook Query Injector #####
1461944566717:## Mirum Agency ################
1461944566719:## By Vivek Menon ##############
1461944566719:## v.1.5.0 #####################
1461944566723:# Summary -----------------------------------------------------------------
1461944566724:# Todo --------------------------------------------------------------------
1461944566727:# - Run script for all major brands
1461944566727:# - Create 'participation rate' function
1461944566730:# - Incorporate Twitter
1461944566731:# Setup -------------------------------------------------------------------
1461944566731:# Load and install all necessary packages for the script
1461944566732:# Required Packages for dataframes, forecasting, graphical visualization, and development
1461944566733:# Use 'install.packages()' if unavailable.
1461944566733:#library(zoo)
1461944566733:#library(forecast)
1461944566733:library(ggplot2)
1461944566734:#library(scales)
1461944566734:library(devtools)
1461944566734:library(compare)
1461944566735:library(xlsx)
1461944566736:require(httr)
1461944566737:require(rjson)
1461944566739:require(RCurl)
1461944566740:# Pull most up to date Github repositories for relevant packages
1461944566743:# Not frequently updated; does not need to be run every time.
1461944566743:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461944566744:#install_github("pablobarbera/instaR/instaR")
1461944566744:# Required packags for plugging into Facebook API
1461944566744:#library(twitteR)
1461944566745:library(Rfacebook)
1461944566745:#library(instaR)
1461944566745:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1461944566749:# https://instagram.com/developer/authentication/?hl=en
1461944566749:setwd("~/")
1461944566750:getwd()
1461944566750:# Authorize with Facebook
1461944566751:#Using 'rFacebook' from Github
1461944566754:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461944570186:# Functions ---------------------------------------------------------------
1461944570187:# User Functions
1461944570188:# Function to convert Facebook date format to R date format
1461944570188:format.facebook.date <- function(datestring) {
1461944570188:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461944570189:}
1461944570190:# Shift a vector up by an amount
1461944570190:shift <- function(x, n){
1461944570190:c(x[-(seq(n))], rep(NA, n))
1461944570191:}
1461944570194:# Get gcd from vector
1461944570195:gcd <- function(x,y) {
1461944570198:r <- x%%y;
1461944570199:return(ifelse(r, gcd(y, r), y))
1461944570199:}
1461944570200:# Inputs ------------------------------------------------------------------
1461944570200:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1461944570203:# Define data range for data (2012 is out of bounds for some metrics)
1461944570204:posts <- 5000
1461944570204:roof = Sys.Date() #"2015-12-31"
1461944570205:floor = "2016-04-24" #"2015-05-01"
1461944570205:range = seq(as.Date(floor), as.Date(roof), by="days")
1461944570207:## Access ftoken
1461944570207:# Use token from Facebook Graph API
1461944570209:# token generated here: https://developers.facebook.com/tools/explorer
1461944570209:# Lasts two hours, and must be changed depending on page and permissions
1461944570210:ftokens <- c(
1461944570210:#Sledgehammer Wine
1461944570213:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461944570214:#Chateau Saint Jean
1461944570214:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461944570214:#19 Crimes
1461944570215:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461944570215:#Beringer Vneyards
1461944570215:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461944570216:#100% Canadian Milk
1461944570216:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461944570216:#Lait 100% Canadien
1461944570217:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461944570217:#Recharge with Milk
1461944570217:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461944570218:#Misc
1461944570218:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461944570218:#Baron
1461944570219:"EAACEdEose0cBAGykbTGkQBxALbyuXlTrhCGQbHY8B120pXdJca4gv03JrZAaioZBNg9f0ZAFnjiXYt6AM2ZC8ZAFgvSXTnQXq4CJfiDz80Xb57svAUdtYIcNSi4kopiaWvA0KSS4vhBjdMeQrZAVnlebvsd15VegJnVhmvWpEqnQZDZD"
1461944570219:)
1461944570220:totalpagedata <- data.frame()
1461944570221:totalpostdata <- data.frame()
1461944570224:for (brand in 1:length(ftokens)) {
1461944570225:ftoken <- ftokens[brand]
1461944570228:## User Id
1461944570228:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461944570232:userid = "10153046308598756"
1461944570233:# Access public personal data; basically a ftoken test
1461944570236:me <- getUsers("me", token=ftoken)
1461944570236:print(me$name)
1461944570240:## Page Id
1461944570240:# Define which page will be used for the data collection. Change id's as necessary.
1461944570244:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461944570246:pageid = me$id
1461944570250:# Acquisition -------------------------------------------------------------
1461944570250:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461944570254:page <- getPage(pageid, ftoken, n = posts)
1461944570255:page.store <- page
1461944570257:# Create new vectors in dataset with datetime, month, and day formattiong
1461944570258:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944570261:page$datetime <- format.facebook.date(page$created_time)
1461944570263:page$month <- format(page$datetime, "%Y-%m")
1461944570265:page$day <- format(page$datetime, "%Y-%m-%d")
1461944570267:page$datetime <- as.Date(page$datetime)
1461944570269:#page$month <- as.Date(page$month)
1461944570270:page$day <- as.Date(page$day)
1461944570272:} else {
1461944570273:print("Date fields already exist.")
1461944570276:}
1461944570277:# Processing --------------------------------------------------------------
1461944570279:# Process data to clean dataset and augment it with more data than default fields.
1461944570280:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1461944570282:## Cleaning =================================
1461944570284:# Page and Post Datasets
1461944570285:# Split dataset into two for pages and post data
1461944570288:# Create initial null sets
1461944570289:pagedata <- 0
1461944570292:postdata <- 0
1461944570294:## Appending =================================
1461944570297:### Page Metrics #############################
1461944570297:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461944570300:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461944570302:# Page Metrics to automatically pull
1461944570304:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461944570304:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461944570306:pagemetrics <- metrics
1461944570309:# Prep dataset by breaking into weeks
1461944570310:pagedata <- 0
1461944570315:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461944570317:colnames(pagedata) = c("pageid", "page", "date")
1461944570319:pagedata$page = page$from_name[1]
1461944570320:pagedata$pageid = page$from_id[1]
1461944570323:divisor = 5
1461944570324:remainder = length(range)%%divisor;
1461944570327:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461944570329:weeks <- (nrow(pagedata)/5)-2
1461944570331:# Start Data Acquisition Loop
1461944570332:for (metric in 1:length(metrics)) {
1461944570336:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461944570338:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461944570340:period = 'lifetime'
1461944570341:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461944570344:period = 'day'
1461944570347:tempfloor = "2014-02-01"
1461944570349:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461944570351:if (floor < tempfloor) {
1461944570353:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461944570355:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461944570356:weeks = tempweeks
1461944570359:} else {}
1461944570360:} else {
1461944570362:period = 'day'
1461944570364:weeks <- (nrow(pagedata)/5)-2
1461944570365:}
1461944570370:hold <- matrix(0, nrow=0, ncol=7)
1461944570372:for (week in 0:weeks) {
1461944570375:end <- pagedata$date[(week*5)+1]
1461944570377:start <- pagedata$date[((week+1)*5)+1]
1461944570380:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461944570383:pull <- NULL
1461944570385:attempt <- 1
1461944570388:while(is.null(pull) && attempt <= 10) {
1461944570389:attempt <- attempt + 1
1461944570392:try(
1461944570394:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461944570396:)
1461944570399:if (is.null(pull)) {
1461944570400:print("Empty Pull. Re-attempting.")
1461944570403:print(paste("Attempt", attempt))
1461944570405:} else {
1461944570407:pull$datetime <- format.facebook.date(pull$end_time)
1461944570412:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461944570415:pull$datetime <- as.Date(pull$datetime)
1461944570417:#page$month <- as.Date(page$month)
1461944570420:pull$day <- as.Date(pull$day)
1461944570423:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461944570425:print("Found Facebook data matching date range. Storing values.")
1461944570427:} else {
1461944570429:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461944570431:print(paste("Attempt", attempt))
1461944570433:pull <- NULL}
1461944570436:if (attempt > 100) {
1461944570438:print('Too many attempts. Skipping.')
1461944570440:pull <- NULL
1461944570442:break
1461944570444:} else {}
1461944570446:}
1461944570450:pulllength <- ncol(pull)
1461944570453:rpull = pull[rev(rownames(pull)),]
1461944570456:hold <- rbind(hold,rpull)
1461944570459:rawhold <- hold
1461944570461:}
1461944570467:rhold = hold[rev(rownames(hold)),]
1461944570469:rhold$value = shift(rhold$value, 1)
1461944570470:hold = rhold[rev(rownames(rhold)),]
1461944570471:hold$value[1] = rawhold$value[1]
1461944570477:hours <- seq(0,23)
1461944570478:names(hours) <- paste("Hour", hours)
1461944570483:subtypes <- c('link','comment', 'like')
1461944570485:names(subtypes) <- c('Shares','Comments', 'Likes')
1461944570489:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461944570491:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461944570495:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461944570499:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461944570502:for (type in 1:length(subtypes)) {
1461944570503:typehold <- NA
1461944570510:typehold <- hold[hold$variable == subtypes[type],]
1461944570515:pagedata <- cbind(NA,pagedata)
1461944570517:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944570519:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461944570524:metrics <- c(metrics,subtypes[type])
1461944570526:}
1461944570530:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461944570533:for (demographic in 1:length(demographics)) {
1461944570539:print(names(demographics[demographic]))
1461944570544:typehold <- NA
1461944570547:typehold <- hold[hold$variable == demographics[demographic],]
1461944570549:typehold[typehold$value <= 10,] <- NA
1461944570556:pagedata <- cbind(NA,pagedata)
1461944570559:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944570561:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461944570568:metrics <- c(metrics,demographics[demographic])
1461944570570:}
1461944570573:} else if ((metrics)[metric] == 'page_fans_online') {
1461944570577:for (hour in 1:length(hours)) {
1461944570582:typehold <- NA
1461944570584:typehold <- hold[hold$variable == hours[hour],]
1461944570590:pagedata <- cbind(NA,pagedata)
1461944570593:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944570595:colnames(pagedata)[1] = paste("hour",hours[hour])
1461944570601:metrics <- c(metrics,hours[hour])
1461944570603:}
1461944570606:} else {
1461944570608:pagedata <- cbind(NA,pagedata)
1461944570609:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461944570610:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461944570616:}
1461944570621:cat("\n\n")
1461944570623:print(head(pagedata))
1461944570626:cat("\n")
1461944570630:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461944570632:break
1461944570635:} else {
1461944570637:}
1461944570645:pagedata.tempstore <- pagedata
1461944570649:#Page Metrics to remove because they have subtypes
1461944570652:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1461944570657:# Page Metrics to manually create
1461944570660:metrics <- c(metrics,"organic reach")
1461944570661:names(metrics)[length(metrics)] <- c("Organic Reach")
1461944570668:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1461944570669:colnames(pagedata)[1] = "organic reach"
1461944570674:# Final dataset formatting
1461944570676:pagedatastore <- pagedata
1461944570679:#pagedata <- pagedatastore
1461944570680:pagedata2 <- pagedata
1461944570685:# reorder and null NA's for excel
1461944570688:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1461944570691:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1461944570695:#pagedata2[is.na(pagedata2)] <- ""
1461944570698:#pagedata2[pagedata2 == 0] <- ""
1461944570706:# store final dataset
1461944570708:pagedata <- pagedata2
1461944570711:### Post Metrics #############################
1461944570713:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1461944570717:# Most are automated, and will continue to retry through errors until a value is found.
1461944570719:# Manual modifications are run after initial data acquisition.
1461944570723:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1461944570726:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1461944570732:# Populate sets with values from pull
1461944570737:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944570740:page$datetime <- format.facebook.date(page$created_time)
1461944570743:page$month <- format(page$datetime, "%Y-%m")
1461944570746:page$day <- format(page$datetime, "%Y-%m-%d")
1461944570754:page$datetime <- as.Date(page$datetime)
1461944570757:#page$month <- as.Date(page$month)
1461944570759:page$day <- as.Date(page$day)
1461944570762:} else {
1461944570766:print("Date fields already exist for Post Data.")
1461944570769:}
1461944570773:postdata <- 0
1461944570775:postdata <- page[page$day > floor,]
1461944570776:postdata <- postdata[postdata$day < roof,]
1461944570784:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461944570794:# Name column for usability
1461944570797:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461944570800:rows <- nrow(postdata)
1461944570802:lpostmetrics <- postmetrics
1461944570807:#testlength <- 2
1461944570810:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461944570821:for (pmetric in 1:length(postmetrics)) {
1461944570825:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461944570830:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461944570832:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944570835:names(phold) <- c("id","name","period","title","description","value","variable")
1461944570837:} else {
1461944570841:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944570844:names(phold) <- c("id","name","period","title","description","value")
1461944570848:}
1461944570860:for (post in 1:nrow(postdata)) {
1461944570865:period <- "lifetime"
1461944570870:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461944570876:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461944570880:print('Not a Facebook Video.')
1461944570882:phold <- rbind(phold, NA)
1461944570885:next()
1461944570888:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461944570891:} else {
1461944570893:}
1461944570902:postpull <- NULL
1461944570904:attempt <- 1
1461944570909:while( is.null(postpull) && attempt <= 50) {
1461944570913:attempt <- attempt + 1
1461944570917:try(
1461944570921:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461944570923:#,silent=TRUE
1461944570927:)
1461944570930:if (attempt > 10) {
1461944570934:print('Too many attempts. Skipping.')
1461944570937:postpull <- NULL
1461944570941:break
1461944570944:} else {
1461944570946:print('Retrying.')
1461944570948:}
1461944570962:colnames(phold) <- names(postpull)
1461944570966:phold <- rbind(phold, postpull)
1461944570968:}
1461944570972:pholdstore <- phold
1461944570980:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461944570984:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461944570992:phold <- phold[-1,]
1461944570998:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461944571003:postmetrics <- postmetrics[-pmetric]
1461944571007:pmetric <- pmetric + 1
1461944571014:for (ptype in (1:length(psubtypes))) {
1461944571019:ptyphehold <- NA
1461944571023:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461944571028:postdata <- cbind(NA,postdata)
1461944571031:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461944571037:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461944571040:postmetrics <- c(postmetrics,psubtypes[ptype])
1461944571043:}
1461944571053:} else {
1461944571056:postdata <- cbind(NA,postdata)
1461944571060:postdata[1:length(phold$value),1] <- phold$value
1461944571063:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461944571065:}
1461944571074:cat("\n\n")
1461944571077:print(head(postdata))
1461944571080:cat("\n")
1461944571082:}
1461944571090:postdatastore <- postdata
1461944571104:# Post Metrics to manually create
1461944571107:postmetrics <- c(postmetrics,"organic reach")
1461944571111:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1461944571115:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1461944571120:colnames(postdata)[1] = "organic reach"
1461944571130:# Final dataset formatting
1461944571134:#postdatastore <- postdata
1461944571137:#postdata <- postdatastore
1461944571146:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1461944571151:# reorder and null NA's for Excel
1461944571154:postdata2 <- postdata
1461944571159:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1461944571162:postdata2[is.na(postdata2)] <- ""
1461944571167:postdata2[postdata2 == 0] <- ""
1461944571176:# store final dataset
1461944571180:postdata <- as.data.frame(postdata2)
1461944571187:# Outputs -----------------------------------------------------------------
1461944571199:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461944571203:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461944571212:datafolder <- "Data"
1461944571219:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461944571227:# Rename columns for Excel readability
1461944571230:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461944571233:# output Page dataset as final csv
1461944571237:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461944571243:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461944571248:?wri
1461944571253:# Rename columns for Excel readability
1461944571259:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461944571264:# output Post dataset as final Excel
1461944571270:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461944571275:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461944571280:# Raw Data
1461944571287:# output dataset as raw csv
1461944571291:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461944571300:totalpagedata <- rbind(totalpagedata, pagedata)
1461944571305:totalpostdata <- rbind(totalpostdata, postdata)
1461944571315:}
1461944578596:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("TWE","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461944578844:# Rename columns for Excel readability
1461944578844:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461944578847:# output Post dataset as final Excel
1461944578847:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461944578847:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("TWE","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461944578856:# Images
1461944578856:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1461944578858:#for (picture in (1:nrow(postdata))) {
1461944578859:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1461944578863:#
1461944578865:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1461944578866:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1461944578866:#
1461944578866:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1461944578867:# Edit the core program and change feedback loop.
1461944578868:#
1461944578870:#}
1461944673510:postdata
1461944690845:pagedata
1461944692728:postdata
1461944707841:# Inputs ------------------------------------------------------------------
1461944707842:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1461944707843:# Define data range for data (2012 is out of bounds for some metrics)
1461944707843:posts <- 5000
1461944707847:roof = Sys.Date() #"2015-12-31"
1461944707850:floor = "2016-04-20" #"2015-05-01"
1461944707851:range = seq(as.Date(floor), as.Date(roof), by="days")
1461944707855:## Access ftoken
1461944707855:# Use token from Facebook Graph API
1461944707860:# token generated here: https://developers.facebook.com/tools/explorer
1461944707862:# Lasts two hours, and must be changed depending on page and permissions
1461944707862:ftokens <- c(
1461944707863:#Sledgehammer Wine
1461944707863:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461944707863:#Chateau Saint Jean
1461944707864:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461944707864:#19 Crimes
1461944707864:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461944707865:#Beringer Vneyards
1461944707865:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461944707865:#100% Canadian Milk
1461944707866:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461944707866:#Lait 100% Canadien
1461944707866:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461944707867:#Recharge with Milk
1461944707867:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461944707868:#Misc
1461944707868:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461944707868:#Baron
1461944707869:"EAACEdEose0cBAGykbTGkQBxALbyuXlTrhCGQbHY8B120pXdJca4gv03JrZAaioZBNg9f0ZAFnjiXYt6AM2ZC8ZAFgvSXTnQXq4CJfiDz80Xb57svAUdtYIcNSi4kopiaWvA0KSS4vhBjdMeQrZAVnlebvsd15VegJnVhmvWpEqnQZDZD"
1461944707869:)
1461944713099:totalpagedata <- data.frame()
1461944713100:totalpostdata <- data.frame()
1461944713102:for (brand in 1:length(ftokens)) {
1461944713102:ftoken <- ftokens[brand]
1461944713103:## User Id
1461944713103:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461944713105:userid = "10153046308598756"
1461944713106:# Access public personal data; basically a ftoken test
1461944713109:me <- getUsers("me", token=ftoken)
1461944713109:print(me$name)
1461944713113:## Page Id
1461944713113:# Define which page will be used for the data collection. Change id's as necessary.
1461944713116:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461944713117:pageid = me$id
1461944713117:# Acquisition -------------------------------------------------------------
1461944713122:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461944713124:page <- getPage(pageid, ftoken, n = posts)
1461944713124:page.store <- page
1461944713128:# Create new vectors in dataset with datetime, month, and day formattiong
1461944713128:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944713131:page$datetime <- format.facebook.date(page$created_time)
1461944713132:page$month <- format(page$datetime, "%Y-%m")
1461944713132:page$day <- format(page$datetime, "%Y-%m-%d")
1461944713133:page$datetime <- as.Date(page$datetime)
1461944713133:#page$month <- as.Date(page$month)
1461944713137:page$day <- as.Date(page$day)
1461944713137:} else {
1461944713140:print("Date fields already exist.")
1461944713141:}
1461944713144:# Processing --------------------------------------------------------------
1461944713145:# Process data to clean dataset and augment it with more data than default fields.
1461944713148:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1461944713150:## Cleaning =================================
1461944713151:# Page and Post Datasets
1461944713153:# Split dataset into two for pages and post data
1461944713154:# Create initial null sets
1461944713157:pagedata <- 0
1461944713158:postdata <- 0
1461944713161:## Appending =================================
1461944713162:### Page Metrics #############################
1461944713165:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461944713166:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461944713171:# Page Metrics to automatically pull
1461944713172:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461944713175:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461944713176:pagemetrics <- metrics
1461944713180:# Prep dataset by breaking into weeks
1461944713181:pagedata <- 0
1461944713183:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461944713185:colnames(pagedata) = c("pageid", "page", "date")
1461944713186:pagedata$page = page$from_name[1]
1461944713189:pagedata$pageid = page$from_id[1]
1461944713190:divisor = 5
1461944713193:remainder = length(range)%%divisor;
1461944713197:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461944713198:weeks <- (nrow(pagedata)/5)-2
1461944713205:# Start Data Acquisition Loop
1461944713207:for (metric in 1:length(metrics)) {
1461944713211:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461944713213:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461944713213:period = 'lifetime'
1461944713214:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461944713217:period = 'day'
1461944713219:tempfloor = "2014-02-01"
1461944713221:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461944713222:if (floor < tempfloor) {
1461944713225:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461944713226:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461944713229:weeks = tempweeks
1461944713231:} else {}
1461944713233:} else {
1461944713234:period = 'day'
1461944713236:weeks <- (nrow(pagedata)/5)-2
1461944713237:}
1461944713242:hold <- matrix(0, nrow=0, ncol=7)
1461944713243:for (week in 0:weeks) {
1461944713246:end <- pagedata$date[(week*5)+1]
1461944713247:start <- pagedata$date[((week+1)*5)+1]
1461944713250:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461944713252:pull <- NULL
1461944713254:attempt <- 1
1461944713261:while(is.null(pull) && attempt <= 10) {
1461944713262:attempt <- attempt + 1
1461944713265:try(
1461944713267:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461944713269:)
1461944713272:if (is.null(pull)) {
1461944713273:print("Empty Pull. Re-attempting.")
1461944713276:print(paste("Attempt", attempt))
1461944713279:} else {
1461944713280:pull$datetime <- format.facebook.date(pull$end_time)
1461944713282:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461944713285:pull$datetime <- as.Date(pull$datetime)
1461944713288:#page$month <- as.Date(page$month)
1461944713290:pull$day <- as.Date(pull$day)
1461944713294:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461944713296:print("Found Facebook data matching date range. Storing values.")
1461944713297:} else {
1461944713299:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461944713301:print(paste("Attempt", attempt))
1461944713303:pull <- NULL}
1461944713306:if (attempt > 100) {
1461944713308:print('Too many attempts. Skipping.')
1461944713309:pull <- NULL
1461944713311:break
1461944713314:} else {}
1461944713315:}
1461944713318:pulllength <- ncol(pull)
1461944713319:rpull = pull[rev(rownames(pull)),]
1461944713322:hold <- rbind(hold,rpull)
1461944713324:rawhold <- hold
1461944713326:}
1461944713335:rhold = hold[rev(rownames(hold)),]
1461944713336:rhold$value = shift(rhold$value, 1)
1461944713341:hold = rhold[rev(rownames(rhold)),]
1461944713344:hold$value[1] = rawhold$value[1]
1461944713348:hours <- seq(0,23)
1461944713349:names(hours) <- paste("Hour", hours)
1461944713357:subtypes <- c('link','comment', 'like')
1461944713364:names(subtypes) <- c('Shares','Comments', 'Likes')
1461944713372:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461944713373:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461944713379:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461944713384:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461944713389:for (type in 1:length(subtypes)) {
1461944713392:typehold <- NA
1461944713393:typehold <- hold[hold$variable == subtypes[type],]
1461944713397:pagedata <- cbind(NA,pagedata)
1461944713398:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944713401:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461944713405:metrics <- c(metrics,subtypes[type])
1461944713407:}
1461944713412:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461944713416:for (demographic in 1:length(demographics)) {
1461944713421:print(names(demographics[demographic]))
1461944713426:typehold <- NA
1461944713428:typehold <- hold[hold$variable == demographics[demographic],]
1461944713429:typehold[typehold$value <= 10,] <- NA
1461944713433:pagedata <- cbind(NA,pagedata)
1461944713434:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944713437:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461944713442:metrics <- c(metrics,demographics[demographic])
1461944713445:}
1461944713448:} else if ((metrics)[metric] == 'page_fans_online') {
1461944713454:for (hour in 1:length(hours)) {
1461944713458:typehold <- NA
1461944713460:typehold <- hold[hold$variable == hours[hour],]
1461944713463:pagedata <- cbind(NA,pagedata)
1461944713464:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944713466:colnames(pagedata)[1] = paste("hour",hours[hour])
1461944713472:metrics <- c(metrics,hours[hour])
1461944713474:}
1461944713477:} else {
1461944713480:pagedata <- cbind(NA,pagedata)
1461944713482:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461944713485:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461944713490:}
1461944713493:cat("\n\n")
1461944713495:print(head(pagedata))
1461944713498:cat("\n")
1461944713501:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461944713503:break
1461944713506:} else {
1461944713509:}
1461944713516:pagedata.tempstore <- pagedata
1461944713520:#Page Metrics to remove because they have subtypes
1461944713522:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1461944713525:# Page Metrics to manually create
1461944713527:metrics <- c(metrics,"organic reach")
1461944713532:names(metrics)[length(metrics)] <- c("Organic Reach")
1461944713536:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1461944713539:colnames(pagedata)[1] = "organic reach"
1461944713543:# Final dataset formatting
1461944713547:pagedatastore <- pagedata
1461944713549:#pagedata <- pagedatastore
1461944713553:pagedata2 <- pagedata
1461944713557:# reorder and null NA's for excel
1461944713560:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1461944713562:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1461944713564:#pagedata2[is.na(pagedata2)] <- ""
1461944713566:#pagedata2[pagedata2 == 0] <- ""
1461944713572:# store final dataset
1461944713576:pagedata <- pagedata2
1461944713582:### Post Metrics #############################
1461944713584:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1461944713588:# Most are automated, and will continue to retry through errors until a value is found.
1461944713589:# Manual modifications are run after initial data acquisition.
1461944713593:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1461944713595:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1461944713601:# Populate sets with values from pull
1461944713607:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944713610:page$datetime <- format.facebook.date(page$created_time)
1461944713616:page$month <- format(page$datetime, "%Y-%m")
1461944713619:page$day <- format(page$datetime, "%Y-%m-%d")
1461944713625:page$datetime <- as.Date(page$datetime)
1461944713628:#page$month <- as.Date(page$month)
1461944713632:page$day <- as.Date(page$day)
1461944713635:} else {
1461944713639:print("Date fields already exist for Post Data.")
1461944713641:}
1461944713645:postdata <- 0
1461944713647:postdata <- page[page$day > floor,]
1461944713649:postdata <- postdata[postdata$day < roof,]
1461944713655:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461944713663:# Name column for usability
1461944713666:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461944713670:rows <- nrow(postdata)
1461944713673:lpostmetrics <- postmetrics
1461944713681:#testlength <- 2
1461944713685:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461944713694:for (pmetric in 1:length(postmetrics)) {
1461944713696:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461944713700:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461944713702:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944713706:names(phold) <- c("id","name","period","title","description","value","variable")
1461944713709:} else {
1461944713710:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944713714:names(phold) <- c("id","name","period","title","description","value")
1461944713716:}
1461944713722:for (post in 1:nrow(postdata)) {
1461944713726:period <- "lifetime"
1461944713733:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461944713737:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461944713740:print('Not a Facebook Video.')
1461944713743:phold <- rbind(phold, NA)
1461944713748:next()
1461944713750:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461944713753:} else {
1461944713756:}
1461944713764:postpull <- NULL
1461944713766:attempt <- 1
1461944713771:while( is.null(postpull) && attempt <= 50) {
1461944713777:attempt <- attempt + 1
1461944713780:try(
1461944713785:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461944713789:#,silent=TRUE
1461944713794:)
1461944713798:if (attempt > 10) {
1461944713800:print('Too many attempts. Skipping.')
1461944713806:postpull <- NULL
1461944713809:break
1461944713814:} else {
1461944713817:print('Retrying.')
1461944713820:}
1461944713831:colnames(phold) <- names(postpull)
1461944713834:phold <- rbind(phold, postpull)
1461944713836:}
1461944713841:pholdstore <- phold
1461944713849:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461944713851:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461944713861:phold <- phold[-1,]
1461944713866:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461944713873:postmetrics <- postmetrics[-pmetric]
1461944713877:pmetric <- pmetric + 1
1461944713892:for (ptype in (1:length(psubtypes))) {
1461944713897:ptyphehold <- NA
1461944713901:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461944713910:postdata <- cbind(NA,postdata)
1461944713914:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461944713920:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461944713924:postmetrics <- c(postmetrics,psubtypes[ptype])
1461944713927:}
1461944713938:} else {
1461944713942:postdata <- cbind(NA,postdata)
1461944713945:postdata[1:length(phold$value),1] <- phold$value
1461944713947:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461944713954:}
1461944713964:cat("\n\n")
1461944713967:print(head(postdata))
1461944713970:cat("\n")
1461944713974:}
1461944713982:postdatastore <- postdata
1461944713996:# Post Metrics to manually create
1461944713999:postmetrics <- c(postmetrics,"organic reach")
1461944714002:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1461944714008:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1461944714011:colnames(postdata)[1] = "organic reach"
1461944714019:# Final dataset formatting
1461944714024:#postdatastore <- postdata
1461944714027:#postdata <- postdatastore
1461944714037:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1461944714042:# reorder and null NA's for Excel
1461944714045:postdata2 <- postdata
1461944714048:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1461944714053:postdata2[is.na(postdata2)] <- ""
1461944714057:postdata2[postdata2 == 0] <- ""
1461944714065:# store final dataset
1461944714068:postdata <- as.data.frame(postdata2)
1461944714077:# Outputs -----------------------------------------------------------------
1461944714085:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461944714090:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461944714097:datafolder <- "Data"
1461944714106:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461944714114:# Rename columns for Excel readability
1461944714120:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461944714124:# output Page dataset as final csv
1461944714129:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461944714135:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461944714141:?wri
1461944714144:# Rename columns for Excel readability
1461944714148:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461944714152:# output Post dataset as final Excel
1461944714156:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461944714162:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461944714170:# Raw Data
1461944714175:# output dataset as raw csv
1461944714180:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461944714186:totalpagedata <- rbind(totalpagedata, pagedata)
1461944714192:totalpostdata <- rbind(totalpostdata, postdata)
1461944714199:}
1461944738183:## Facebook Query Injector #####
1461944738183:## Mirum Agency ################
1461944738185:## By Vivek Menon ##############
1461944738186:## v.1.5.0 #####################
1461944738188:# Summary -----------------------------------------------------------------
1461944738189:# Todo --------------------------------------------------------------------
1461944738189:# - Run script for all major brands
1461944738191:# - Create 'participation rate' function
1461944738191:# - Incorporate Twitter
1461944738195:# Setup -------------------------------------------------------------------
1461944738196:# Load and install all necessary packages for the script
1461944738199:# Required Packages for dataframes, forecasting, graphical visualization, and development
1461944738199:# Use 'install.packages()' if unavailable.
1461944738203:#library(zoo)
1461944738206:#library(forecast)
1461944738206:library(ggplot2)
1461944738206:#library(scales)
1461944738207:library(devtools)
1461944738211:library(compare)
1461944738214:library(xlsx)
1461944738214:require(httr)
1461944738215:require(rjson)
1461944738215:require(RCurl)
1461944738216:# Pull most up to date Github repositories for relevant packages
1461944738217:# Not frequently updated; does not need to be run every time.
1461944738217:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461944738218:#install_github("pablobarbera/instaR/instaR")
1461944738218:# Required packags for plugging into Facebook API
1461944738218:#library(twitteR)
1461944738219:library(Rfacebook)
1461944738219:#library(instaR)
1461944738220:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1461944738223:# https://instagram.com/developer/authentication/?hl=en
1461944738223:setwd("~/")
1461944738224:getwd()
1461944738227:# Authorize with Facebook
1461944738228:#Using 'rFacebook' from Github
1461944738231:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461944741902:# Functions ---------------------------------------------------------------
1461944741902:# User Functions
1461944741904:# Function to convert Facebook date format to R date format
1461944741905:format.facebook.date <- function(datestring) {
1461944741908:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461944741909:}
1461944741913:# Shift a vector up by an amount
1461944741913:shift <- function(x, n){
1461944741917:c(x[-(seq(n))], rep(NA, n))
1461944741919:}
1461944741920:# Get gcd from vector
1461944741923:gcd <- function(x,y) {
1461944741924:r <- x%%y;
1461944741924:return(ifelse(r, gcd(y, r), y))
1461944741924:}
1461944741929:# Inputs ------------------------------------------------------------------
1461944741929:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1461944741932:# Define data range for data (2012 is out of bounds for some metrics)
1461944741932:posts <- 5000
1461944741936:roof = Sys.Date() #"2015-12-31"
1461944741937:floor = "2016-04-23" #"2015-05-01"
1461944741939:range = seq(as.Date(floor), as.Date(roof), by="days")
1461944741940:## Access ftoken
1461944741940:# Use token from Facebook Graph API
1461944741944:# token generated here: https://developers.facebook.com/tools/explorer
1461944741944:# Lasts two hours, and must be changed depending on page and permissions
1461944741946:ftokens <- c(
1461944741947:#Sledgehammer Wine
1461944741947:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461944741948:#Chateau Saint Jean
1461944741948:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461944741948:#19 Crimes
1461944741948:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461944741949:#Beringer Vneyards
1461944741949:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461944741949:#100% Canadian Milk
1461944741950:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461944741950:#Lait 100% Canadien
1461944741950:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461944741951:#Recharge with Milk
1461944741951:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461944741951:#Misc
1461944741951:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461944741952:#Baron
1461944741952:"EAACEdEose0cBAGykbTGkQBxALbyuXlTrhCGQbHY8B120pXdJca4gv03JrZAaioZBNg9f0ZAFnjiXYt6AM2ZC8ZAFgvSXTnQXq4CJfiDz80Xb57svAUdtYIcNSi4kopiaWvA0KSS4vhBjdMeQrZAVnlebvsd15VegJnVhmvWpEqnQZDZD"
1461944741952:)
1461944741953:totalpagedata <- data.frame()
1461944741954:totalpostdata <- data.frame()
1461944741957:for (brand in 1:length(ftokens)) {
1461944741957:ftoken <- ftokens[brand]
1461944741962:## User Id
1461944741964:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461944741964:userid = "10153046308598756"
1461944741965:# Access public personal data; basically a ftoken test
1461944741965:me <- getUsers("me", token=ftoken)
1461944741966:print(me$name)
1461944741966:## Page Id
1461944741967:# Define which page will be used for the data collection. Change id's as necessary.
1461944741970:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461944741971:pageid = me$id
1461944741972:# Acquisition -------------------------------------------------------------
1461944741975:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461944741975:page <- getPage(pageid, ftoken, n = posts)
1461944741976:page.store <- page
1461944741976:# Create new vectors in dataset with datetime, month, and day formattiong
1461944741977:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944741980:page$datetime <- format.facebook.date(page$created_time)
1461944741980:page$month <- format(page$datetime, "%Y-%m")
1461944741981:page$day <- format(page$datetime, "%Y-%m-%d")
1461944741982:page$datetime <- as.Date(page$datetime)
1461944741982:#page$month <- as.Date(page$month)
1461944741985:page$day <- as.Date(page$day)
1461944741986:} else {
1461944741989:print("Date fields already exist.")
1461944741990:}
1461944741992:# Processing --------------------------------------------------------------
1461944741992:# Process data to clean dataset and augment it with more data than default fields.
1461944741994:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1461944741996:## Cleaning =================================
1461944741997:# Page and Post Datasets
1461944741999:# Split dataset into two for pages and post data
1461944742000:# Create initial null sets
1461944742003:pagedata <- 0
1461944742003:postdata <- 0
1461944742007:## Appending =================================
1461944742010:### Page Metrics #############################
1461944742010:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461944742013:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461944742015:# Page Metrics to automatically pull
1461944742017:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461944742018:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461944742019:pagemetrics <- metrics
1461944742023:# Prep dataset by breaking into weeks
1461944742024:pagedata <- 0
1461944742027:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461944742028:colnames(pagedata) = c("pageid", "page", "date")
1461944742029:pagedata$page = page$from_name[1]
1461944742033:pagedata$pageid = page$from_id[1]
1461944742034:divisor = 5
1461944742036:remainder = length(range)%%divisor;
1461944742038:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461944742040:weeks <- (nrow(pagedata)/5)-2
1461944742042:# Start Data Acquisition Loop
1461944742044:for (metric in 1:length(metrics)) {
1461944742046:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461944742048:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461944742049:period = 'lifetime'
1461944742052:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461944742053:period = 'day'
1461944742056:tempfloor = "2014-02-01"
1461944742058:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461944742060:if (floor < tempfloor) {
1461944742061:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461944742062:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461944742064:weeks = tempweeks
1461944742066:} else {}
1461944742068:} else {
1461944742069:period = 'day'
1461944742071:weeks <- (nrow(pagedata)/5)-2
1461944742072:}
1461944742077:hold <- matrix(0, nrow=0, ncol=7)
1461944742079:for (week in 0:weeks) {
1461944742082:end <- pagedata$date[(week*5)+1]
1461944742083:start <- pagedata$date[((week+1)*5)+1]
1461944742085:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461944742091:pull <- NULL
1461944742093:attempt <- 1
1461944742096:while(is.null(pull) && attempt <= 10) {
1461944742097:attempt <- attempt + 1
1461944742099:try(
1461944742100:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461944742104:)
1461944742106:if (is.null(pull)) {
1461944742108:print("Empty Pull. Re-attempting.")
1461944742111:print(paste("Attempt", attempt))
1461944742112:} else {
1461944742115:pull$datetime <- format.facebook.date(pull$end_time)
1461944742117:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461944742121:pull$datetime <- as.Date(pull$datetime)
1461944742122:#page$month <- as.Date(page$month)
1461944742124:pull$day <- as.Date(pull$day)
1461944742127:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461944742128:print("Found Facebook data matching date range. Storing values.")
1461944742130:} else {
1461944742131:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461944742134:print(paste("Attempt", attempt))
1461944742135:pull <- NULL}
1461944742140:if (attempt > 100) {
1461944742142:print('Too many attempts. Skipping.')
1461944742144:pull <- NULL
1461944742144:break
1461944742148:} else {}
1461944742149:}
1461944742153:pulllength <- ncol(pull)
1461944742155:rpull = pull[rev(rownames(pull)),]
1461944742158:hold <- rbind(hold,rpull)
1461944742160:rawhold <- hold
1461944742162:}
1461944742170:rhold = hold[rev(rownames(hold)),]
1461944742171:rhold$value = shift(rhold$value, 1)
1461944742174:hold = rhold[rev(rownames(rhold)),]
1461944742177:hold$value[1] = rawhold$value[1]
1461944742181:hours <- seq(0,23)
1461944742185:names(hours) <- paste("Hour", hours)
1461944742188:subtypes <- c('link','comment', 'like')
1461944742189:names(subtypes) <- c('Shares','Comments', 'Likes')
1461944742194:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461944742196:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461944742198:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461944742204:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461944742208:for (type in 1:length(subtypes)) {
1461944742209:typehold <- NA
1461944742211:typehold <- hold[hold$variable == subtypes[type],]
1461944742215:pagedata <- cbind(NA,pagedata)
1461944742216:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944742220:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461944742223:metrics <- c(metrics,subtypes[type])
1461944742224:}
1461944742230:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461944742233:for (demographic in 1:length(demographics)) {
1461944742237:print(names(demographics[demographic]))
1461944742241:typehold <- NA
1461944742242:typehold <- hold[hold$variable == demographics[demographic],]
1461944742245:typehold[typehold$value <= 10,] <- NA
1461944742248:pagedata <- cbind(NA,pagedata)
1461944742250:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944742253:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461944742258:metrics <- c(metrics,demographics[demographic])
1461944742259:}
1461944742266:} else if ((metrics)[metric] == 'page_fans_online') {
1461944742270:for (hour in 1:length(hours)) {
1461944742274:typehold <- NA
1461944742276:typehold <- hold[hold$variable == hours[hour],]
1461944742280:pagedata <- cbind(NA,pagedata)
1461944742281:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944742284:colnames(pagedata)[1] = paste("hour",hours[hour])
1461944742288:metrics <- c(metrics,hours[hour])
1461944742290:}
1461944742294:} else {
1461944742296:pagedata <- cbind(NA,pagedata)
1461944742298:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461944742300:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461944742306:}
1461944742311:cat("\n\n")
1461944742314:print(head(pagedata))
1461944742317:cat("\n")
1461944742320:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461944742322:break
1461944742325:} else {
1461944742327:}
1461944742337:pagedata.tempstore <- pagedata
1461944742340:#Page Metrics to remove because they have subtypes
1461944742343:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1461944742347:# Page Metrics to manually create
1461944742349:metrics <- c(metrics,"organic reach")
1461944742352:names(metrics)[length(metrics)] <- c("Organic Reach")
1461944742356:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1461944742359:colnames(pagedata)[1] = "organic reach"
1461944742365:# Final dataset formatting
1461944742367:pagedatastore <- pagedata
1461944742370:#pagedata <- pagedatastore
1461944742373:pagedata2 <- pagedata
1461944742379:# reorder and null NA's for excel
1461944742381:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1461944742383:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1461944742387:#pagedata2[is.na(pagedata2)] <- ""
1461944742390:#pagedata2[pagedata2 == 0] <- ""
1461944742395:# store final dataset
1461944742398:pagedata <- pagedata2
1461944742402:### Post Metrics #############################
1461944742404:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1461944742407:# Most are automated, and will continue to retry through errors until a value is found.
1461944742409:# Manual modifications are run after initial data acquisition.
1461944742414:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1461944742416:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1461944742421:# Populate sets with values from pull
1461944742427:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944742430:page$datetime <- format.facebook.date(page$created_time)
1461944742433:page$month <- format(page$datetime, "%Y-%m")
1461944742436:page$day <- format(page$datetime, "%Y-%m-%d")
1461944742441:page$datetime <- as.Date(page$datetime)
1461944742444:#page$month <- as.Date(page$month)
1461944742447:page$day <- as.Date(page$day)
1461944742451:} else {
1461944742453:print("Date fields already exist for Post Data.")
1461944742455:}
1461944742461:postdata <- 0
1461944742464:postdata <- page[page$day > floor,]
1461944742468:postdata <- postdata[postdata$day < roof,]
1461944742477:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461944742489:# Name column for usability
1461944742492:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461944742497:rows <- nrow(postdata)
1461944742502:lpostmetrics <- postmetrics
1461944742508:#testlength <- 2
1461944742510:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461944742525:for (pmetric in 1:length(postmetrics)) {
1461944742530:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461944742537:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461944742541:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944742545:names(phold) <- c("id","name","period","title","description","value","variable")
1461944742549:} else {
1461944742554:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944742558:names(phold) <- c("id","name","period","title","description","value")
1461944742562:}
1461944742572:for (post in 1:nrow(postdata)) {
1461944742580:period <- "lifetime"
1461944742587:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461944742593:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461944742596:print('Not a Facebook Video.')
1461944742600:phold <- rbind(phold, NA)
1461944742602:next()
1461944742604:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461944742608:} else {
1461944742610:}
1461944742616:postpull <- NULL
1461944742618:attempt <- 1
1461944742624:while( is.null(postpull) && attempt <= 50) {
1461944742626:attempt <- attempt + 1
1461944742629:try(
1461944742631:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461944742633:#,silent=TRUE
1461944742637:)
1461944742640:if (attempt > 10) {
1461944742642:print('Too many attempts. Skipping.')
1461944742646:postpull <- NULL
1461944742648:break
1461944742650:} else {
1461944742653:print('Retrying.')
1461944742656:}
1461944742665:colnames(phold) <- names(postpull)
1461944742667:phold <- rbind(phold, postpull)
1461944742671:}
1461944742673:pholdstore <- phold
1461944742678:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461944742681:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461944742687:phold <- phold[-1,]
1461944742692:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461944742697:postmetrics <- postmetrics[-pmetric]
1461944742701:pmetric <- pmetric + 1
1461944742706:for (ptype in (1:length(psubtypes))) {
1461944742708:ptyphehold <- NA
1461944742710:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461944742717:postdata <- cbind(NA,postdata)
1461944742719:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461944742726:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461944742728:postmetrics <- c(postmetrics,psubtypes[ptype])
1461944742731:}
1461944742739:} else {
1461944742742:postdata <- cbind(NA,postdata)
1461944742745:postdata[1:length(phold$value),1] <- phold$value
1461944742747:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461944742751:}
1461944742759:cat("\n\n")
1461944742762:print(head(postdata))
1461944742765:cat("\n")
1461944742768:}
1461944742773:postdatastore <- postdata
1461944742785:# Post Metrics to manually create
1461944742787:postmetrics <- c(postmetrics,"organic reach")
1461944742790:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1461944742795:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1461944742800:colnames(postdata)[1] = "organic reach"
1461944742805:# Final dataset formatting
1461944742807:#postdatastore <- postdata
1461944742810:#postdata <- postdatastore
1461944742816:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1461944742821:# reorder and null NA's for Excel
1461944742824:postdata2 <- postdata
1461944742826:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1461944742831:postdata2[is.na(postdata2)] <- ""
1461944742834:postdata2[postdata2 == 0] <- ""
1461944742840:# store final dataset
1461944742845:postdata <- as.data.frame(postdata2)
1461944742850:# Outputs -----------------------------------------------------------------
1461944742855:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461944742858:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461944742864:datafolder <- "Data"
1461944742869:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461944742876:# Rename columns for Excel readability
1461944742879:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461944742883:# output Page dataset as final csv
1461944742886:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461944742889:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461944742892:?wri
1461944742895:# Rename columns for Excel readability
1461944742900:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461944742903:# output Post dataset as final Excel
1461944742907:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461944742911:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461944742923:# Raw Data
1461944742927:# output dataset as raw csv
1461944742933:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461944742944:totalpagedata <- rbind(totalpagedata, pagedata)
1461944742947:totalpostdata <- rbind(totalpostdata, postdata)
1461944742952:}
1461944750643:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("TWE","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461944750663:# Rename columns for Excel readability
1461944750663:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461944750665:# output Post dataset as final Excel
1461944750665:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461944750666:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("TWE","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461944750680:# Images
1461944750681:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1461944750683:#for (picture in (1:nrow(postdata))) {
1461944750683:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1461944750684:#
1461944750684:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1461944750685:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1461944750685:#
1461944750685:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1461944750686:# Edit the core program and change feedback loop.
1461944750687:#
1461944750688:#}
1461944759467:## Facebook Query Injector #####
1461944759467:## Mirum Agency ################
1461944759469:## By Vivek Menon ##############
1461944759470:## v.1.5.0 #####################
1461944759474:# Summary -----------------------------------------------------------------
1461944759475:# Todo --------------------------------------------------------------------
1461944759478:# - Run script for all major brands
1461944759480:# - Create 'participation rate' function
1461944759481:# - Incorporate Twitter
1461944759482:# Setup -------------------------------------------------------------------
1461944759482:# Load and install all necessary packages for the script
1461944759483:# Required Packages for dataframes, forecasting, graphical visualization, and development
1461944759484:# Use 'install.packages()' if unavailable.
1461944759485:#library(zoo)
1461944759485:#library(forecast)
1461944759486:library(ggplot2)
1461944759486:#library(scales)
1461944759486:library(devtools)
1461944759490:library(compare)
1461944759491:library(xlsx)
1461944759494:require(httr)
1461944759495:require(rjson)
1461944759497:require(RCurl)
1461944759498:# Pull most up to date Github repositories for relevant packages
1461944759499:# Not frequently updated; does not need to be run every time.
1461944759502:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461944759502:#install_github("pablobarbera/instaR/instaR")
1461944759503:# Required packags for plugging into Facebook API
1461944759503:#library(twitteR)
1461944759506:library(Rfacebook)
1461944759507:#library(instaR)
1461944759507:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1461944759510:# https://instagram.com/developer/authentication/?hl=en
1461944759511:setwd("~/")
1461944759511:getwd()
1461944759512:# Authorize with Facebook
1461944759513:#Using 'rFacebook' from Github
1461944759515:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461944762663:# Functions ---------------------------------------------------------------
1461944762664:# User Functions
1461944762666:# Function to convert Facebook date format to R date format
1461944762666:format.facebook.date <- function(datestring) {
1461944762670:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461944762670:}
1461944762674:# Shift a vector up by an amount
1461944762674:shift <- function(x, n){
1461944762678:c(x[-(seq(n))], rep(NA, n))
1461944762678:}
1461944762680:# Get gcd from vector
1461944762680:gcd <- function(x,y) {
1461944762683:r <- x%%y;
1461944762684:return(ifelse(r, gcd(y, r), y))
1461944762685:}
1461944762686:# Inputs ------------------------------------------------------------------
1461944762686:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1461944762687:# Define data range for data (2012 is out of bounds for some metrics)
1461944762687:posts <- 5000
1461944762691:roof = Sys.Date() #"2015-12-31"
1461944762692:floor = "2016-04-19" #"2015-05-01"
1461944762694:range = seq(as.Date(floor), as.Date(roof), by="days")
1461944762696:## Access ftoken
1461944762696:# Use token from Facebook Graph API
1461944762697:# token generated here: https://developers.facebook.com/tools/explorer
1461944762697:# Lasts two hours, and must be changed depending on page and permissions
1461944762697:ftokens <- c(
1461944762698:#Sledgehammer Wine
1461944762698:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461944762698:#Chateau Saint Jean
1461944762699:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461944762699:#19 Crimes
1461944762699:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461944762700:#Beringer Vneyards
1461944762700:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461944762700:#100% Canadian Milk
1461944762701:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461944762701:#Lait 100% Canadien
1461944762701:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461944762702:#Recharge with Milk
1461944762702:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461944762702:#Misc
1461944762703:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461944762703:#Baron
1461944762703:"EAACEdEose0cBAGykbTGkQBxALbyuXlTrhCGQbHY8B120pXdJca4gv03JrZAaioZBNg9f0ZAFnjiXYt6AM2ZC8ZAFgvSXTnQXq4CJfiDz80Xb57svAUdtYIcNSi4kopiaWvA0KSS4vhBjdMeQrZAVnlebvsd15VegJnVhmvWpEqnQZDZD"
1461944762704:)
1461944762704:totalpagedata <- data.frame()
1461944762705:totalpostdata <- data.frame()
1461944762708:for (brand in 1:length(ftokens)) {
1461944762709:ftoken <- ftokens[brand]
1461944762712:## User Id
1461944762712:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461944762713:userid = "10153046308598756"
1461944762713:# Access public personal data; basically a ftoken test
1461944762714:me <- getUsers("me", token=ftoken)
1461944762717:print(me$name)
1461944762718:## Page Id
1461944762721:# Define which page will be used for the data collection. Change id's as necessary.
1461944762721:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461944762722:pageid = me$id
1461944762723:# Acquisition -------------------------------------------------------------
1461944762725:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461944762726:page <- getPage(pageid, ftoken, n = posts)
1461944762729:page.store <- page
1461944762733:# Create new vectors in dataset with datetime, month, and day formattiong
1461944762734:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944762737:page$datetime <- format.facebook.date(page$created_time)
1461944762737:page$month <- format(page$datetime, "%Y-%m")
1461944762740:page$day <- format(page$datetime, "%Y-%m-%d")
1461944762741:page$datetime <- as.Date(page$datetime)
1461944762742:#page$month <- as.Date(page$month)
1461944762743:page$day <- as.Date(page$day)
1461944762743:} else {
1461944762746:print("Date fields already exist.")
1461944762747:}
1461944762751:# Processing --------------------------------------------------------------
1461944762752:# Process data to clean dataset and augment it with more data than default fields.
1461944762754:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1461944762755:## Cleaning =================================
1461944762756:# Page and Post Datasets
1461944762756:# Split dataset into two for pages and post data
1461944762758:# Create initial null sets
1461944762758:pagedata <- 0
1461944762759:postdata <- 0
1461944762760:## Appending =================================
1461944762761:### Page Metrics #############################
1461944762761:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461944762764:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461944762765:# Page Metrics to automatically pull
1461944762768:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461944762769:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461944762772:pagemetrics <- metrics
1461944762773:# Prep dataset by breaking into weeks
1461944762775:pagedata <- 0
1461944762776:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461944762781:colnames(pagedata) = c("pageid", "page", "date")
1461944762782:pagedata$page = page$from_name[1]
1461944762784:pagedata$pageid = page$from_id[1]
1461944762784:divisor = 5
1461944762785:remainder = length(range)%%divisor;
1461944762788:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461944762789:weeks <- (nrow(pagedata)/5)-2
1461944762793:# Start Data Acquisition Loop
1461944762794:for (metric in 1:length(metrics)) {
1461944762796:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461944762797:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461944762799:period = 'lifetime'
1461944762800:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461944762804:period = 'day'
1461944762805:tempfloor = "2014-02-01"
1461944762808:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461944762809:if (floor < tempfloor) {
1461944762811:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461944762812:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461944762813:weeks = tempweeks
1461944762814:} else {}
1461944762815:} else {
1461944762818:period = 'day'
1461944762819:weeks <- (nrow(pagedata)/5)-2
1461944762822:}
1461944762823:hold <- matrix(0, nrow=0, ncol=7)
1461944762826:for (week in 0:weeks) {
1461944762828:end <- pagedata$date[(week*5)+1]
1461944762829:start <- pagedata$date[((week+1)*5)+1]
1461944762830:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461944762833:pull <- NULL
1461944762834:attempt <- 1
1461944762838:while(is.null(pull) && attempt <= 10) {
1461944762839:attempt <- attempt + 1
1461944762841:try(
1461944762842:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461944762845:)
1461944762847:if (is.null(pull)) {
1461944762849:print("Empty Pull. Re-attempting.")
1461944762850:print(paste("Attempt", attempt))
1461944762853:} else {
1461944762854:pull$datetime <- format.facebook.date(pull$end_time)
1461944762857:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461944762858:pull$datetime <- as.Date(pull$datetime)
1461944762860:#page$month <- as.Date(page$month)
1461944762862:pull$day <- as.Date(pull$day)
1461944762865:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461944762865:print("Found Facebook data matching date range. Storing values.")
1461944762868:} else {
1461944762869:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461944762872:print(paste("Attempt", attempt))
1461944762873:pull <- NULL}
1461944762876:if (attempt > 100) {
1461944762877:print('Too many attempts. Skipping.')
1461944762882:pull <- NULL
1461944762884:break
1461944762885:} else {}
1461944762886:}
1461944762890:pulllength <- ncol(pull)
1461944762891:rpull = pull[rev(rownames(pull)),]
1461944762895:hold <- rbind(hold,rpull)
1461944762896:rawhold <- hold
1461944762898:}
1461944762903:rhold = hold[rev(rownames(hold)),]
1461944762904:rhold$value = shift(rhold$value, 1)
1461944762905:hold = rhold[rev(rownames(rhold)),]
1461944762906:hold$value[1] = rawhold$value[1]
1461944762910:hours <- seq(0,23)
1461944762911:names(hours) <- paste("Hour", hours)
1461944762914:subtypes <- c('link','comment', 'like')
1461944762915:names(subtypes) <- c('Shares','Comments', 'Likes')
1461944762920:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461944762921:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461944762924:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461944762927:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461944762930:for (type in 1:length(subtypes)) {
1461944762932:typehold <- NA
1461944762934:typehold <- hold[hold$variable == subtypes[type],]
1461944762937:pagedata <- cbind(NA,pagedata)
1461944762938:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944762939:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461944762945:metrics <- c(metrics,subtypes[type])
1461944762946:}
1461944762950:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461944762952:for (demographic in 1:length(demographics)) {
1461944762956:print(names(demographics[demographic]))
1461944762958:typehold <- NA
1461944762960:typehold <- hold[hold$variable == demographics[demographic],]
1461944762961:typehold[typehold$value <= 10,] <- NA
1461944762966:pagedata <- cbind(NA,pagedata)
1461944762968:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944762970:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461944762972:metrics <- c(metrics,demographics[demographic])
1461944762974:}
1461944762978:} else if ((metrics)[metric] == 'page_fans_online') {
1461944762982:for (hour in 1:length(hours)) {
1461944762985:typehold <- NA
1461944762986:typehold <- hold[hold$variable == hours[hour],]
1461944762991:pagedata <- cbind(NA,pagedata)
1461944762993:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944762995:colnames(pagedata)[1] = paste("hour",hours[hour])
1461944762999:metrics <- c(metrics,hours[hour])
1461944763000:}
1461944763002:} else {
1461944763005:pagedata <- cbind(NA,pagedata)
1461944763007:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461944763009:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461944763012:}
1461944763015:cat("\n\n")
1461944763018:print(head(pagedata))
1461944763020:cat("\n")
1461944763023:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461944763025:break
1461944763026:} else {
1461944763030:}
1461944763035:pagedata.tempstore <- pagedata
1461944763038:#Page Metrics to remove because they have subtypes
1461944763040:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1461944763045:# Page Metrics to manually create
1461944763047:metrics <- c(metrics,"organic reach")
1461944763049:names(metrics)[length(metrics)] <- c("Organic Reach")
1461944763052:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1461944763055:colnames(pagedata)[1] = "organic reach"
1461944763058:# Final dataset formatting
1461944763060:pagedatastore <- pagedata
1461944763061:#pagedata <- pagedatastore
1461944763063:pagedata2 <- pagedata
1461944763068:# reorder and null NA's for excel
1461944763070:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1461944763072:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1461944763075:#pagedata2[is.na(pagedata2)] <- ""
1461944763077:#pagedata2[pagedata2 == 0] <- ""
1461944763081:# store final dataset
1461944763084:pagedata <- pagedata2
1461944763087:### Post Metrics #############################
1461944763089:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1461944763091:# Most are automated, and will continue to retry through errors until a value is found.
1461944763093:# Manual modifications are run after initial data acquisition.
1461944763097:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1461944763099:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1461944763102:# Populate sets with values from pull
1461944763106:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944763109:page$datetime <- format.facebook.date(page$created_time)
1461944763111:page$month <- format(page$datetime, "%Y-%m")
1461944763115:page$day <- format(page$datetime, "%Y-%m-%d")
1461944763119:page$datetime <- as.Date(page$datetime)
1461944763122:#page$month <- as.Date(page$month)
1461944763123:page$day <- as.Date(page$day)
1461944763125:} else {
1461944763127:print("Date fields already exist for Post Data.")
1461944763129:}
1461944763134:postdata <- 0
1461944763136:postdata <- page[page$day > floor,]
1461944763138:postdata <- postdata[postdata$day < roof,]
1461944763141:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461944763148:# Name column for usability
1461944763150:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461944763153:rows <- nrow(postdata)
1461944763155:lpostmetrics <- postmetrics
1461944763159:#testlength <- 2
1461944763162:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461944763169:for (pmetric in 1:length(postmetrics)) {
1461944763171:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461944763176:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461944763178:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944763180:names(phold) <- c("id","name","period","title","description","value","variable")
1461944763182:} else {
1461944763185:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461944763188:names(phold) <- c("id","name","period","title","description","value")
1461944763191:}
1461944763198:for (post in 1:nrow(postdata)) {
1461944763202:period <- "lifetime"
1461944763207:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461944763213:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461944763215:print('Not a Facebook Video.')
1461944763217:phold <- rbind(phold, NA)
1461944763219:next()
1461944763221:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461944763223:} else {
1461944763227:}
1461944763232:postpull <- NULL
1461944763235:attempt <- 1
1461944763240:while( is.null(postpull) && attempt <= 50) {
1461944763242:attempt <- attempt + 1
1461944763244:try(
1461944763247:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461944763251:#,silent=TRUE
1461944763253:)
1461944763255:if (attempt > 10) {
1461944763257:print('Too many attempts. Skipping.')
1461944763260:postpull <- NULL
1461944763263:break
1461944763265:} else {
1461944763268:print('Retrying.')
1461944763270:}
1461944763277:colnames(phold) <- names(postpull)
1461944763279:phold <- rbind(phold, postpull)
1461944763282:}
1461944763285:pholdstore <- phold
1461944763289:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461944763292:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461944763296:phold <- phold[-1,]
1461944763300:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461944763305:postmetrics <- postmetrics[-pmetric]
1461944763308:pmetric <- pmetric + 1
1461944763312:for (ptype in (1:length(psubtypes))) {
1461944763316:ptyphehold <- NA
1461944763318:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461944763323:postdata <- cbind(NA,postdata)
1461944763327:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461944763332:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461944763334:postmetrics <- c(postmetrics,psubtypes[ptype])
1461944763336:}
1461944763346:} else {
1461944763348:postdata <- cbind(NA,postdata)
1461944763352:postdata[1:length(phold$value),1] <- phold$value
1461944763354:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461944763357:}
1461944763365:cat("\n\n")
1461944763368:print(head(postdata))
1461944763370:cat("\n")
1461944763374:}
1461944763379:postdatastore <- postdata
1461944763388:# Post Metrics to manually create
1461944763390:postmetrics <- c(postmetrics,"organic reach")
1461944763395:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1461944763400:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1461944763402:colnames(postdata)[1] = "organic reach"
1461944763408:# Final dataset formatting
1461944763411:#postdatastore <- postdata
1461944763414:#postdata <- postdatastore
1461944763419:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1461944763425:# reorder and null NA's for Excel
1461944763428:postdata2 <- postdata
1461944763430:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1461944763433:postdata2[is.na(postdata2)] <- ""
1461944763435:postdata2[postdata2 == 0] <- ""
1461944763442:# store final dataset
1461944763445:postdata <- as.data.frame(postdata2)
1461944763450:# Outputs -----------------------------------------------------------------
1461944763457:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461944763460:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461944763465:datafolder <- "Data"
1461944763471:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461944763480:# Rename columns for Excel readability
1461944763485:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461944763490:# output Page dataset as final csv
1461944763495:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461944763499:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461944763503:?wri
1461944763506:# Rename columns for Excel readability
1461944763509:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461944763514:# output Post dataset as final Excel
1461944763520:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461944763525:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461944763536:# Raw Data
1461944763541:# output dataset as raw csv
1461944763546:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461944763554:totalpagedata <- rbind(totalpagedata, pagedata)
1461944763558:totalpostdata <- rbind(totalpostdata, postdata)
1461944763567:}
1461944770210:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("TWE","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461944770220:# Rename columns for Excel readability
1461944770220:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461944770222:# output Post dataset as final Excel
1461944770222:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461944770222:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("TWE","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461944770233:# Images
1461944770233:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1461944770235:#for (picture in (1:nrow(postdata))) {
1461944770236:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1461944770239:#
1461944770239:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1461944770239:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1461944770240:#
1461944770240:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1461944770241:# Edit the core program and change feedback loop.
1461944770241:#
1461944770241:#}
1461944835183:posts <- 5000
1461944835186:roof = Sys.Date() #"2015-12-31"
1461944835186:floor = "2016-04-01" #"2015-05-01"
1461944835194:range = seq(as.Date(floor), as.Date(roof), by="days")
1461944838341:ftokens <- c(
1461944838342:#Sledgehammer Wine
1461944838343:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461944838343:#Chateau Saint Jean
1461944838344:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461944838344:#19 Crimes
1461944838344:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461944838344:#Beringer Vneyards
1461944838345:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461944838345:#100% Canadian Milk
1461944838349:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461944838349:#Lait 100% Canadien
1461944838350:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461944838350:#Recharge with Milk
1461944838352:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461944838352:#Misc
1461944838354:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461944838355:#Baron
1461944838355:"EAACEdEose0cBAGykbTGkQBxALbyuXlTrhCGQbHY8B120pXdJca4gv03JrZAaioZBNg9f0ZAFnjiXYt6AM2ZC8ZAFgvSXTnQXq4CJfiDz80Xb57svAUdtYIcNSi4kopiaWvA0KSS4vhBjdMeQrZAVnlebvsd15VegJnVhmvWpEqnQZDZD"
1461944838356:)
1461944840341:totalpagedata <- data.frame()
1461944840342:totalpostdata <- data.frame()
1461944843047:ftoken <- ftokens[brand]
1461944843207:## User Id
1461944843409:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461944843565:userid = "10153046308598756"
1461944843765:# Access public personal data; basically a ftoken test
1461944843934:me <- getUsers("me", token=ftoken)
1461944845039:print(me$name)
1461944845040:## Page Id
1461944845042:# Define which page will be used for the data collection. Change id's as necessary.
1461944845042:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461944845043:pageid = me$id
1461944845056:# Acquisition -------------------------------------------------------------
1461944845175:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461944845299:page <- getPage(pageid, ftoken, n = posts)
1461944846921:page.store <- page
1461944848652:page
1461944855442:# Create new vectors in dataset with datetime, month, and day formattiong
1461944855554:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944855730:page$datetime <- format.facebook.date(page$created_time)
1461944855890:page$month <- format(page$datetime, "%Y-%m")
1461944856026:page$day <- format(page$datetime, "%Y-%m-%d")
1461944856190:page$datetime <- as.Date(page$datetime)
1461944856310:#page$month <- as.Date(page$month)
1461944856491:page$day <- as.Date(page$day)
1461944856606:} else {
1461944856775:print("Date fields already exist.")
1461944856911:}
1461944857060:# Processing --------------------------------------------------------------
1461944857211:# Process data to clean dataset and augment it with more data than default fields.
1461944857391:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1461944857539:## Cleaning =================================
1461944857726:# Page and Post Datasets
1461944857843:# Split dataset into two for pages and post data
1461944857993:# Create initial null sets
1461944858176:pagedata <- 0
1461944858327:postdata <- 0
1461944858511:## Appending =================================
1461944858643:### Page Metrics #############################
1461944858810:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461944858979:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461944859129:# Page Metrics to automatically pull
1461944859281:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461944859611:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461944859745:pagemetrics <- metrics
1461944859927:# Prep dataset by breaking into weeks
1461944860080:pagedata <- 0
1461944860245:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461944860562:colnames(pagedata) = c("pageid", "page", "date")
1461944860728:pagedata$page = page$from_name[1]
1461944860878:pagedata$pageid = page$from_id[1]
1461944861095:divisor = 5
1461944861230:remainder = length(range)%%divisor;
1461944861383:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461944861546:weeks <- (nrow(pagedata)/5)-2
1461944861710:# Start Data Acquisition Loop
1461944861913:for (metric in 1:length(metrics)) {
1461944862059:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461944862230:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461944862413:period = 'lifetime'
1461944862560:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461944862746:period = 'day'
1461944862876:tempfloor = "2014-02-01"
1461944863375:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461944863459:if (floor < tempfloor) {
1461944863565:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461944863630:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461944863710:weeks = tempweeks
1461944863795:} else {}
1461944863878:} else {
1461944863983:period = 'day'
1461944864049:weeks <- (nrow(pagedata)/5)-2
1461944864131:}
1461944864215:hold <- matrix(0, nrow=0, ncol=7)
1461944864293:for (week in 0:weeks) {
1461944864381:end <- pagedata$date[(week*5)+1]
1461944864457:start <- pagedata$date[((week+1)*5)+1]
1461944864539:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461944864633:pull <- NULL
1461944864712:attempt <- 1
1461944864828:while(is.null(pull) && attempt <= 10) {
1461944864912:attempt <- attempt + 1
1461944864993:try(
1461944865060:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461944865145:)
1461944865228:if (is.null(pull)) {
1461944865328:print("Empty Pull. Re-attempting.")
1461944865407:print(paste("Attempt", attempt))
1461944865467:} else {
1461944865557:pull$datetime <- format.facebook.date(pull$end_time)
1461944865665:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461944865731:pull$datetime <- as.Date(pull$datetime)
1461944865810:#page$month <- as.Date(page$month)
1461944865893:pull$day <- as.Date(pull$day)
1461944865978:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461944866060:print("Found Facebook data matching date range. Storing values.")
1461944866143:} else {
1461944866227:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461944866309:print(paste("Attempt", attempt))
1461944866399:pull <- NULL}
1461944866483:if (attempt > 100) {
1461944866566:print('Too many attempts. Skipping.')
1461944866663:pull <- NULL
1461944866733:break
1461944866816:} else {}
1461944866899:}
1461944866980:pulllength <- ncol(pull)
1461944867094:rpull = pull[rev(rownames(pull)),]
1461944867145:hold <- rbind(hold,rpull)
1461944867260:rawhold <- hold
1461944867344:}
1461944867679:rhold = hold[rev(rownames(hold)),]
1461944867991:rhold$value = shift(rhold$value, 1)
1461944868144:hold = rhold[rev(rownames(rhold)),]
1461944868293:hold$value[1] = rawhold$value[1]
1461944868952:hours <- seq(0,23)
1461944869200:names(hours) <- paste("Hour", hours)
1461944869385:subtypes <- c('link','comment', 'like')
1461944869610:names(subtypes) <- c('Shares','Comments', 'Likes')
1461944871087:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461944871267:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461944871410:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461944871604:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461944871789:for (type in 1:length(subtypes)) {
1461944872254:typehold <- NA
1461944872404:typehold <- hold[hold$variable == subtypes[type],]
1461944872907:pagedata <- cbind(NA,pagedata)
1461944872985:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944873077:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461944873162:metrics <- c(metrics,subtypes[type])
1461944873247:}
1461944873355:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461944873439:for (demographic in 1:length(demographics)) {
1461944873511:print(names(demographics[demographic]))
1461944873575:typehold <- NA
1461944873686:typehold <- hold[hold$variable == demographics[demographic],]
1461944873761:typehold[typehold$value <= 10,] <- NA
1461944873846:pagedata <- cbind(NA,pagedata)
1461944873922:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944874006:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461944874128:metrics <- c(metrics,demographics[demographic])
1461944874165:}
1461944874255:} else if ((metrics)[metric] == 'page_fans_online') {
1461944874339:for (hour in 1:length(hours)) {
1461944874425:typehold <- NA
1461944874510:typehold <- hold[hold$variable == hours[hour],]
1461944874591:pagedata <- cbind(NA,pagedata)
1461944874675:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944874756:colnames(pagedata)[1] = paste("hour",hours[hour])
1461944874838:metrics <- c(metrics,hours[hour])
1461944874930:}
1461944875006:} else {
1461944875101:pagedata <- cbind(NA,pagedata)
1461944875168:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461944875263:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461944875373:}
1461944875429:cat("\n\n")
1461944875511:print(head(pagedata))
1461944875595:cat("\n")
1461944875705:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461944875774:break
1461944875875:} else {
1461944876015:}
1461944893248:posts <- 5000
1461944893249:roof = Sys.Date() #"2015-12-31"
1461944893250:floor = "2016-04-19" #"2015-05-01"
1461944893251:range = seq(as.Date(floor), as.Date(roof), by="days")
1461944899380:efine data range for data (2012 is out of bounds for some metrics)
1461944899382:posts <- 5000
1461944899382:roof = Sys.Date() #"2015-12-31"
1461944899383:floor = "2016-04-19" #"2015-05-01"
1461944899383:range = seq(as.Date(floor), as.Date(roof), by="days")
1461944899384:## Access ftoken
1461944899384:# Use token from Facebook Graph API
1461944899387:# token generated here: https://developers.facebook.com/tools/explorer
1461944899388:# Lasts two hours, and must be changed depending on page and permissions
1461944899388:ftokens <- c(
1461944899388:#Sledgehammer Wine
1461944899389:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461944899389:#Chateau Saint Jean
1461944899389:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461944899389:#19 Crimes
1461944899389:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461944899390:#Beringer Vneyards
1461944899390:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461944899390:#100% Canadian Milk
1461944899390:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461944899390:#Lait 100% Canadien
1461944899391:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461944899391:#Recharge with Milk
1461944899391:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461944899391:#Misc
1461944899392:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461944899392:#Baron
1461944899396:"EAACEdEose0cBAGykbTGkQBxALbyuXlTrhCGQbHY8B120pXdJca4gv03JrZAaioZBNg9f0ZAFnjiXYt6AM2ZC8ZAFgvSXTnQXq4CJfiDz80Xb57svAUdtYIcNSi4kopiaWvA0KSS4vhBjdMeQrZAVnlebvsd15VegJnVhmvWpEqnQZDZD"
1461944899399:)
1461944903445:totalpagedata <- data.frame()
1461944903447:totalpostdata <- data.frame()
1461944907136:ftoken <- ftokens[brand]
1461944920547:## User Id
1461944920548:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461944920550:userid = "10153046308598756"
1461944920551:# Access public personal data; basically a ftoken test
1461944920551:me <- getUsers("me", token=ftoken)
1461944920555:print(me$name)
1461944920557:## Page Id
1461944920558:# Define which page will be used for the data collection. Change id's as necessary.
1461944920558:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461944920562:pageid = me$id
1461944920563:# Acquisition -------------------------------------------------------------
1461944920566:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461944920566:page <- getPage(pageid, ftoken, n = posts)
1461944920567:page.store <- page
1461944920567:# Create new vectors in dataset with datetime, month, and day formattiong
1461944920570:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944920571:page$datetime <- format.facebook.date(page$created_time)
1461944920574:page$month <- format(page$datetime, "%Y-%m")
1461944920574:page$day <- format(page$datetime, "%Y-%m-%d")
1461944920575:page$datetime <- as.Date(page$datetime)
1461944920575:#page$month <- as.Date(page$month)
1461944920576:page$day <- as.Date(page$day)
1461944920577:} else {
1461944920577:print("Date fields already exist.")
1461944920578:}
1461944920579:# Processing --------------------------------------------------------------
1461944920579:# Process data to clean dataset and augment it with more data than default fields.
1461944920582:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1461944920583:## Cleaning =================================
1461944920583:# Page and Post Datasets
1461944920583:# Split dataset into two for pages and post data
1461944920584:# Create initial null sets
1461944920584:pagedata <- 0
1461944920585:postdata <- 0
1461944920585:## Appending =================================
1461944920588:### Page Metrics #############################
1461944920588:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461944920592:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461944920593:# Page Metrics to automatically pull
1461944920593:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461944920596:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461944920597:pagemetrics <- metrics
1461944920601:# Prep dataset by breaking into weeks
1461944920601:pagedata <- 0
1461944920604:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461944920607:colnames(pagedata) = c("pageid", "page", "date")
1461944920608:pagedata$page = page$from_name[1]
1461944920609:pagedata$pageid = page$from_id[1]
1461944920612:divisor = 5
1461944920612:remainder = length(range)%%divisor;
1461944920615:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461944920616:weeks <- (nrow(pagedata)/5)-2
1461944920619:# Start Data Acquisition Loop
1461944920620:for (metric in 1:length(metrics)) {
1461944920620:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461944920621:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461944920624:period = 'lifetime'
1461944920625:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461944920628:period = 'day'
1461944920629:tempfloor = "2014-02-01"
1461944920629:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461944920629:if (floor < tempfloor) {
1461944920630:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461944920633:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461944920634:weeks = tempweeks
1461944920638:} else {}
1461944920640:} else {
1461944920641:period = 'day'
1461944920644:weeks <- (nrow(pagedata)/5)-2
1461944920644:}
1461944920645:hold <- matrix(0, nrow=0, ncol=7)
1461944920645:for (week in 0:weeks) {
1461944920649:end <- pagedata$date[(week*5)+1]
1461944920650:start <- pagedata$date[((week+1)*5)+1]
1461944920654:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461944920655:pull <- NULL
1461944920657:attempt <- 1
1461944920658:while(is.null(pull) && attempt <= 10) {
1461944920661:attempt <- attempt + 1
1461944920662:try(
1461944920665:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461944920665:)
1461944920669:if (is.null(pull)) {
1461944920670:print("Empty Pull. Re-attempting.")
1461944920672:print(paste("Attempt", attempt))
1461944920673:} else {
1461944920676:pull$datetime <- format.facebook.date(pull$end_time)
1461944920677:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461944920682:pull$datetime <- as.Date(pull$datetime)
1461944920683:#page$month <- as.Date(page$month)
1461944920684:pull$day <- as.Date(pull$day)
1461944920688:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461944920689:print("Found Facebook data matching date range. Storing values.")
1461944920691:} else {
1461944920691:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461944920695:print(paste("Attempt", attempt))
1461944920696:pull <- NULL}
1461944920699:if (attempt > 100) {
1461944920700:print('Too many attempts. Skipping.')
1461944920700:pull <- NULL
1461944920702:break
1461944920703:} else {}
1461944920704:}
1461944920705:pulllength <- ncol(pull)
1461944920709:rpull = pull[rev(rownames(pull)),]
1461944920711:hold <- rbind(hold,rpull)
1461944920712:rawhold <- hold
1461944920713:}
1461944920718:rhold = hold[rev(rownames(hold)),]
1461944920718:rhold$value = shift(rhold$value, 1)
1461944920721:hold = rhold[rev(rownames(rhold)),]
1461944920722:hold$value[1] = rawhold$value[1]
1461944920725:hours <- seq(0,23)
1461944920726:names(hours) <- paste("Hour", hours)
1461944920730:subtypes <- c('link','comment', 'like')
1461944920731:names(subtypes) <- c('Shares','Comments', 'Likes')
1461944920735:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461944920736:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461944920739:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461944920743:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461944920746:for (type in 1:length(subtypes)) {
1461944920747:typehold <- NA
1461944920748:typehold <- hold[hold$variable == subtypes[type],]
1461944920751:pagedata <- cbind(NA,pagedata)
1461944920752:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944920754:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461944920757:metrics <- c(metrics,subtypes[type])
1461944920758:}
1461944920763:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461944920765:for (demographic in 1:length(demographics)) {
1461944920767:print(names(demographics[demographic]))
1461944920770:typehold <- NA
1461944920771:typehold <- hold[hold$variable == demographics[demographic],]
1461944920774:typehold[typehold$value <= 10,] <- NA
1461944920777:pagedata <- cbind(NA,pagedata)
1461944920779:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944920781:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461944920784:metrics <- c(metrics,demographics[demographic])
1461944920786:}
1461944920791:} else if ((metrics)[metric] == 'page_fans_online') {
1461944920794:for (hour in 1:length(hours)) {
1461944920796:typehold <- NA
1461944920798:typehold <- hold[hold$variable == hours[hour],]
1461944920801:pagedata <- cbind(NA,pagedata)
1461944920803:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461944920804:colnames(pagedata)[1] = paste("hour",hours[hour])
1461944920807:metrics <- c(metrics,hours[hour])
1461944920809:}
1461944920810:} else {
1461944920813:pagedata <- cbind(NA,pagedata)
1461944920815:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461944920817:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461944920821:}
1461944920825:cat("\n\n")
1461944920827:print(head(pagedata))
1461944920829:cat("\n")
1461944920833:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461944920834:break
1461944920837:} else {
1461944920839:}
1461944920856:pagedata.tempstore <- pagedata
1461944941740:1.5.0 #####################
1461944941741:# Summary -----------------------------------------------------------------
1461944941743:# Todo --------------------------------------------------------------------
1461944941743:# - Run script for all major brands
1461944941747:# - Create 'participation rate' function
1461944941747:# - Incorporate Twitter
1461944941750:# Setup -------------------------------------------------------------------
1461944941751:# Load and install all necessary packages for the script
1461944941754:# Required Packages for dataframes, forecasting, graphical visualization, and development
1461944941754:# Use 'install.packages()' if unavailable.
1461944941755:#library(zoo)
1461944941755:#library(forecast)
1461944941756:library(ggplot2)
1461944942067:#library(scales)
1461944942067:library(devtools)
1461944942122:library(compare)
1461944942152:library(xlsx)
1461944943236:require(httr)
1461944943276:require(rjson)
1461944943317:require(RCurl)
1461944943478:# Pull most up to date Github repositories for relevant packages
1461944943478:# Not frequently updated; does not need to be run every time.
1461944943480:#install_github("pablobarbera/Rfacebook/Rfacebook")
1461944943481:#install_github("pablobarbera/instaR/instaR")
1461944943481:# Required packags for plugging into Facebook API
1461944943481:#library(twitteR)
1461944943481:library(Rfacebook)
1461944943560:#library(instaR)
1461944943560:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1461944943562:# https://instagram.com/developer/authentication/?hl=en
1461944943563:setwd("~/")
1461944943563:getwd()
1461944943564:# Authorize with Facebook
1461944943567:#Using 'rFacebook' from Github
1461944943567:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461944950920:# User Functions
1461944950921:# Function to convert Facebook date format to R date format
1461944950923:format.facebook.date <- function(datestring) {
1461944950923:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461944950924:}
1461944950925:# Shift a vector up by an amount
1461944950925:shift <- function(x, n){
1461944950925:c(x[-(seq(n))], rep(NA, n))
1461944950926:}
1461944950927:# Get gcd from vector
1461944950927:gcd <- function(x,y) {
1461944950930:r <- x%%y;
1461944950930:return(ifelse(r, gcd(y, r), y))
1461944950931:}
1461944950931:# Inputs ------------------------------------------------------------------
1461944950932:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1461944950935:# Define data range for data (2012 is out of bounds for some metrics)
1461944950935:posts <- 5000
1461944950939:roof = Sys.Date() #"2015-12-31"
1461944950939:floor = "2016-04-19" #"2015-05-01"
1461944950943:range = seq(as.Date(floor), as.Date(roof), by="days")
1461944950947:## Access ftoken
1461944950947:# Use token from Facebook Graph API
1461944950950:# token generated here: https://developers.facebook.com/tools/explorer
1461944950950:# Lasts two hours, and must be changed depending on page and permissions
1461944950951:ftokens <- c(
1461944950951:#Sledgehammer Wine
1461944950954:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461944950954:#Chateau Saint Jean
1461944950955:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461944950955:#19 Crimes
1461944950955:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461944950956:#Beringer Vneyards
1461944950956:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461944950956:#100% Canadian Milk
1461944950957:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461944950957:#Lait 100% Canadien
1461944950957:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461944950958:#Recharge with Milk
1461944950958:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461944950958:#Misc
1461944950959:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461944950959:#Baron
1461944950959:"EAACEdEose0cBAGykbTGkQBxALbyuXlTrhCGQbHY8B120pXdJca4gv03JrZAaioZBNg9f0ZAFnjiXYt6AM2ZC8ZAFgvSXTnQXq4CJfiDz80Xb57svAUdtYIcNSi4kopiaWvA0KSS4vhBjdMeQrZAVnlebvsd15VegJnVhmvWpEqnQZDZD"
1461944950960:)
1461944950961:totalpagedata <- data.frame()
1461944950961:totalpostdata <- data.frame()
1461944953268:ftoken <- ftokens[brand]
1461944953770:## User Id
1461944953854:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461944953953:userid = "10153046308598756"
1461944954020:# Access public personal data; basically a ftoken test
1461944954157:print(me$name)
1461944954159:me <- getUsers("me", token=ftoken)
1461944954946:## Page Id
1461944954947:# Define which page will be used for the data collection. Change id's as necessary.
1461944954949:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461944954949:pageid = me$id
1461944954949:# Acquisition -------------------------------------------------------------
1461944954950:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461944954950:page <- getPage(pageid, ftoken, n = posts)
1461944956354:page.store <- page
1461944956355:# Create new vectors in dataset with datetime, month, and day formattiong
1461944956357:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461944956357:page$datetime <- format.facebook.date(page$created_time)
1461944956361:page$month <- format(page$datetime, "%Y-%m")
1461944956362:page$day <- format(page$datetime, "%Y-%m-%d")
1461944956365:page$datetime <- as.Date(page$datetime)
1461944956366:#page$month <- as.Date(page$month)
1461944956369:page$day <- as.Date(page$day)
1461944956370:} else {
1461944956372:print("Date fields already exist.")
1461944956373:}
1461944956375:# Processing --------------------------------------------------------------
1461944956376:# Process data to clean dataset and augment it with more data than default fields.
1461944956378:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1461944956378:## Cleaning =================================
1461944956418:# Page and Post Datasets
1461944956420:# Split dataset into two for pages and post data
1461944956421:# Create initial null sets
1461944956487:pagedata <- 0
1461944956763:postdata <- 0
1461944956822:## Appending =================================
1461944956824:### Page Metrics #############################
1461944956955:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461944956970:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461944957019:# Page Metrics to automatically pull
1461944967548:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461944967549:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461944967551:pagemetrics <- metrics
1461944967551:# Prep dataset by breaking into weeks
1461944967552:pagedata <- 0
1461944967552:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461944967554:colnames(pagedata) = c("pageid", "page", "date")
1461944967554:pagedata$page = page$from_name[1]
1461944967557:pagedata$pageid = page$from_id[1]
1461944967558:divisor = 5
1461944967560:remainder = length(range)%%divisor;
1461944967561:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461944969005:weeks <- (nrow(pagedata)/5)-2
1461944970487:weeks
1461944974022:nrow(pagedata)
1461944975706:pagedata
1461944979839:pagedata/5
1461944993892:tempfloor = "2014-02-01"
1461944994089:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461944994371:if (floor < tempfloor) {
1461944994729:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461944995044:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461944995404:weeks = tempweeks
1461944998491:}
1461944999673:weeks
1461945004096:tempweeks
1461945011484:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461945011977:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461945012264:period = 'lifetime'
1461945012450:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461945012625:period = 'day'
1461945012794:tempfloor = "2014-02-01"
1461945012943:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461945013115:if (floor < tempfloor) {
1461945013277:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461945013409:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461945013567:weeks = tempweeks
1461945013740:} else {}
1461945013913:} else {
1461945014081:period = 'day'
1461945014239:weeks <- (nrow(pagedata)/5)-2
1461945014585:}
1461945015961:hold <- matrix(0, nrow=0, ncol=7)
1461945018273:weeks
1461945029563:weeks <- 2 # (nrow(pagedata)/5)-2
1461945035803:# Start Data Acquisition Loop
1461945035804:for (metric in 1:length(metrics)) {
1461945035806:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461945035807:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461945035810:period = 'lifetime'
1461945035810:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461945035810:period = 'day'
1461945035811:tempfloor = "2014-02-01"
1461945035811:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461945035811:if (floor < tempfloor) {
1461945035812:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461945035812:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461945035813:weeks = tempweeks
1461945035814:} else {}
1461945035817:} else {
1461945035817:period = 'day'
1461945035822:weeks <- (nrow(pagedata)/5)-2
1461945035824:}
1461945035825:hold <- matrix(0, nrow=0, ncol=7)
1461945035829:for (week in 0:weeks) {
1461945035831:end <- pagedata$date[(week*5)+1]
1461945035832:start <- pagedata$date[((week+1)*5)+1]
1461945035836:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461945035837:pull <- NULL
1461945035839:attempt <- 1
1461945035840:while(is.null(pull) && attempt <= 10) {
1461945035844:attempt <- attempt + 1
1461945035846:try(
1461945035847:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461945035850:)
1461945035852:if (is.null(pull)) {
1461945035854:print("Empty Pull. Re-attempting.")
1461945035855:print(paste("Attempt", attempt))
1461945035858:} else {
1461945035859:pull$datetime <- format.facebook.date(pull$end_time)
1461945035861:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461945035863:pull$datetime <- as.Date(pull$datetime)
1461945035869:#page$month <- as.Date(page$month)
1461945035871:pull$day <- as.Date(pull$day)
1461945035873:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461945035876:print("Found Facebook data matching date range. Storing values.")
1461945035878:} else {
1461945035880:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461945035881:print(paste("Attempt", attempt))
1461945035882:pull <- NULL}
1461945035884:if (attempt > 100) {
1461945035885:print('Too many attempts. Skipping.')
1461945035888:pull <- NULL
1461945035890:break
1461945035892:} else {}
1461945035893:}
1461945035897:pulllength <- ncol(pull)
1461945035899:rpull = pull[rev(rownames(pull)),]
1461945035901:hold <- rbind(hold,rpull)
1461945035903:rawhold <- hold
1461945035904:}
1461945035908:rhold = hold[rev(rownames(hold)),]
1461945035909:rhold$value = shift(rhold$value, 1)
1461945035912:hold = rhold[rev(rownames(rhold)),]
1461945035913:hold$value[1] = rawhold$value[1]
1461945035915:hours <- seq(0,23)
1461945035917:names(hours) <- paste("Hour", hours)
1461945035919:subtypes <- c('link','comment', 'like')
1461945035920:names(subtypes) <- c('Shares','Comments', 'Likes')
1461945035922:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461945035925:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461945035926:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461945035932:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461945035935:for (type in 1:length(subtypes)) {
1461945035937:typehold <- NA
1461945035938:typehold <- hold[hold$variable == subtypes[type],]
1461945035940:pagedata <- cbind(NA,pagedata)
1461945035942:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461945035943:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461945035947:metrics <- c(metrics,subtypes[type])
1461945035949:}
1461945035954:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461945035958:for (demographic in 1:length(demographics)) {
1461945035962:print(names(demographics[demographic]))
1461945035965:typehold <- NA
1461945035967:typehold <- hold[hold$variable == demographics[demographic],]
1461945035970:typehold[typehold$value <= 10,] <- NA
1461945035974:pagedata <- cbind(NA,pagedata)
1461945035976:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461945035978:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461945035982:metrics <- c(metrics,demographics[demographic])
1461945035984:}
1461945035986:} else if ((metrics)[metric] == 'page_fans_online') {
1461945035990:for (hour in 1:length(hours)) {
1461945035992:typehold <- NA
1461945035993:typehold <- hold[hold$variable == hours[hour],]
1461945035996:pagedata <- cbind(NA,pagedata)
1461945035998:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461945036001:colnames(pagedata)[1] = paste("hour",hours[hour])
1461945036006:metrics <- c(metrics,hours[hour])
1461945036008:}
1461945036010:} else {
1461945036013:pagedata <- cbind(NA,pagedata)
1461945036014:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461945036016:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461945036019:}
1461945036022:cat("\n\n")
1461945036024:print(head(pagedata))
1461945036028:cat("\n")
1461945036032:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461945036033:break
1461945036035:} else {
1461945036037:}
1461945041296:pagedata.tempstore <- pagedata
1461945044429:pagedata
1461945054666:[age]
1461945055436:page
1461945081864:t initials; what is the access ftoken, the relevant ids, and other necessary variables
1461945081865:# Define data range for data (2012 is out of bounds for some metrics)
1461945081866:posts <- 5000
1461945081867:roof = Sys.Date() #"2015-12-31"
1461945081867:floor = "2016-04-01" #"2015-05-01"
1461945081868:range = seq(as.Date(floor), as.Date(roof), by="days")
1461945085458:ftokens <- c(
1461945085458:#Sledgehammer Wine
1461945085460:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461945085460:#Chateau Saint Jean
1461945085461:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461945085461:#19 Crimes
1461945085461:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461945085462:#Beringer Vneyards
1461945085462:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461945085462:#100% Canadian Milk
1461945085462:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461945085463:#Lait 100% Canadien
1461945085463:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461945085463:#Recharge with Milk
1461945085463:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461945085464:#Misc
1461945085464:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461945085464:#Baron
1461945085464:"EAACEdEose0cBAGykbTGkQBxALbyuXlTrhCGQbHY8B120pXdJca4gv03JrZAaioZBNg9f0ZAFnjiXYt6AM2ZC8ZAFgvSXTnQXq4CJfiDz80Xb57svAUdtYIcNSi4kopiaWvA0KSS4vhBjdMeQrZAVnlebvsd15VegJnVhmvWpEqnQZDZD"
1461945085464:)
1461945087647:totalpagedata <- data.frame()
1461945087648:totalpostdata <- data.frame()
1461945095630:ftoken <- ftokens[brand]
1461945095631:## User Id
1461945095633:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461945095633:userid = "10153046308598756"
1461945095633:# Access public personal data; basically a ftoken test
1461945095634:me <- getUsers("me", token=ftoken)
1461945096788:print(me$name)
1461945096789:## Page Id
1461945096791:# Define which page will be used for the data collection. Change id's as necessary.
1461945096791:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461945096792:pageid = me$id
1461945096793:# Acquisition -------------------------------------------------------------
1461945096796:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461945096797:page <- getPage(pageid, ftoken, n = posts)
1461945098403:page.store <- page
1461945098404:# Create new vectors in dataset with datetime, month, and day formattiong
1461945098406:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461945098407:page$datetime <- format.facebook.date(page$created_time)
1461945098410:page$month <- format(page$datetime, "%Y-%m")
1461945098411:page$day <- format(page$datetime, "%Y-%m-%d")
1461945098412:page$datetime <- as.Date(page$datetime)
1461945098415:#page$month <- as.Date(page$month)
1461945098415:page$day <- as.Date(page$day)
1461945098418:} else {
1461945098419:print("Date fields already exist.")
1461945098422:}
1461945098424:ftoken <- ftokens[brand]
1461945098426:## User Id
1461945098426:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461945098429:userid = "10153046308598756"
1461945098430:# Access public personal data; basically a ftoken test
1461945098430:me <- getUsers("me", token=ftoken)
1461945099489:print(me$name)
1461945099491:## Page Id
1461945099492:# Define which page will be used for the data collection. Change id's as necessary.
1461945099492:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461945099496:pageid = me$id
1461945099498:# Acquisition -------------------------------------------------------------
1461945099499:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461945099501:page <- getPage(pageid, ftoken, n = posts)
1461945101126:page.store <- page
1461945101126:# Create new vectors in dataset with datetime, month, and day formattiong
1461945101128:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461945101128:page$datetime <- format.facebook.date(page$created_time)
1461945101129:page$month <- format(page$datetime, "%Y-%m")
1461945101130:page$day <- format(page$datetime, "%Y-%m-%d")
1461945101131:page$datetime <- as.Date(page$datetime)
1461945101131:#page$month <- as.Date(page$month)
1461945101132:page$day <- as.Date(page$day)
1461945101132:} else {
1461945101132:print("Date fields already exist.")
1461945101132:}
1461945106026:## Cleaning =================================
1461945106027:# Page and Post Datasets
1461945106028:# Split dataset into two for pages and post data
1461945106028:# Create initial null sets
1461945106029:pagedata <- 0
1461945106029:postdata <- 0
1461945106030:## Appending =================================
1461945106033:### Page Metrics #############################
1461945106034:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461945106037:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461945106037:# Page Metrics to automatically pull
1461945106040:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461945106041:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461945106041:pagemetrics <- metrics
1461945106042:# Prep dataset by breaking into weeks
1461945106042:pagedata <- 0
1461945106042:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461945106043:colnames(pagedata) = c("pageid", "page", "date")
1461945106043:pagedata$page = page$from_name[1]
1461945106046:pagedata$pageid = page$from_id[1]
1461945106048:divisor = 5
1461945106050:remainder = length(range)%%divisor;
1461945106051:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461945106054:weeks <- 2 # (nrow(pagedata)/5)-2
1461945106055:# Start Data Acquisition Loop
1461945106057:for (metric in 1:length(metrics)) {
1461945106058:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461945106058:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461945106062:period = 'lifetime'
1461945106062:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461945106063:period = 'day'
1461945106063:tempfloor = "2014-02-01"
1461945106064:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461945106070:if (floor < tempfloor) {
1461945106071:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461945106072:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461945106075:weeks = tempweeks
1461945106076:} else {}
1461945106079:} else {
1461945106079:period = 'day'
1461945106080:weeks <- (nrow(pagedata)/5)-2
1461945106085:}
1461945106087:hold <- matrix(0, nrow=0, ncol=7)
1461945106088:for (week in 0:weeks) {
1461945106091:end <- pagedata$date[(week*5)+1]
1461945106092:start <- pagedata$date[((week+1)*5)+1]
1461945106096:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461945106097:pull <- NULL
1461945106100:attempt <- 1
1461945106101:while(is.null(pull) && attempt <= 10) {
1461945106101:attempt <- attempt + 1
1461945106103:try(
1461945106104:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461945106107:)
1461945106108:if (is.null(pull)) {
1461945106111:print("Empty Pull. Re-attempting.")
1461945106112:print(paste("Attempt", attempt))
1461945106115:} else {
1461945106116:pull$datetime <- format.facebook.date(pull$end_time)
1461945106118:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461945106120:pull$datetime <- as.Date(pull$datetime)
1461945106123:#page$month <- as.Date(page$month)
1461945106126:pull$day <- as.Date(pull$day)
1461945106128:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461945106130:print("Found Facebook data matching date range. Storing values.")
1461945106131:} else {
1461945106134:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461945106135:print(paste("Attempt", attempt))
1461945106137:pull <- NULL}
1461945106138:if (attempt > 100) {
1461945106141:print('Too many attempts. Skipping.')
1461945106141:pull <- NULL
1461945106143:break
1461945106144:} else {}
1461945106147:}
1461945106148:pulllength <- ncol(pull)
1461945106151:rpull = pull[rev(rownames(pull)),]
1461945106153:hold <- rbind(hold,rpull)
1461945106154:rawhold <- hold
1461945106155:}
1461945106162:rhold = hold[rev(rownames(hold)),]
1461945106164:rhold$value = shift(rhold$value, 1)
1461945106166:hold = rhold[rev(rownames(rhold)),]
1461945106169:hold$value[1] = rawhold$value[1]
1461945106172:hours <- seq(0,23)
1461945106173:names(hours) <- paste("Hour", hours)
1461945106177:subtypes <- c('link','comment', 'like')
1461945106179:names(subtypes) <- c('Shares','Comments', 'Likes')
1461945106182:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461945106183:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461945106185:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461945106189:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461945106192:for (type in 1:length(subtypes)) {
1461945106193:typehold <- NA
1461945106196:typehold <- hold[hold$variable == subtypes[type],]
1461945106199:pagedata <- cbind(NA,pagedata)
1461945106200:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461945106204:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461945106207:metrics <- c(metrics,subtypes[type])
1461945106208:}
1461945106214:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461945106218:for (demographic in 1:length(demographics)) {
1461945106220:print(names(demographics[demographic]))
1461945106222:typehold <- NA
1461945106223:typehold <- hold[hold$variable == demographics[demographic],]
1461945106225:typehold[typehold$value <= 10,] <- NA
1461945106228:pagedata <- cbind(NA,pagedata)
1461945106230:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461945106233:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461945106237:metrics <- c(metrics,demographics[demographic])
1461945106239:}
1461945106243:} else if ((metrics)[metric] == 'page_fans_online') {
1461945106246:for (hour in 1:length(hours)) {
1461945106250:typehold <- NA
1461945106251:typehold <- hold[hold$variable == hours[hour],]
1461945106255:pagedata <- cbind(NA,pagedata)
1461945106256:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461945106258:colnames(pagedata)[1] = paste("hour",hours[hour])
1461945106262:metrics <- c(metrics,hours[hour])
1461945106264:}
1461945106267:} else {
1461945106270:pagedata <- cbind(NA,pagedata)
1461945106272:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461945106274:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461945106278:}
1461945106282:cat("\n\n")
1461945106285:print(head(pagedata))
1461945106287:cat("\n")
1461945106291:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461945106293:break
1461945106296:} else {
1461945106299:}
1461945156885:pagedata.tempstore <- pagedata
1461945156885:#Page Metrics to remove because they have subtypes
1461945156887:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1461945156888:# Page Metrics to manually create
1461945156888:metrics <- c(metrics,"organic reach")
1461945156892:names(metrics)[length(metrics)] <- c("Organic Reach")
1461945156894:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1461945156898:colnames(pagedata)[1] = "organic reach"
1461945156900:# Final dataset formatting
1461945156901:pagedatastore <- pagedata
1461945156902:#pagedata <- pagedatastore
1461945156902:pagedata2 <- pagedata
1461945156906:# reorder and null NA's for excel
1461945156906:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1461945156910:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1461945156911:#pagedata2[is.na(pagedata2)] <- ""
1461945156914:#pagedata2[pagedata2 == 0] <- ""
1461945156917:# store final dataset
1461945156917:pagedata <- pagedata2
1461945156920:### Post Metrics #############################
1461945156921:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1461945156924:# Most are automated, and will continue to retry through errors until a value is found.
1461945156924:# Manual modifications are run after initial data acquisition.
1461945156925:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1461945156925:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1461945156926:# Populate sets with values from pull
1461945156926:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461945156929:page$datetime <- format.facebook.date(page$created_time)
1461945156930:page$month <- format(page$datetime, "%Y-%m")
1461945156931:page$day <- format(page$datetime, "%Y-%m-%d")
1461945156931:page$datetime <- as.Date(page$datetime)
1461945156934:#page$month <- as.Date(page$month)
1461945156934:page$day <- as.Date(page$day)
1461945156935:} else {
1461945156936:print("Date fields already exist for Post Data.")
1461945156939:}
1461945156940:postdata <- 0
1461945156942:postdata <- page[page$day > floor,]
1461945156944:postdata <- postdata[postdata$day < roof,]
1461945156948:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461945156949:# Name column for usability
1461945156950:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461945156951:rows <- nrow(postdata)
1461945156952:lpostmetrics <- postmetrics
1461945156955:#testlength <- 2
1461945156956:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461945162807:pagedata
1461945164152:postdata
1461945165473:pagedata
1461945174247:### Post Metrics #############################
1461945174248:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1461945174250:# Most are automated, and will continue to retry through errors until a value is found.
1461945174250:# Manual modifications are run after initial data acquisition.
1461945174251:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1461945174251:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1461945174252:# Populate sets with values from pull
1461945180298:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461945180298:page$datetime <- format.facebook.date(page$created_time)
1461945180300:page$month <- format(page$datetime, "%Y-%m")
1461945180301:page$day <- format(page$datetime, "%Y-%m-%d")
1461945180302:page$datetime <- as.Date(page$datetime)
1461945180303:#page$month <- as.Date(page$month)
1461945180307:page$day <- as.Date(page$day)
1461945180308:} else {
1461945180310:print("Date fields already exist for Post Data.")
1461945180311:}
1461945180316:postdata <- 0
1461945180317:postdata <- page[page$day > floor,]
1461945180320:postdata <- postdata[postdata$day < roof,]
1461945180321:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",ro
1461945183119:postdata
1461945194163:# Name column for usability
1461945194164:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461945194166:rows <- nrow(postdata)
1461945194166:lpostmetrics <- postmetrics
1461945194167:#testlength <- 2
1461945194167:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461945198633:for (pmetric in 1:length(postmetrics)) {
1461945198634:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461945198636:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461945198636:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461945198640:names(phold) <- c("id","name","period","title","description","value","variable")
1461945198641:} else {
1461945198644:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461945198645:names(phold) <- c("id","name","period","title","description","value")
1461945198647:}
1461945198650:for (post in 1:nrow(postdata)) {
1461945198651:period <- "lifetime"
1461945198652:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461945198653:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461945198653:print('Not a Facebook Video.')
1461945198654:phold <- rbind(phold, NA)
1461945198655:next()
1461945198655:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461945198659:} else {
1461945198660:}
1461945198664:postpull <- NULL
1461945198664:attempt <- 1
1461945198667:while( is.null(postpull) && attempt <= 50) {
1461945198668:attempt <- attempt + 1
1461945198670:try(
1461945198671:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461945198674:#,silent=TRUE
1461945198674:)
1461945198678:if (attempt > 10) {
1461945198679:print('Too many attempts. Skipping.')
1461945198682:postpull <- NULL
1461945198683:break
1461945198685:} else {
1461945198686:print('Retrying.')
1461945198689:}
1461945198692:colnames(phold) <- names(postpull)
1461945198693:phold <- rbind(phold, postpull)
1461945198697:}
1461945198699:pholdstore <- phold
1461945198701:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461945198702:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461945198703:phold <- phold[-1,]
1461945198707:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461945198709:postmetrics <- postmetrics[-pmetric]
1461945198710:pmetric <- pmetric + 1
1461945198713:for (ptype in (1:length(psubtypes))) {
1461945198714:ptyphehold <- NA
1461945198717:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461945198722:postdata <- cbind(NA,postdata)
1461945198723:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461945198726:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461945198727:postmetrics <- c(postmetrics,psubtypes[ptype])
1461945198729:}
1461945198732:} else {
1461945198733:postdata <- cbind(NA,postdata)
1461945198733:postdata[1:length(phold$value),1] <- phold$value
1461945198737:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461945198738:}
1461945198743:cat("\n\n")
1461945198744:print(head(postdata))
1461945198748:cat("\n")
1461945198749:}
1461945217832:postdata <- 0
1461945218016:postdata <- page[page$day > floor,]
1461945218739:postdata <- postdata[postdata$day < roof,]
1461945221050:postdata
1461945237746:nrow(postdata)
1461945239064:postdata
1461945243335:post
1461945247685:for (post in 1:nrow(postdata)) {
1461945247685:period <- "lifetime"
1461945247687:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461945247688:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461945247691:print('Not a Facebook Video.')
1461945247691:phold <- rbind(phold, NA)
1461945247691:next()
1461945247692:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461945247692:} else {
1461945247692:}
1461945247693:postpull <- NULL
1461945247693:attempt <- 1
1461945247697:while( is.null(postpull) && attempt <= 50) {
1461945247698:attempt <- attempt + 1
1461945247701:try(
1461945247701:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461945247704:#,silent=TRUE
1461945247705:)
1461945247708:if (attempt > 10) {
1461945247709:print('Too many attempts. Skipping.')
1461945247712:postpull <- NULL
1461945247712:break
1461945247715:} else {
1461945247716:print('Retrying.')
1461945247717:}
1461945247721:colnames(phold) <- names(postpull)
1461945247722:phold <- rbind(phold, postpull)
1461945247724:}
1461945300312:postdata
1461945322161:lpostmetrics <- postmetrics
1461945324818:lpostmetrics
1461945326071:postmetrics
1461945330091:pmetric
1461945332841:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1461945338961:postdata$page[1]
1461945340715:postdata$page
1461945342459:postdata
1461945352373:postdata <- 0
1461945352492:postdata <- page[page$day > floor,]
1461945353040:postdata <- postdata[postdata$day < roof,]
1461945355094:page
1461945361635:page$page
1461945367897:postdata$from_id
1461945372986:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$from_id[1]))
1461945381896:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$from_name[1]))
1461945388364:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461945388736:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461945389065:names(phold) <- c("id","name","period","title","description","value","variable")
1461945389386:} else {
1461945389668:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461945389966:names(phold) <- c("id","name","period","title","description","value")
1461945390367:}
1461945395136:post
1461945396709:post <- 1
1461945398667:period <- "lifetime"
1461945399015:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461945399395:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461945399785:print('Not a Facebook Video.')
1461945399994:phold <- rbind(phold, NA)
1461945400168:next()
1461945400347:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461945400533:} else {
1461945400776:}
1461945401884:postpull <- NULL
1461945402368:attempt <- 1
1461945402930:while( is.null(postpull) && attempt <= 50) {
1461945403104:attempt <- attempt + 1
1461945403269:try(
1461945403419:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461945403579:#,silent=TRUE
1461945403730:)
1461945403911:if (attempt > 10) {
1461945404046:print('Too many attempts. Skipping.')
1461945404201:postpull <- NULL
1461945404363:break
1461945404529:} else {
1461945404683:print('Retrying.')
1461945404848:}
1461945408837:colnames(phold) <- names(postpull)
1461945408839:phold <- rbind(phold, postpull)
1461945408840:}
1461945409918:pholdstore <- phold
1461945410564:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461945411081:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461945411502:phold <- phold[-1,]
1461945412686:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461945413086:postmetrics <- postmetrics[-pmetric]
1461945413320:pmetric <- pmetric + 1
1461945413452:for (ptype in (1:length(psubtypes))) {
1461945413654:ptyphehold <- NA
1461945413802:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461945413985:postdata <- cbind(NA,postdata)
1461945414221:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461945414388:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461945414585:postmetrics <- c(postmetrics,psubtypes[ptype])
1461945414788:}
1461945415021:} else {
1461945415273:postdata <- cbind(NA,postdata)
1461945415487:postdata[1:length(phold$value),1] <- phold$value
1461945415707:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461945415870:}
1461945416990:cat("\n\n")
1461945417304:print(head(postdata))
1461945441425:postdata$
1461945444114:type
1461945453237:postdata$message[post]
1461945465376:postdata$postid
1461945473476:postdata
1461945489360:for (pmetric in 1:length(postmetrics)) {
1461945489361:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$from_name[1]))
1461945489363:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461945489363:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461945489364:names(phold) <- c("id","name","period","title","description","value","variable")
1461945489364:} else {
1461945489365:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461945489365:names(phold) <- c("id","name","period","title","description","value")
1461945489366:}
1461945489367:for (post in 1:nrow(postdata)) {
1461945489367:period <- "lifetime"
1461945489368:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$from_id[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461945489369:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461945489373:print('Not a Facebook Video.')
1461945489376:phold <- rbind(phold, NA)
1461945489377:next()
1461945489379:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461945489380:} else {
1461945489383:}
1461945489384:postpull <- NULL
1461945489387:attempt <- 1
1461945489388:while( is.null(postpull) && attempt <= 50) {
1461945489391:attempt <- attempt + 1
1461945489391:try(
1461945489395:postpull <- getInsights(object_id=postdata$id[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461945489395:#,silent=TRUE
1461945489398:)
1461945489399:if (attempt > 10) {
1461945489402:print('Too many attempts. Skipping.')
1461945489402:postpull <- NULL
1461945489405:break
1461945489406:} else {
1461945489410:print('Retrying.')
1461945489410:}
1461945489415:colnames(phold) <- names(postpull)
1461945489415:phold <- rbind(phold, postpull)
1461945489417:}
1461945489418:pholdstore <- phold
1461945489420:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461945489421:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461945489425:phold <- phold[-1,]
1461945489428:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461945489430:postmetrics <- postmetrics[-pmetric]
1461945489432:pmetric <- pmetric + 1
1461945489434:for (ptype in (1:length(psubtypes))) {
1461945489435:ptyphehold <- NA
1461945489436:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461945489442:postdata <- cbind(NA,postdata)
1461945489443:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461945489448:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461945489449:postmetrics <- c(postmetrics,psubtypes[ptype])
1461945489451:}
1461945489454:} else {
1461945489456:postdata <- cbind(NA,postdata)
1461945489458:postdata[1:length(phold$value),1] <- phold$value
1461945489459:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461945489463:}
1461945489468:cat("\n\n")
1461945489469:print(head(postdata))
1461945489471:cat("\n")
1461945489473:}
1461945499623:postdatastore <- postdata
1461945562051:pmetric
1461945571530:getInsights(object_id=postdata$id[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461945578073:postdata$id[post]
1461945588124:postmetrics[pmetric]
1461945596989:getInsights(object_id=postdata$id[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461949322086:postmetrics
1461949325550:postmetrics[pmetric]
1461949332069:getInsights(object_id=postdata$id[post], token=ftoken)
1461949351365:getInsights(object_id=postdata$id[post], token=ftoken, metric = post_impressions)
1461949356132:getInsights(object_id=postdata$id[post], token=ftoken, metric = post_impressions_unique)
1461949364260:getInsights(object_id=postdata$id[post], token=ftoken, metric = "post_impressions")
1461949399730:## Access ftoken
1461949399733:# Use token from Facebook Graph API
1461949399733:# token generated here: https://developers.facebook.com/tools/explorer
1461949399733:# Lasts two hours, and must be changed depending on page and permissions
1461949399734:ftokens <- c(
1461949399734:#Sledgehammer Wine
1461949399734:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461949399735:#Chateau Saint Jean
1461949399735:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461949399735:#19 Crimes
1461949399735:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461949399736:#Beringer Vneyards
1461949399736:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461949399736:#100% Canadian Milk
1461949399736:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461949399737:#Lait 100% Canadien
1461949399737:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461949399737:#Recharge with Milk
1461949399737:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461949399737:#Misc
1461949399738:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461949399738:#Baron
1461949399738:"EAACEdEose0cBALciy1ZChf6m2djQPKkiqKFF4orfwAwHMh16ZB4ZAx5eSgfwSAGrrIRPYW90D6EflzF7LDZAYku2yUwU3dQyjnPw6lwTTiaasWJ34zyAslNqx34G0erECxs6YZBRIWbVLNI80ZBU2smxERgurcncRlg2CdtFFujwZDZD"
1461949399738:)
1461949404122:ftoken <- ftokens[brand]
1461949406814:getInsights(object_id=postdata$id[post], token=ftoken, metric = "post_impressions")
1461949411783:getInsights(object_id=postdata$id[post], token=ftoken, metric = "post_impressions_unique")
1461949461122:postdata$id
1461949462570:postdata
1461949473748:getInsights(object_id=postdata$id[post], token=ftoken, metric = "post_impressions_unique")
1461949485955:getInsights(object_id=postdata$id[post], token=ftoken, metric = "post_impressions_paid")
1461949512409:install.packages('Rfacebook')
1461949518986:install.packages("Rfacebook")
1461949528275:library(Rfacebook)
1461949528556:#library(instaR)
1461949528627:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1461949528748:# https://instagram.com/developer/authentication/?hl=en
1461949528888:setwd("~/")
1461949529077:getwd()
1461949529207:# Authorize with Facebook
1461949529392:#Using 'rFacebook' from Github
1461949529524:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1461949532739:# Functions ---------------------------------------------------------------
1461949532740:# User Functions
1461949532860:# Function to convert Facebook date format to R date format
1461949533292:format.facebook.date <- function(datestring) {
1461949533357:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1461949533444:}
1461949533611:# Shift a vector up by an amount
1461949533646:shift <- function(x, n){
1461949533690:c(x[-(seq(n))], rep(NA, n))
1461949533776:}
1461949533879:# Get gcd from vector
1461949533930:gcd <- function(x,y) {
1461949534014:r <- x%%y;
1461949534094:return(ifelse(r, gcd(y, r), y))
1461949534192:}
1461949534276:# Inputs ------------------------------------------------------------------
1461949534577:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1461949534723:# Define data range for data (2012 is out of bounds for some metrics)
1461949534910:posts <- 5000
1461949535061:roof = Sys.Date() #"2015-12-31"
1461949535244:floor = "2016-04-01" #"2015-05-01"
1461949535359:range = seq(as.Date(floor), as.Date(roof), by="days")
1461949535793:## Access ftoken
1461949535996:# Use token from Facebook Graph API
1461949536145:# token generated here: https://developers.facebook.com/tools/explorer
1461949536378:# Lasts two hours, and must be changed depending on page and permissions
1461949536531:ftokens <- c(
1461949536695:#Sledgehammer Wine
1461949537226:#"CAACEdEose0cBAJh4VxD8AaZBPdVXhiiza6mIOgXNFAJFPJyO4FZAAgp6neRfbxVFuFZBVBwYqfNHVlP3DhJ1mq9lnEmLtZARrQZCugz21Gr14EOFXJgCCx0wabntrkdW8zMG2YiZCxeGVTalMKAch1YZBhhbmkuqLO2rHuWBZABa5MKHgWSCZAyPljM8YZCZAAtZBzYZD"
1461949537265:#Chateau Saint Jean
1461949537361:#,"CAACEdEose0cBALgsNnOVKpxaprOooseZAuJZANMKkA066CBM1qkBKNRgTpqk0svJfSdX0J81ESuxvaVYvWWR2ebjjZCuvnf9n9fnb8I652fwHbPTQeoZBgZCuZAuR2J3pNvZC4M783NyFH21T82iRGlgZA2DWqEIXZBXCL1sG2nJXaEzR9YGUIIyn1EFsI3EoZBPMZD"
1461949537445:#19 Crimes
1461949537529:#,"CAACEdEose0cBAMwKXSoCfkuECtKKevujgZAvTlkIGFCZCBSDTxbcNHZBucxPKUnKSxxhmVSEASQgOQRMYP6nEtEZBiHLNJB0rNtYZA0DaWpljQIgbmHmkNSXpZB0oUvb7F5ujGSlnUQkzCelZANWHdDuh0aqleIHTTGzLU5Xm453OcxPSySt38UfDNzeTLehmUZD"
1461949537608:#Beringer Vneyards
1461949537729:#,"CAACEdEose0cBAFl4kchY2M80PMh251rzCrd4sMFtZCwDCRsZC9KUOWTtHMIc77fdiXNYZBcCPZCKOw6JTk9IyaZAdMnR2cwpONeZBM0pkLn1slJ31bussH3nUenWVaaP8djaFgKEEdKZBWBcZC6tnOKC4Fw8wzqnwHqUnSlROHHaqiqcVmWVd0Selu88evjuZAtoZD"
1461949537795:#100% Canadian Milk
1461949537861:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1461949537944:#Lait 100% Canadien
1461949538046:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1461949538112:#Recharge with Milk
1461949538212:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1461949538301:#Misc
1461949538356:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1461949538434:#Baron
1461949538563:"EAACEdEose0cBALciy1ZChf6m2djQPKkiqKFF4orfwAwHMh16ZB4ZAx5eSgfwSAGrrIRPYW90D6EflzF7LDZAYku2yUwU3dQyjnPw6lwTTiaasWJ34zyAslNqx34G0erECxs6YZBRIWbVLNI80ZBU2smxERgurcncRlg2CdtFFujwZDZD"
1461949538630:)
1461949539047:totalpagedata <- data.frame()
1461949539278:totalpostdata <- data.frame()
1461949541561:ftoken <- ftokens[brand]
1461949542079:## User Id
1461949542152:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1461949542249:userid = "10153046308598756"
1461949542417:me <- getUsers("me", token=ftoken)
1461949543523:# Access public personal data; basically a ftoken test
1461949543523:print(me$name)
1461949543526:## Page Id
1461949543526:# Define which page will be used for the data collection. Change id's as necessary.
1461949543529:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1461949543530:pageid = me$id
1461949543551:# Acquisition -------------------------------------------------------------
1461949543554:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1461949543557:page <- getPage(pageid, ftoken, n = posts)
1461949545296:page.store <- page
1461949545297:# Create new vectors in dataset with datetime, month, and day formattiong
1461949545299:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461949545299:page$datetime <- format.facebook.date(page$created_time)
1461949545303:page$month <- format(page$datetime, "%Y-%m")
1461949545304:page$day <- format(page$datetime, "%Y-%m-%d")
1461949545306:page$datetime <- as.Date(page$datetime)
1461949545307:#page$month <- as.Date(page$month)
1461949545310:page$day <- as.Date(page$day)
1461949545311:} else {
1461949545314:print("Date fields already exist.")
1461949545338:}
1461949545341:# Processing --------------------------------------------------------------
1461949545732:# Process data to clean dataset and augment it with more data than default fields.
1461949545854:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1461949545902:## Cleaning =================================
1461949545978:# Page and Post Datasets
1461949546265:# Split dataset into two for pages and post data
1461949546463:# Create initial null sets
1461949546635:pagedata <- 0
1461949547097:postdata <- 0
1461949547448:## Appending =================================
1461949547622:### Page Metrics #############################
1461949548118:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1461949548199:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1461949548288:# Page Metrics to automatically pull
1461949548405:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1461949548458:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1461949548610:pagemetrics <- metrics
1461949549106:# Prep dataset by breaking into weeks
1461949549324:pagedata <- 0
1461949549613:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1461949549869:colnames(pagedata) = c("pageid", "page", "date")
1461949550044:pagedata$page = page$from_name[1]
1461949550246:pagedata$pageid = page$from_id[1]
1461949550994:divisor = 5
1461949551263:remainder = length(range)%%divisor;
1461949551612:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1461949551925:weeks <- 2 # (nrow(pagedata)/5)-2
1461949552656:# Start Data Acquisition Loop
1461949556297:for (metric in 1:length(metrics)) {
1461949559597:}
1461949562413:# Start Data Acquisition Loop
1461949562413:for (metric in 1:length(metrics)) {
1461949562415:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1461949562416:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1461949562416:period = 'lifetime'
1461949562417:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1461949562417:period = 'day'
1461949562417:tempfloor = "2014-02-01"
1461949562418:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1461949562418:if (floor < tempfloor) {
1461949562419:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1461949562419:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1461949562419:weeks = tempweeks
1461949562420:} else {}
1461949562420:} else {
1461949562420:period = 'day'
1461949562421:weeks <- (nrow(pagedata)/5)-2
1461949562421:}
1461949562422:hold <- matrix(0, nrow=0, ncol=7)
1461949562422:for (week in 0:weeks) {
1461949562427:end <- pagedata$date[(week*5)+1]
1461949562428:start <- pagedata$date[((week+1)*5)+1]
1461949562430:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1461949562432:pull <- NULL
1461949562433:attempt <- 1
1461949562435:while(is.null(pull) && attempt <= 10) {
1461949562437:attempt <- attempt + 1
1461949562438:try(
1461949562441:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1461949562442:)
1461949562446:if (is.null(pull)) {
1461949562446:print("Empty Pull. Re-attempting.")
1461949562449:print(paste("Attempt", attempt))
1461949562450:} else {
1461949562454:pull$datetime <- format.facebook.date(pull$end_time)
1461949562456:pull$day <- format(pull$datetime, "%Y-%m-%d")
1461949562457:pull$datetime <- as.Date(pull$datetime)
1461949562460:#page$month <- as.Date(page$month)
1461949562461:pull$day <- as.Date(pull$day)
1461949562465:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1461949562466:print("Found Facebook data matching date range. Storing values.")
1461949562468:} else {
1461949562469:print("Did not find Facebook data matching dataset dates. Re-querying.")
1461949562472:print(paste("Attempt", attempt))
1461949562473:pull <- NULL}
1461949562476:if (attempt > 100) {
1461949562478:print('Too many attempts. Skipping.')
1461949562482:pull <- NULL
1461949562484:break
1461949562487:} else {}
1461949562488:}
1461949562492:pulllength <- ncol(pull)
1461949562494:rpull = pull[rev(rownames(pull)),]
1461949562497:hold <- rbind(hold,rpull)
1461949562498:rawhold <- hold
1461949562499:}
1461949562508:rhold = hold[rev(rownames(hold)),]
1461949562509:rhold$value = shift(rhold$value, 1)
1461949562511:hold = rhold[rev(rownames(rhold)),]
1461949562513:hold$value[1] = rawhold$value[1]
1461949562516:hours <- seq(0,23)
1461949562518:names(hours) <- paste("Hour", hours)
1461949562521:subtypes <- c('link','comment', 'like')
1461949562522:names(subtypes) <- c('Shares','Comments', 'Likes')
1461949562527:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1461949562528:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1461949562531:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1461949562535:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1461949562538:for (type in 1:length(subtypes)) {
1461949562540:typehold <- NA
1461949562542:typehold <- hold[hold$variable == subtypes[type],]
1461949562546:pagedata <- cbind(NA,pagedata)
1461949562548:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461949562549:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1461949562554:metrics <- c(metrics,subtypes[type])
1461949562556:}
1461949562562:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1461949562566:for (demographic in 1:length(demographics)) {
1461949562569:print(names(demographics[demographic]))
1461949562572:typehold <- NA
1461949562574:typehold <- hold[hold$variable == demographics[demographic],]
1461949562577:typehold[typehold$value <= 10,] <- NA
1461949562581:pagedata <- cbind(NA,pagedata)
1461949562583:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461949562585:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1461949562589:metrics <- c(metrics,demographics[demographic])
1461949562591:}
1461949562595:} else if ((metrics)[metric] == 'page_fans_online') {
1461949562599:for (hour in 1:length(hours)) {
1461949562603:typehold <- NA
1461949562606:typehold <- hold[hold$variable == hours[hour],]
1461949562610:pagedata <- cbind(NA,pagedata)
1461949562613:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1461949562615:colnames(pagedata)[1] = paste("hour",hours[hour])
1461949562619:metrics <- c(metrics,hours[hour])
1461949562621:}
1461949562623:} else {
1461949562626:pagedata <- cbind(NA,pagedata)
1461949562628:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1461949562631:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1461949562638:}
1461949562643:cat("\n\n")
1461949562646:print(head(pagedata))
1461949562649:cat("\n")
1461949562654:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1461949562656:break
1461949562657:} else {
1461949562660:}
1461949617336:pagedata.tempstore <- pagedata
1461949621531:pagedata
1461949627468:#Page Metrics to remove because they have subtypes
1461949627603:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1461949627756:# Page Metrics to manually create
1461949627920:metrics <- c(metrics,"organic reach")
1461949628169:names(metrics)[length(metrics)] <- c("Organic Reach")
1461949628331:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1461949628502:colnames(pagedata)[1] = "organic reach"
1461949628802:# Final dataset formatting
1461949629201:pagedatastore <- pagedata
1461949629371:#pagedata <- pagedatastore
1461949629583:pagedata2 <- pagedata
1461949629922:# reorder and null NA's for excel
1461949630100:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1461949630237:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1461949630654:#pagedata2[is.na(pagedata2)] <- ""
1461949630773:#pagedata2[pagedata2 == 0] <- ""
1461949630988:# store final dataset
1461949631272:pagedata <- pagedata2
1461949632573:### Post Metrics #############################
1461949632756:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1461949632920:# Most are automated, and will continue to retry through errors until a value is found.
1461949633073:# Manual modifications are run after initial data acquisition.
1461949633206:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1461949633394:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1461949633541:# Populate sets with values from pull
1461949638331:page$datetime <- format.facebook.date(page$created_time)
1461949638521:page$month <- format(page$datetime, "%Y-%m")
1461949638673:page$day <- format(page$datetime, "%Y-%m-%d")
1461949639088:page$datetime <- as.Date(page$datetime)
1461949639456:#page$month <- as.Date(page$month)
1461949639955:page$day <- as.Date(page$day)
1461949640824:} else {
1461949641046:print("Date fields already exist for Post Data.")
1461949641265:}
1461949641682:postdata <- 0
1461949642023:postdata <- page[page$day > floor,]
1461949642255:postdata <- postdata[postdata$day < roof,]
1461949642596:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461949643091:# Name column for usability
1461949643274:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461949643562:rows <- nrow(postdata)
1461949643980:lpostmetrics <- postmetrics
1461949644475:#testlength <- 2
1461949647860:for (pmetric in 1:length(postmetrics)) {
1461949647862:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$from_name[1]))
1461949647863:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461949647864:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461949647864:names(phold) <- c("id","name","period","title","description","value","variable")
1461949647865:} else {
1461949647868:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461949647869:names(phold) <- c("id","name","period","title","description","value")
1461949647872:}
1461949647873:for (post in 1:nrow(postdata)) {
1461949647874:period <- "lifetime"
1461949647877:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$from_id[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461949647879:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461949647880:print('Not a Facebook Video.')
1461949647881:phold <- rbind(phold, NA)
1461949647884:next()
1461949647885:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461949647888:} else {
1461949647889:}
1461949647893:postpull <- NULL
1461949647894:attempt <- 1
1461949647896:while( is.null(postpull) && attempt <= 50) {
1461949647897:attempt <- attempt + 1
1461949647900:try(
1461949647901:postpull <- getInsights(object_id=postdata$id[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461949647903:#,silent=TRUE
1461949647904:)
1461949647907:if (attempt > 10) {
1461949647908:print('Too many attempts. Skipping.')
1461949647911:postpull <- NULL
1461949647913:break
1461949647915:} else {
1461949647916:print('Retrying.')
1461949647918:}
1461949647921:colnames(phold) <- names(postpull)
1461949647922:phold <- rbind(phold, postpull)
1461949647923:}
1461949647924:pholdstore <- phold
1461949647931:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461949647932:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461949647934:phold <- phold[-1,]
1461949647936:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461949647938:postmetrics <- postmetrics[-pmetric]
1461949647939:pmetric <- pmetric + 1
1461949647941:for (ptype in (1:length(psubtypes))) {
1461949647943:ptyphehold <- NA
1461949647944:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461949647948:postdata <- cbind(NA,postdata)
1461949647949:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461949647951:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461949647952:postmetrics <- c(postmetrics,psubtypes[ptype])
1461949647955:}
1461949647957:} else {
1461949647958:postdata <- cbind(NA,postdata)
1461949647959:postdata[1:length(phold$value),1] <- phold$value
1461949647960:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461949647961:}
1461949647966:cat("\n\n")
1461949647967:print(head(postdata))
1461949647969:cat("\n")
1461949647970:}
1461949696841:postdata
1461949736200:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461949742527:post
1461949743946:post <- 1
1461949744862:postdata$type[post]
1461949749416:nrow(postdata)
1461949751836:postdata
1461949753217:postdata[11]
1461949762303:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461949764985:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461949764985:print('Not a Facebook Video.')
1461949764987:phold <- rbind(phold, NA)
1461949764988:next()
1461949764988:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461949764989:} else {
1461949764990:}
1461949767930:postpull <- NULL
1461949768864:attempt <- 1
1461949773440:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461949776619:postpull
1461949783944:postdata$postid
1461949786389:postdata$postid[post]
1461949791605:getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461949797408:postmetrics[pmetric]
1461949800857:getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461949807612:getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric])
1461949813033:?getInsights
1461949870630:getInsights(object_id=postdata$postid[post], token=ftoken, metric="post_impressions")
1461949913844:library(devtools)
1461949914728:install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
1461949927385:library(Rfacebook)
1461949933262:getInsights(object_id=postdata$postid[post], token=ftoken, metric="post_impressions")
1461949937866:getInsights(object_id=postdata$postid[post], token=ftoken, metric="post_impressions_unique")
1461949944687:page
1461949950975:pagedata
1461949970606:### Post Metrics #############################
1461949970607:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1461949970609:# Most are automated, and will continue to retry through errors until a value is found.
1461949970609:# Manual modifications are run after initial data acquisition.
1461949970610:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1461949970610:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1461949970611:# Populate sets with values from pull
1461949970611:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1461949970611:page$datetime <- format.facebook.date(page$created_time)
1461949970612:page$month <- format(page$datetime, "%Y-%m")
1461949970612:page$day <- format(page$datetime, "%Y-%m-%d")
1461949970612:page$datetime <- as.Date(page$datetime)
1461949970613:#page$month <- as.Date(page$month)
1461949970613:page$day <- as.Date(page$day)
1461949970613:} else {
1461949970614:print("Date fields already exist for Post Data.")
1461949970614:}
1461949970615:postdata <- 0
1461949970615:postdata <- page[page$day > floor,]
1461949970619:postdata <- postdata[postdata$day < roof,]
1461949970620:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1461949970622:# Name column for usability
1461949970622:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1461949970626:rows <- nrow(postdata)
1461949970627:lpostmetrics <- postmetrics
1461949970630:#testlength <- 2
1461949970630:#length(postmetrics) instead of testlength; swapped out for hotfixes
1461949970634:for (pmetric in 1:length(postmetrics)) {
1461949970634:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$from_name[1]))
1461949970637:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1461949970637:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1461949970638:names(phold) <- c("id","name","period","title","description","value","variable")
1461949970638:} else {
1461949970639:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1461949970639:names(phold) <- c("id","name","period","title","description","value")
1461949970640:}
1461949970643:for (post in 1:nrow(postdata)) {
1461949970644:period <- "lifetime"
1461949970648:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1461949970649:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1461949970650:print('Not a Facebook Video.')
1461949970651:phold <- rbind(phold, NA)
1461949970655:next()
1461949970658:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1461949970659:} else {
1461949970662:}
1461949970664:postpull <- NULL
1461949970666:attempt <- 1
1461949970667:while( is.null(postpull) && attempt <= 50) {
1461949970669:attempt <- attempt + 1
1461949970670:try(
1461949970673:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1461949970674:#,silent=TRUE
1461949970677:)
1461949970678:if (attempt > 10) {
1461949970681:print('Too many attempts. Skipping.')
1461949970682:postpull <- NULL
1461949970683:break
1461949970686:} else {
1461949970687:print('Retrying.')
1461949970690:}
1461949970693:colnames(phold) <- names(postpull)
1461949970694:phold <- rbind(phold, postpull)
1461949970695:}
1461949970696:pholdstore <- phold
1461949970698:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1461949970698:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1461949970700:phold <- phold[-1,]
1461949970702:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1461949970705:postmetrics <- postmetrics[-pmetric]
1461949970706:pmetric <- pmetric + 1
1461949970709:for (ptype in (1:length(psubtypes))) {
1461949970710:ptyphehold <- NA
1461949970712:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1461949970714:postdata <- cbind(NA,postdata)
1461949970716:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1461949970719:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1461949970720:postmetrics <- c(postmetrics,psubtypes[ptype])
1461949970722:}
1461949970724:} else {
1461949970725:postdata <- cbind(NA,postdata)
1461949970726:postdata[1:length(phold$value),1] <- phold$value
1461949970729:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1461949970731:}
1461949970737:cat("\n\n")
1461949970738:print(head(postdata))
1461949970739:cat("\n")
1461949970741:}
1461949981471:postdatastore <- postdata
1461949981472:# Post Metrics to manually create
1461949981474:postmetrics <- c(postmetrics,"organic reach")
1461949981475:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1461949981476:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1461949981478:colnames(postdata)[1] = "organic reach"
1461949981479:# Final dataset formatting
1461949981480:#postdatastore <- postdata
1461949981483:#postdata <- postdatastore
1461949981483:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1461949981484:# reorder and null NA's for Excel
1461949981484:postdata2 <- postdata
1461949981487:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1461949981488:postdata2[is.na(postdata2)] <- ""
1461949981492:postdata2[postdata2 == 0] <- ""
1461949981494:# store final dataset
1461949981495:postdata <- as.data.frame(postdata2)
1461949981495:# Outputs -----------------------------------------------------------------
1461949981496:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1461949981499:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1461949981500:datafolder <- "Data"
1461949981501:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1461949981502:# Rename columns for Excel readability
1461949981502:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1461949981503:# output Page dataset as final csv
1461949981503:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1461949981503:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461949981504:?wri
1461949981577:# Rename columns for Excel readability
1461949981577:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461949981580:# output Post dataset as final Excel
1461949981581:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461949981581:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461949981582:# Raw Data
1461949981583:# output dataset as raw csv
1461949981583:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461949981584:totalpagedata <- rbind(totalpagedata, pagedata)
1461949981585:totalpostdata <- rbind(totalpostdata, postdata)
1461949981586:}
1461949981589:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("TWE","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461949981589:# Rename columns for Excel readability
1461949981592:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461949981593:# output Post dataset as final Excel
1461949981596:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461949981596:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("TWE","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461949981597:# Images
1461949981598:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1461949981601:#for (picture in (1:nrow(postdata))) {
1461949981601:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1461949981602:#
1461949981602:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1461949981602:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1461949981602:#
1461949981603:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1461949981603:# Edit the core program and change feedback loop.
1461949981604:#
1461949981604:#}
1461949983987:postdata
1461949985149:pagedata
1461950021225:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461950021229:# Rename columns for Excel readability
1461950021229:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461950021232:# output Post dataset as final Excel
1461950021232:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461950021236:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461950029618:y -----------------------------------------------------------------
1461950029619:# Todo --------------------------------------------------------------------
1461950029620:# - Run script for all major brands
1461950029621:# - Create 'participation rate' function
1461950029621:# - Incorporate Twitter
1461950029621:# Setup -------------------------------------------------------------------
1461950029621:# Load and install all necessary packages for the script
1461950029622:# Required Packages for dataframes, forecasting, graphical visualization, and development
1461950029622:# Use 'install.packages()' if unavailable.
1461950029622:#library(zoo)
1461950029622:#library(forecast)
1461950029623:library(ggplot2)
1461950029623:#library(scales)
1461950029623:library(devtools)
1461950029624:library(compare)
1461950029688:library(xlsx)
1461950032388:require(httr)
1461950032388:require(rjson)
1461950032390:require(RCurl)
1461950036308:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1461950037371:# Rename columns for Excel readability
1461950037371:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1461950037373:# output Post dataset as final Excel
1461950037373:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1461950037374:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462285844345:posts <- 5000
1462285844347:roof = Sys.Date() #"2015-12-31"
1462285844350:floor = "2016-03-01" #"2015-05-01"
1462285844351:range = seq(as.Date(floor), as.Date(roof), by="days")
1462285906448:ftokens <- c(
1462285906451:#Sledgehammer Wine
1462285906451:"EAACEdEose0cBAHVvRs9E3ZCGCDTG3PlBopHhvomFfbNm8jHxZBbwwuIuc1P1nKhgPdkMZCuiS3bR8ajr52zuLRCQHb9nWf1hQhfOn4M27ZAlbNPlbW87V4F7mGWDzpoi0AmB6Paba6DOR2A8B1rFj9ZCrSZCEleVDdcSyTetQcUAZDZD"
1462285906455:#Chateau Saint Jean
1462285906455:,"EAACEdEose0cBAIao0qTdgYd9kCRMcX8QhFEeOtaMuY5t0B31Jp8uSgcZCm4jRCaOgXBS9ZAQOZBy4Pf5dlGMF9MSneCo6ZA3f2bZCuZCE8pzhtnMoFWstecZBMX3pHuphD5LZCD1yW7gsrpuJWGvYbLXO4r3tQFwZBk8CjJxk5GHKYgZDZD"
1462285906456:#19 Crimes
1462285906456:,"EAACEdEose0cBAAnbZAdoA0zjKppKZCZBvIqOAeqyBTHowbtK9so360Y9LiIupgWxhhK9VMWEOysmlaFMNKSEUXm5tzZCReCFRRTqgQphBef0pLm6VquMdZBMwewYc3ZAiPycYaI4PBacHZBhjlRBT2AiGybNjcG3AxsJoJdt4HQHgZDZD"
1462285906457:#Beringer Vneyards
1462285906457:,"EAACEdEose0cBAM64xdgdPZAETxIl3HvbqOqacipdSmxlxG0SNs59lubXoR9ypgDGBdXvXcXJKIuZAx3dUr9ZBlCPiHQ5ZC5DNcCQQ6cWJaTYREZB2yjYOsf9yg0DBHQeMUlC9Ud4Qpca49YSPDAAVFbxIC8nZAL9ZB39ZASdh4TjAAZDZD"
1462285906458:#100% Canadian Milk
1462285906458:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1462285906462:#Lait 100% Canadien
1462285906462:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1462285906463:#Recharge with Milk
1462285906463:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1462285906463:#Misc
1462285906463:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1462285906464:#Baron
1462285906464:#"EAACEdEose0cBALciy1ZChf6m2djQPKkiqKFF4orfwAwHMh16ZB4ZAx5eSgfwSAGrrIRPYW90D6EflzF7LDZAYku2yUwU3dQyjnPw6lwTTiaasWJ34zyAslNqx34G0erECxs6YZBRIWbVLNI80ZBU2smxERgurcncRlg2CdtFFujwZDZD"
1462285906465:)
1462285908439:ftokens
1462285911826:totalpagedata <- data.frame()
1462285911827:totalpostdata <- data.frame()
1462285927147:totalpagedata <- data.frame()
1462285927148:totalpostdata <- data.frame()
1462285927150:for (brand in 1:length(ftokens)) {
1462285927151:ftoken <- ftokens[brand]
1462285927155:## User Id
1462285927156:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1462285927158:userid = "10153046308598756"
1462285927159:# Access public personal data; basically a ftoken test
1462285927162:me <- getUsers("me", token=ftoken)
1462285927163:print(me$name)
1462285927165:## Page Id
1462285927165:# Define which page will be used for the data collection. Change id's as necessary.
1462285927169:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1462285927170:pageid = me$id
1462285927171:# Acquisition -------------------------------------------------------------
1462285927173:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1462285927174:page <- getPage(pageid, ftoken, n = posts)
1462285927177:page.store <- page
1462285927178:# Create new vectors in dataset with datetime, month, and day formattiong
1462285927181:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1462285927182:page$datetime <- format.facebook.date(page$created_time)
1462285927184:page$month <- format(page$datetime, "%Y-%m")
1462285927185:page$day <- format(page$datetime, "%Y-%m-%d")
1462285927186:page$datetime <- as.Date(page$datetime)
1462285927186:#page$month <- as.Date(page$month)
1462285927186:page$day <- as.Date(page$day)
1462285927187:} else {
1462285927187:print("Date fields already exist.")
1462285927188:}
1462285927189:# Processing --------------------------------------------------------------
1462285927190:# Process data to clean dataset and augment it with more data than default fields.
1462285927193:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1462285927194:## Cleaning =================================
1462285927197:# Page and Post Datasets
1462285927197:# Split dataset into two for pages and post data
1462285927200:# Create initial null sets
1462285927201:pagedata <- 0
1462285927204:postdata <- 0
1462285927205:## Appending =================================
1462285927208:### Page Metrics #############################
1462285927208:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1462285927213:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1462285927216:# Page Metrics to automatically pull
1462285927217:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1462285927221:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1462285927223:pagemetrics <- metrics
1462285927225:# Prep dataset by breaking into weeks
1462285927225:pagedata <- 0
1462285927228:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1462285927230:colnames(pagedata) = c("pageid", "page", "date")
1462285927232:pagedata$page = page$from_name[1]
1462285927232:pagedata$pageid = page$from_id[1]
1462285927234:divisor = 5
1462285927239:remainder = length(range)%%divisor;
1462285927241:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1462285927243:weeks <- 2 # (nrow(pagedata)/5)-2
1462285927245:# Start Data Acquisition Loop
1462285927246:for (metric in 1:length(metrics)) {
1462285927248:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1462285927249:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1462285927251:period = 'lifetime'
1462285927252:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1462285927256:period = 'day'
1462285927257:tempfloor = "2014-02-01"
1462285927259:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1462285927261:if (floor < tempfloor) {
1462285927263:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1462285927265:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1462285927266:weeks = tempweeks
1462285927267:} else {}
1462285927268:} else {
1462285927270:period = 'day'
1462285927271:weeks <- (nrow(pagedata)/5)-2
1462285927274:}
1462285927276:hold <- matrix(0, nrow=0, ncol=7)
1462285927278:for (week in 0:weeks) {
1462285927280:end <- pagedata$date[(week*5)+1]
1462285927281:start <- pagedata$date[((week+1)*5)+1]
1462285927282:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1462285927287:pull <- NULL
1462285927289:attempt <- 1
1462285927290:while(is.null(pull) && attempt <= 10) {
1462285927293:attempt <- attempt + 1
1462285927295:try(
1462285927297:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1462285927298:)
1462285927302:if (is.null(pull)) {
1462285927304:print("Empty Pull. Re-attempting.")
1462285927306:print(paste("Attempt", attempt))
1462285927309:} else {
1462285927310:pull$datetime <- format.facebook.date(pull$end_time)
1462285927313:pull$day <- format(pull$datetime, "%Y-%m-%d")
1462285927315:pull$datetime <- as.Date(pull$datetime)
1462285927317:#page$month <- as.Date(page$month)
1462285927318:pull$day <- as.Date(pull$day)
1462285927322:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1462285927324:print("Found Facebook data matching date range. Storing values.")
1462285927325:} else {
1462285927328:print("Did not find Facebook data matching dataset dates. Re-querying.")
1462285927330:print(paste("Attempt", attempt))
1462285927332:pull <- NULL}
1462285927336:if (attempt > 100) {
1462285927339:print('Too many attempts. Skipping.')
1462285927341:pull <- NULL
1462285927344:break
1462285927346:} else {}
1462285927348:}
1462285927353:pulllength <- ncol(pull)
1462285927356:rpull = pull[rev(rownames(pull)),]
1462285927359:hold <- rbind(hold,rpull)
1462285927360:rawhold <- hold
1462285927361:}
1462285927371:rhold = hold[rev(rownames(hold)),]
1462285927373:rhold$value = shift(rhold$value, 1)
1462285927374:hold = rhold[rev(rownames(rhold)),]
1462285927376:hold$value[1] = rawhold$value[1]
1462285927380:hours <- seq(0,23)
1462285927381:names(hours) <- paste("Hour", hours)
1462285927385:subtypes <- c('link','comment', 'like')
1462285927387:names(subtypes) <- c('Shares','Comments', 'Likes')
1462285927391:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1462285927457:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1462285927461:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1462285927465:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1462285927468:for (type in 1:length(subtypes)) {
1462285927471:typehold <- NA
1462285927473:typehold <- hold[hold$variable == subtypes[type],]
1462285927476:pagedata <- cbind(NA,pagedata)
1462285927477:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462285927480:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1462285927483:metrics <- c(metrics,subtypes[type])
1462285927484:}
1462285927490:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1462285927494:for (demographic in 1:length(demographics)) {
1462285927497:print(names(demographics[demographic]))
1462285927500:typehold <- NA
1462285927501:typehold <- hold[hold$variable == demographics[demographic],]
1462285927504:typehold[typehold$value <= 10,] <- NA
1462285927507:pagedata <- cbind(NA,pagedata)
1462285927509:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462285927511:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1462285927514:metrics <- c(metrics,demographics[demographic])
1462285927517:}
1462285927522:} else if ((metrics)[metric] == 'page_fans_online') {
1462285927525:for (hour in 1:length(hours)) {
1462285927528:typehold <- NA
1462285927530:typehold <- hold[hold$variable == hours[hour],]
1462285927533:pagedata <- cbind(NA,pagedata)
1462285927535:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462285927537:colnames(pagedata)[1] = paste("hour",hours[hour])
1462285927541:metrics <- c(metrics,hours[hour])
1462285927542:}
1462285927544:} else {
1462285927546:pagedata <- cbind(NA,pagedata)
1462285927549:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1462285927551:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1462285927555:}
1462285927559:cat("\n\n")
1462285927560:print(head(pagedata))
1462285927563:cat("\n")
1462285927567:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1462285927570:break
1462285927572:} else {
1462285927574:}
1462285927581:pagedata.tempstore <- pagedata
1462285927586:#Page Metrics to remove because they have subtypes
1462285927588:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1462285927593:# Page Metrics to manually create
1462285927596:metrics <- c(metrics,"organic reach")
1462285927600:names(metrics)[length(metrics)] <- c("Organic Reach")
1462285927606:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1462285927610:colnames(pagedata)[1] = "organic reach"
1462285927614:# Final dataset formatting
1462285927616:pagedatastore <- pagedata
1462285927619:#pagedata <- pagedatastore
1462285927622:pagedata2 <- pagedata
1462285927626:# reorder and null NA's for excel
1462285927628:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1462285927632:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1462285927636:#pagedata2[is.na(pagedata2)] <- ""
1462285927638:#pagedata2[pagedata2 == 0] <- ""
1462285927643:# store final dataset
1462285927645:pagedata <- pagedata2
1462285927649:### Post Metrics #############################
1462285927651:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1462285927656:# Most are automated, and will continue to retry through errors until a value is found.
1462285927658:# Manual modifications are run after initial data acquisition.
1462285927662:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1462285927665:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1462285927669:# Populate sets with values from pull
1462285927674:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1462285927675:page$datetime <- format.facebook.date(page$created_time)
1462285927677:page$month <- format(page$datetime, "%Y-%m")
1462285927680:page$day <- format(page$datetime, "%Y-%m-%d")
1462285927685:page$datetime <- as.Date(page$datetime)
1462285927690:#page$month <- as.Date(page$month)
1462285927693:page$day <- as.Date(page$day)
1462285927695:} else {
1462285927698:print("Date fields already exist for Post Data.")
1462285927700:}
1462285927704:postdata <- 0
1462285927708:postdata <- page[page$day > floor,]
1462285927710:postdata <- postdata[postdata$day < roof,]
1462285927714:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1462285927721:# Name column for usability
1462285927723:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1462285927727:rows <- nrow(postdata)
1462285927729:lpostmetrics <- postmetrics
1462285927734:#testlength <- 2
1462285927737:#length(postmetrics) instead of testlength; swapped out for hotfixes
1462285927745:for (pmetric in 1:length(postmetrics)) {
1462285927748:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$from_name[1]))
1462285927752:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1462285927754:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1462285927756:names(phold) <- c("id","name","period","title","description","value","variable")
1462285927759:} else {
1462285927761:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1462285927764:names(phold) <- c("id","name","period","title","description","value")
1462285927766:}
1462285927774:for (post in 1:nrow(postdata)) {
1462285927778:period <- "lifetime"
1462285927784:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1462285927789:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1462285927792:print('Not a Facebook Video.')
1462285927794:phold <- rbind(phold, NA)
1462285927796:next()
1462285927799:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1462285927802:} else {
1462285927805:}
1462285927812:postpull <- NULL
1462285927814:attempt <- 1
1462285927820:while( is.null(postpull) && attempt <= 50) {
1462285927822:attempt <- attempt + 1
1462285927825:try(
1462285927827:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1462285927830:#,silent=TRUE
1462285927833:)
1462285927835:if (attempt > 10) {
1462285927837:print('Too many attempts. Skipping.')
1462285927841:postpull <- NULL
1462285927843:break
1462285927846:} else {
1462285927848:print('Retrying.')
1462285927850:}
1462285927865:colnames(phold) <- names(postpull)
1462285927870:phold <- rbind(phold, postpull)
1462285927873:}
1462285927875:pholdstore <- phold
1462285927882:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1462285927884:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1462285927892:phold <- phold[-1,]
1462285927898:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1462285927904:postmetrics <- postmetrics[-pmetric]
1462285927909:pmetric <- pmetric + 1
1462285927914:for (ptype in (1:length(psubtypes))) {
1462285927917:ptyphehold <- NA
1462285927922:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1462285927928:postdata <- cbind(NA,postdata)
1462285927931:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1462285927936:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1462285927939:postmetrics <- c(postmetrics,psubtypes[ptype])
1462285927942:}
1462285927951:} else {
1462285927954:postdata <- cbind(NA,postdata)
1462285927958:postdata[1:length(phold$value),1] <- phold$value
1462285927961:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1462285927965:}
1462285927976:cat("\n\n")
1462285927980:print(head(postdata))
1462285927983:cat("\n")
1462285927985:}
1462285927992:postdatastore <- postdata
1462285928002:# Post Metrics to manually create
1462285928006:postmetrics <- c(postmetrics,"organic reach")
1462285928009:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1462285928014:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1462285928017:colnames(postdata)[1] = "organic reach"
1462285928024:# Final dataset formatting
1462285928027:#postdatastore <- postdata
1462285928029:#postdata <- postdatastore
1462285928034:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1462285928042:# reorder and null NA's for Excel
1462285928044:postdata2 <- postdata
1462285928047:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1462285928051:postdata2[is.na(postdata2)] <- ""
1462285928054:postdata2[postdata2 == 0] <- ""
1462285928061:# store final dataset
1462285928064:postdata <- as.data.frame(postdata2)
1462285928073:# Outputs -----------------------------------------------------------------
1462285928082:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1462285928089:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1462285928098:datafolder <- "Data"
1462285928123:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1462285928133:# Rename columns for Excel readability
1462285928141:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1462285928145:# output Page dataset as final csv
1462285928151:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1462285928159:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462285928166:?wri
1462285928181:# Rename columns for Excel readability
1462285928189:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1462285928198:# output Post dataset as final Excel
1462285928202:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1462285928212:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462285928226:# Raw Data
1462285928238:# output dataset as raw csv
1462285928248:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1462285928267:totalpagedata <- rbind(totalpagedata, pagedata)
1462285928273:totalpostdata <- rbind(totalpostdata, postdata)
1462285928302:}
1462285928322:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462285928322:# Rename columns for Excel readability
1462285928323:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1462285928323:# output Post dataset as final Excel
1462285928324:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1462285928324:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462285938015:## Facebook Query Injector #####
1462285938016:## Mirum Agency ################
1462285938017:## By Vivek Menon ##############
1462285938018:## v.1.5.0 #####################
1462285938019:# Summary -----------------------------------------------------------------
1462285938019:# Todo --------------------------------------------------------------------
1462285938023:# - Run script for all major brands
1462285938023:# - Create 'participation rate' function
1462285938026:# - Incorporate Twitter
1462285938026:# Setup -------------------------------------------------------------------
1462285938027:# Load and install all necessary packages for the script
1462285938027:# Required Packages for dataframes, forecasting, graphical visualization, and development
1462285938027:# Use 'install.packages()' if unavailable.
1462285938028:#library(zoo)
1462285938028:#library(forecast)
1462285938028:library(ggplot2)
1462285938436:#library(scales)
1462285938437:library(devtools)
1462285938528:library(compare)
1462285938588:library(xlsx)
1462285941383:require(httr)
1462285941430:require(rjson)
1462285941539:require(RCurl)
1462285941931:# Pull most up to date Github repositories for relevant packages
1462285941932:# Not frequently updated; does not need to be run every time.
1462285941934:#install_github("pablobarbera/Rfacebook/Rfacebook")
1462285941934:#install_github("pablobarbera/instaR/instaR")
1462285941935:# Required packags for plugging into Facebook API
1462285941935:#library(twitteR)
1462285941936:#install.packages('Rfacebook')
1462285941936:library(devtools)
1462285941940:install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
1462285944135:library(Rfacebook)
1462285944304:#library(instaR)
1462285944305:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1462285944305:# https://instagram.com/developer/authentication/?hl=en
1462285944306:setwd("~/")
1462285944306:getwd()
1462285944307:# Authorize with Facebook
1462285944308:#Using 'rFacebook' from Github
1462285944308:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1462285956500:## Facebook Query Injector #####
1462285956500:## Mirum Agency ################
1462285956503:## By Vivek Menon ##############
1462285956503:## v.1.5.0 #####################
1462285956504:# Summary -----------------------------------------------------------------
1462285956505:# Todo --------------------------------------------------------------------
1462285956508:# - Run script for all major brands
1462285956508:# - Create 'participation rate' function
1462285956510:# - Incorporate Twitter
1462285956510:# Setup -------------------------------------------------------------------
1462285956513:# Load and install all necessary packages for the script
1462285956514:# Required Packages for dataframes, forecasting, graphical visualization, and development
1462285956514:# Use 'install.packages()' if unavailable.
1462285956514:#library(zoo)
1462285956515:#library(forecast)
1462285956515:library(ggplot2)
1462285956516:#library(scales)
1462285956516:library(devtools)
1462285956520:library(compare)
1462285956521:library(xlsx)
1462285956524:require(httr)
1462285956527:require(rjson)
1462285956527:require(RCurl)
1462285956528:# Pull most up to date Github repositories for relevant packages
1462285956528:# Not frequently updated; does not need to be run every time.
1462285956531:#install_github("pablobarbera/Rfacebook/Rfacebook")
1462285956532:#install_github("pablobarbera/instaR/instaR")
1462285956535:# Required packags for plugging into Facebook API
1462285956535:#library(twitteR)
1462285956536:#install.packages('Rfacebook')
1462285956536:library(devtools)
1462285956537:install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
1462285957172:library(Rfacebook)
1462285957173:#library(instaR)
1462285957175:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1462285957175:# https://instagram.com/developer/authentication/?hl=en
1462285957178:setwd("~/")
1462285957179:getwd()
1462285957182:# Authorize with Facebook
1462285957183:#Using 'rFacebook' from Github
1462285957186:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1462285960038:# Functions ---------------------------------------------------------------
1462285960039:# User Functions
1462285960041:# Function to convert Facebook date format to R date format
1462285960042:format.facebook.date <- function(datestring) {
1462285960045:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1462285960046:}
1462285960050:# Shift a vector up by an amount
1462285960050:shift <- function(x, n){
1462285960054:c(x[-(seq(n))], rep(NA, n))
1462285960055:}
1462285960058:# Get gcd from vector
1462285960059:gcd <- function(x,y) {
1462285960061:r <- x%%y;
1462285960062:return(ifelse(r, gcd(y, r), y))
1462285960065:}
1462285960066:# Inputs ------------------------------------------------------------------
1462285960066:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1462285960069:# Define data range for data (2012 is out of bounds for some metrics)
1462285960070:posts <- 5000
1462285960073:roof = Sys.Date() #"2015-12-31"
1462285960074:floor = "2016-03-01" #"2015-05-01"
1462285960077:range = seq(as.Date(floor), as.Date(roof), by="days")
1462285960078:## Access ftoken
1462285960080:# Use token from Facebook Graph API
1462285960081:# token generated here: https://developers.facebook.com/tools/explorer
1462285960081:# Lasts two hours, and must be changed depending on page and permissions
1462285960082:ftokens <- c(
1462285960082:#Sledgehammer Wine
1462285960085:"EAACEdEose0cBAHVvRs9E3ZCGCDTG3PlBopHhvomFfbNm8jHxZBbwwuIuc1P1nKhgPdkMZCuiS3bR8ajr52zuLRCQHb9nWf1hQhfOn4M27ZAlbNPlbW87V4F7mGWDzpoi0AmB6Paba6DOR2A8B1rFj9ZCrSZCEleVDdcSyTetQcUAZDZD"
1462285960086:#Chateau Saint Jean
1462285960086:,"EAACEdEose0cBAIao0qTdgYd9kCRMcX8QhFEeOtaMuY5t0B31Jp8uSgcZCm4jRCaOgXBS9ZAQOZBy4Pf5dlGMF9MSneCo6ZA3f2bZCuZCE8pzhtnMoFWstecZBMX3pHuphD5LZCD1yW7gsrpuJWGvYbLXO4r3tQFwZBk8CjJxk5GHKYgZDZD"
1462285960086:#19 Crimes
1462285960087:,"EAACEdEose0cBAAnbZAdoA0zjKppKZCZBvIqOAeqyBTHowbtK9so360Y9LiIupgWxhhK9VMWEOysmlaFMNKSEUXm5tzZCReCFRRTqgQphBef0pLm6VquMdZBMwewYc3ZAiPycYaI4PBacHZBhjlRBT2AiGybNjcG3AxsJoJdt4HQHgZDZD"
1462285960088:#Beringer Vneyards
1462285960091:,"EAACEdEose0cBAM64xdgdPZAETxIl3HvbqOqacipdSmxlxG0SNs59lubXoR9ypgDGBdXvXcXJKIuZAx3dUr9ZBlCPiHQ5ZC5DNcCQQ6cWJaTYREZB2yjYOsf9yg0DBHQeMUlC9Ud4Qpca49YSPDAAVFbxIC8nZAL9ZB39ZASdh4TjAAZDZD"
1462285960091:#100% Canadian Milk
1462285960092:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1462285960092:#Lait 100% Canadien
1462285960092:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1462285960093:#Recharge with Milk
1462285960093:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1462285960093:#Misc
1462285960094:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1462285960094:#Baron
1462285960094:#"EAACEdEose0cBALciy1ZChf6m2djQPKkiqKFF4orfwAwHMh16ZB4ZAx5eSgfwSAGrrIRPYW90D6EflzF7LDZAYku2yUwU3dQyjnPw6lwTTiaasWJ34zyAslNqx34G0erECxs6YZBRIWbVLNI80ZBU2smxERgurcncRlg2CdtFFujwZDZD"
1462285960094:)
1462285960095:totalpagedata <- data.frame()
1462285960096:totalpostdata <- data.frame()
1462285960099:for (brand in 1:length(ftokens)) {
1462285960099:ftoken <- ftokens[brand]
1462285960102:## User Id
1462285960103:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1462285960103:userid = "10153046308598756"
1462285960103:# Access public personal data; basically a ftoken test
1462285960104:me <- getUsers("me", token=ftoken)
1462285960104:print(me$name)
1462285960107:## Page Id
1462285960109:# Define which page will be used for the data collection. Change id's as necessary.
1462285960110:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1462285960113:pageid = me$id
1462285960114:# Acquisition -------------------------------------------------------------
1462285960115:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1462285960115:page <- getPage(pageid, ftoken, n = posts)
1462285960116:page.store <- page
1462285960116:# Create new vectors in dataset with datetime, month, and day formattiong
1462285960117:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1462285960118:page$datetime <- format.facebook.date(page$created_time)
1462285960118:page$month <- format(page$datetime, "%Y-%m")
1462285960118:page$day <- format(page$datetime, "%Y-%m-%d")
1462285960119:page$datetime <- as.Date(page$datetime)
1462285960119:#page$month <- as.Date(page$month)
1462285960123:page$day <- as.Date(page$day)
1462285960123:} else {
1462285960126:print("Date fields already exist.")
1462285960127:}
1462285960131:# Processing --------------------------------------------------------------
1462285960131:# Process data to clean dataset and augment it with more data than default fields.
1462285960135:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1462285960137:## Cleaning =================================
1462285960139:# Page and Post Datasets
1462285960139:# Split dataset into two for pages and post data
1462285960142:# Create initial null sets
1462285960143:pagedata <- 0
1462285960143:postdata <- 0
1462285960145:## Appending =================================
1462285960146:### Page Metrics #############################
1462285960146:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1462285960147:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1462285960149:# Page Metrics to automatically pull
1462285960149:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1462285960153:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1462285960156:pagemetrics <- metrics
1462285960158:# Prep dataset by breaking into weeks
1462285960160:pagedata <- 0
1462285960160:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1462285960164:colnames(pagedata) = c("pageid", "page", "date")
1462285960165:pagedata$page = page$from_name[1]
1462285960167:pagedata$pageid = page$from_id[1]
1462285960169:divisor = 5
1462285960171:remainder = length(range)%%divisor;
1462285960172:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1462285960175:weeks <- 2 # (nrow(pagedata)/5)-2
1462285960176:# Start Data Acquisition Loop
1462285960178:for (metric in 1:length(metrics)) {
1462285960180:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1462285960183:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1462285960183:period = 'lifetime'
1462285960184:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1462285960185:period = 'day'
1462285960186:tempfloor = "2014-02-01"
1462285960186:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1462285960191:if (floor < tempfloor) {
1462285960193:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1462285960194:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1462285960195:weeks = tempweeks
1462285960199:} else {}
1462285960200:} else {
1462285960202:period = 'day'
1462285960203:weeks <- (nrow(pagedata)/5)-2
1462285960206:}
1462285960208:hold <- matrix(0, nrow=0, ncol=7)
1462285960210:for (week in 0:weeks) {
1462285960211:end <- pagedata$date[(week*5)+1]
1462285960214:start <- pagedata$date[((week+1)*5)+1]
1462285960217:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1462285960220:pull <- NULL
1462285960221:attempt <- 1
1462285960224:while(is.null(pull) && attempt <= 10) {
1462285960226:attempt <- attempt + 1
1462285960227:try(
1462285960229:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1462285960232:)
1462285960235:if (is.null(pull)) {
1462285960237:print("Empty Pull. Re-attempting.")
1462285960239:print(paste("Attempt", attempt))
1462285960241:} else {
1462285960243:pull$datetime <- format.facebook.date(pull$end_time)
1462285960244:pull$day <- format(pull$datetime, "%Y-%m-%d")
1462285960248:pull$datetime <- as.Date(pull$datetime)
1462285960249:#page$month <- as.Date(page$month)
1462285960250:pull$day <- as.Date(pull$day)
1462285960254:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1462285960256:print("Found Facebook data matching date range. Storing values.")
1462285960258:} else {
1462285960260:print("Did not find Facebook data matching dataset dates. Re-querying.")
1462285960262:print(paste("Attempt", attempt))
1462285960264:pull <- NULL}
1462285960267:if (attempt > 100) {
1462285960269:print('Too many attempts. Skipping.')
1462285960271:pull <- NULL
1462285960272:break
1462285960277:} else {}
1462285960278:}
1462285960282:pulllength <- ncol(pull)
1462285960286:rpull = pull[rev(rownames(pull)),]
1462285960289:hold <- rbind(hold,rpull)
1462285960290:rawhold <- hold
1462285960292:}
1462285960300:rhold = hold[rev(rownames(hold)),]
1462285960302:rhold$value = shift(rhold$value, 1)
1462285960304:hold = rhold[rev(rownames(rhold)),]
1462285960306:hold$value[1] = rawhold$value[1]
1462285960310:hours <- seq(0,23)
1462285960312:names(hours) <- paste("Hour", hours)
1462285960315:subtypes <- c('link','comment', 'like')
1462285960316:names(subtypes) <- c('Shares','Comments', 'Likes')
1462285960320:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1462285960321:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1462285960324:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1462285960329:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1462285960332:for (type in 1:length(subtypes)) {
1462285960333:typehold <- NA
1462285960334:typehold <- hold[hold$variable == subtypes[type],]
1462285960340:pagedata <- cbind(NA,pagedata)
1462285960342:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462285960344:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1462285960348:metrics <- c(metrics,subtypes[type])
1462285960349:}
1462285960356:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1462285960360:for (demographic in 1:length(demographics)) {
1462285960364:print(names(demographics[demographic]))
1462285960368:typehold <- NA
1462285960370:typehold <- hold[hold$variable == demographics[demographic],]
1462285960372:typehold[typehold$value <= 10,] <- NA
1462285960376:pagedata <- cbind(NA,pagedata)
1462285960379:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462285960381:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1462285960385:metrics <- c(metrics,demographics[demographic])
1462285960387:}
1462285960391:} else if ((metrics)[metric] == 'page_fans_online') {
1462285960396:for (hour in 1:length(hours)) {
1462285960400:typehold <- NA
1462285960402:typehold <- hold[hold$variable == hours[hour],]
1462285960407:pagedata <- cbind(NA,pagedata)
1462285960410:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462285960414:colnames(pagedata)[1] = paste("hour",hours[hour])
1462285960418:metrics <- c(metrics,hours[hour])
1462285960421:}
1462285960423:} else {
1462285960426:pagedata <- cbind(NA,pagedata)
1462285960429:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1462285960431:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1462285960437:}
1462285960443:cat("\n\n")
1462285960446:print(head(pagedata))
1462285960450:cat("\n")
1462285960455:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1462285960458:break
1462285960461:} else {
1462285960464:}
1462285960475:pagedata.tempstore <- pagedata
1462285960481:#Page Metrics to remove because they have subtypes
1462285960484:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1462285960491:# Page Metrics to manually create
1462285960494:metrics <- c(metrics,"organic reach")
1462285960497:names(metrics)[length(metrics)] <- c("Organic Reach")
1462285960503:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1462285960506:colnames(pagedata)[1] = "organic reach"
1462285960515:# Final dataset formatting
1462285960518:pagedatastore <- pagedata
1462285960521:#pagedata <- pagedatastore
1462285960524:pagedata2 <- pagedata
1462285960531:# reorder and null NA's for excel
1462285960533:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1462285960537:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1462285960542:#pagedata2[is.na(pagedata2)] <- ""
1462285960545:#pagedata2[pagedata2 == 0] <- ""
1462285960560:# store final dataset
1462285960564:pagedata <- pagedata2
1462285960567:### Post Metrics #############################
1462285960570:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1462285960573:# Most are automated, and will continue to retry through errors until a value is found.
1462285960576:# Manual modifications are run after initial data acquisition.
1462285960581:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1462285960584:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1462285960590:# Populate sets with values from pull
1462285960595:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1462285960597:page$datetime <- format.facebook.date(page$created_time)
1462285960599:page$month <- format(page$datetime, "%Y-%m")
1462285960601:page$day <- format(page$datetime, "%Y-%m-%d")
1462285960607:page$datetime <- as.Date(page$datetime)
1462285960611:#page$month <- as.Date(page$month)
1462285960614:page$day <- as.Date(page$day)
1462285960617:} else {
1462285960619:print("Date fields already exist for Post Data.")
1462285960621:}
1462285960626:postdata <- 0
1462285960630:postdata <- page[page$day > floor,]
1462285960632:postdata <- postdata[postdata$day < roof,]
1462285960638:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1462285960645:# Name column for usability
1462285960647:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1462285960653:rows <- nrow(postdata)
1462285960657:lpostmetrics <- postmetrics
1462285960661:#testlength <- 2
1462285960663:#length(postmetrics) instead of testlength; swapped out for hotfixes
1462285960675:for (pmetric in 1:length(postmetrics)) {
1462285960678:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$from_name[1]))
1462285960683:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1462285960687:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1462285960691:names(phold) <- c("id","name","period","title","description","value","variable")
1462285960693:} else {
1462285960695:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1462285960697:names(phold) <- c("id","name","period","title","description","value")
1462285960701:}
1462285960712:for (post in 1:nrow(postdata)) {
1462285960718:period <- "lifetime"
1462285960731:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1462285960735:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1462285960738:print('Not a Facebook Video.')
1462285960741:phold <- rbind(phold, NA)
1462285960745:next()
1462285960748:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1462285960752:} else {
1462285960756:}
1462285960764:postpull <- NULL
1462285960767:attempt <- 1
1462285960771:while( is.null(postpull) && attempt <= 50) {
1462285960774:attempt <- attempt + 1
1462285960778:try(
1462285960782:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1462285960786:#,silent=TRUE
1462285960788:)
1462285960792:if (attempt > 10) {
1462285960795:print('Too many attempts. Skipping.')
1462285960797:postpull <- NULL
1462285960800:break
1462285960803:} else {
1462285960806:print('Retrying.')
1462285960815:}
1462285960832:colnames(phold) <- names(postpull)
1462285960836:phold <- rbind(phold, postpull)
1462285960841:}
1462285960844:pholdstore <- phold
1462285960851:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1462285960857:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1462285960866:phold <- phold[-1,]
1462285960875:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1462285960881:postmetrics <- postmetrics[-pmetric]
1462285960884:pmetric <- pmetric + 1
1462285960892:for (ptype in (1:length(psubtypes))) {
1462285960895:ptyphehold <- NA
1462285960903:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1462285960912:postdata <- cbind(NA,postdata)
1462285960916:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1462285960926:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1462285960931:postmetrics <- c(postmetrics,psubtypes[ptype])
1462285960935:}
1462285960946:} else {
1462285960950:postdata <- cbind(NA,postdata)
1462285960955:postdata[1:length(phold$value),1] <- phold$value
1462285960960:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1462285960964:}
1462285960978:cat("\n\n")
1462285960983:print(head(postdata))
1462285960988:cat("\n")
1462285960991:}
1462285961000:postdatastore <- postdata
1462285961016:# Post Metrics to manually create
1462285961019:postmetrics <- c(postmetrics,"organic reach")
1462285961021:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1462285961027:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1462285961032:colnames(postdata)[1] = "organic reach"
1462285961039:# Final dataset formatting
1462285961043:#postdatastore <- postdata
1462285961048:#postdata <- postdatastore
1462285961055:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1462285961060:# reorder and null NA's for Excel
1462285961062:postdata2 <- postdata
1462285961065:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1462285961071:postdata2[is.na(postdata2)] <- ""
1462285961076:postdata2[postdata2 == 0] <- ""
1462285961086:# store final dataset
1462285961089:postdata <- as.data.frame(postdata2)
1462285961096:# Outputs -----------------------------------------------------------------
1462285961104:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1462285961110:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1462285961118:datafolder <- "Data"
1462285961125:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1462285961132:# Rename columns for Excel readability
1462285961137:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1462285961142:# output Page dataset as final csv
1462285961147:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1462285961150:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462285961158:?wri
1462285961161:# Rename columns for Excel readability
1462285961164:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1462285961167:# output Post dataset as final Excel
1462285961170:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1462285961175:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462285961184:# Raw Data
1462285961189:# output dataset as raw csv
1462285961194:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1462285961201:totalpagedata <- rbind(totalpagedata, pagedata)
1462285961205:totalpostdata <- rbind(totalpostdata, postdata)
1462285961211:}
1462286099289:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462286099542:# Rename columns for Excel readability
1462286099543:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1462286099545:# output Post dataset as final Excel
1462286099545:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1462286099545:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462286369391:pagedata
1462286370996:postdata
1462286380815:totalpostdata
1462286384327:totalpostdata <- data.frame()
1462286396718:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1462286396719:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1462286401432:l
1462286401433:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1462286401435:page$datetime <- format.facebook.date(page$created_time)
1462286401435:page$month <- format(page$datetime, "%Y-%m")
1462286401439:page$day <- format(page$datetime, "%Y-%m-%d")
1462286401440:page$datetime <- as.Date(page$datetime)
1462286401443:#page$month <- as.Date(page$month)
1462286401445:page$day <- as.Date(page$day)
1462286401447:} else {
1462286401448:print("Date fields already exist for Post Data.")
1462286401451:}
1462286404137:postdata <- 0
1462286406629:postdata <- page[page$day > floor,]
1462286406867:postdata <- postdata[postdata$day < roof,]
1462286409740:postdata
1462286411863:page
1462286416916:page[page$day > floor,]
1462286421083:floor
1462286423633:page$day
1462286427252:floor
1462286429322:page$day
1462286437635:page[page$day > floor,]
1462286462385:## Facebook Query Injector #####
1462286462386:## Mirum Agency ################
1462286462388:## By Vivek Menon ##############
1462286462388:## v.1.5.0 #####################
1462286462388:# Summary -----------------------------------------------------------------
1462286462389:# Todo --------------------------------------------------------------------
1462286462389:# - Run script for all major brands
1462286462389:# - Create 'participation rate' function
1462286462390:# - Incorporate Twitter
1462286462390:# Setup -------------------------------------------------------------------
1462286462390:# Load and install all necessary packages for the script
1462286462391:# Required Packages for dataframes, forecasting, graphical visualization, and development
1462286462391:# Use 'install.packages()' if unavailable.
1462286462391:#library(zoo)
1462286462391:#library(forecast)
1462286462392:library(ggplot2)
1462286462392:#library(scales)
1462286462392:library(devtools)
1462286462396:library(compare)
1462286462396:library(xlsx)
1462286462400:require(httr)
1462286462401:require(rjson)
1462286462405:require(RCurl)
1462286462408:# Pull most up to date Github repositories for relevant packages
1462286462408:# Not frequently updated; does not need to be run every time.
1462286462411:#install_github("pablobarbera/Rfacebook/Rfacebook")
1462286462411:#install_github("pablobarbera/instaR/instaR")
1462286462412:# Required packags for plugging into Facebook API
1462286462412:#library(twitteR)
1462286462412:#install.packages('Rfacebook')
1462286462413:library(devtools)
1462286462414:install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
1462286464319:library(Rfacebook)
1462286464319:#library(instaR)
1462286464321:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1462286464322:# https://instagram.com/developer/authentication/?hl=en
1462286464325:setwd("~/")
1462286464326:getwd()
1462286464329:# Authorize with Facebook
1462286464330:#Using 'rFacebook' from Github
1462286464332:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1462286467252:# Functions ---------------------------------------------------------------
1462286467253:# User Functions
1462286467255:# Function to convert Facebook date format to R date format
1462286467255:format.facebook.date <- function(datestring) {
1462286467259:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1462286467259:}
1462286467263:# Shift a vector up by an amount
1462286467264:shift <- function(x, n){
1462286467266:c(x[-(seq(n))], rep(NA, n))
1462286467267:}
1462286467270:# Get gcd from vector
1462286467273:gcd <- function(x,y) {
1462286467274:r <- x%%y;
1462286467277:return(ifelse(r, gcd(y, r), y))
1462286467277:}
1462286467279:# Inputs ------------------------------------------------------------------
1462286467280:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1462286467282:# Define data range for data (2012 is out of bounds for some metrics)
1462286467282:posts <- 5000
1462286467286:roof = Sys.Date() #"2015-12-31"
1462286467286:floor = "2016-01-01" #"2015-05-01"
1462286467289:range = seq(as.Date(floor), as.Date(roof), by="days")
1462286467290:## Access ftoken
1462286467290:# Use token from Facebook Graph API
1462286467294:# token generated here: https://developers.facebook.com/tools/explorer
1462286467294:# Lasts two hours, and must be changed depending on page and permissions
1462286467295:ftokens <- c(
1462286467298:#Sledgehammer Wine
1462286467298:"EAACEdEose0cBAHVvRs9E3ZCGCDTG3PlBopHhvomFfbNm8jHxZBbwwuIuc1P1nKhgPdkMZCuiS3bR8ajr52zuLRCQHb9nWf1hQhfOn4M27ZAlbNPlbW87V4F7mGWDzpoi0AmB6Paba6DOR2A8B1rFj9ZCrSZCEleVDdcSyTetQcUAZDZD"
1462286467298:#Chateau Saint Jean
1462286467299:,"EAACEdEose0cBAIao0qTdgYd9kCRMcX8QhFEeOtaMuY5t0B31Jp8uSgcZCm4jRCaOgXBS9ZAQOZBy4Pf5dlGMF9MSneCo6ZA3f2bZCuZCE8pzhtnMoFWstecZBMX3pHuphD5LZCD1yW7gsrpuJWGvYbLXO4r3tQFwZBk8CjJxk5GHKYgZDZD"
1462286467299:#19 Crimes
1462286467299:,"EAACEdEose0cBAAnbZAdoA0zjKppKZCZBvIqOAeqyBTHowbtK9so360Y9LiIupgWxhhK9VMWEOysmlaFMNKSEUXm5tzZCReCFRRTqgQphBef0pLm6VquMdZBMwewYc3ZAiPycYaI4PBacHZBhjlRBT2AiGybNjcG3AxsJoJdt4HQHgZDZD"
1462286467300:#Beringer Vneyards
1462286467300:,"EAACEdEose0cBAM64xdgdPZAETxIl3HvbqOqacipdSmxlxG0SNs59lubXoR9ypgDGBdXvXcXJKIuZAx3dUr9ZBlCPiHQ5ZC5DNcCQQ6cWJaTYREZB2yjYOsf9yg0DBHQeMUlC9Ud4Qpca49YSPDAAVFbxIC8nZAL9ZB39ZASdh4TjAAZDZD"
1462286467300:#100% Canadian Milk
1462286467301:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1462286467301:#Lait 100% Canadien
1462286467301:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1462286467302:#Recharge with Milk
1462286467302:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1462286467302:#Misc
1462286467303:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1462286467303:#Baron
1462286467303:#"EAACEdEose0cBALciy1ZChf6m2djQPKkiqKFF4orfwAwHMh16ZB4ZAx5eSgfwSAGrrIRPYW90D6EflzF7LDZAYku2yUwU3dQyjnPw6lwTTiaasWJ34zyAslNqx34G0erECxs6YZBRIWbVLNI80ZBU2smxERgurcncRlg2CdtFFujwZDZD"
1462286467304:)
1462286467304:totalpagedata <- data.frame()
1462286467305:totalpostdata <- data.frame()
1462286467308:for (brand in 1:length(ftokens)) {
1462286467308:ftoken <- ftokens[brand]
1462286467312:## User Id
1462286467312:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1462286467315:userid = "10153046308598756"
1462286467315:# Access public personal data; basically a ftoken test
1462286467316:me <- getUsers("me", token=ftoken)
1462286467316:print(me$name)
1462286467317:## Page Id
1462286467317:# Define which page will be used for the data collection. Change id's as necessary.
1462286467317:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1462286467318:pageid = me$id
1462286467319:# Acquisition -------------------------------------------------------------
1462286467322:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1462286467322:page <- getPage(pageid, ftoken, n = posts)
1462286467325:page.store <- page
1462286467326:# Create new vectors in dataset with datetime, month, and day formattiong
1462286467327:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1462286467330:page$datetime <- format.facebook.date(page$created_time)
1462286467330:page$month <- format(page$datetime, "%Y-%m")
1462286467331:page$day <- format(page$datetime, "%Y-%m-%d")
1462286467331:page$datetime <- as.Date(page$datetime)
1462286467334:#page$month <- as.Date(page$month)
1462286467335:page$day <- as.Date(page$day)
1462286467338:} else {
1462286467339:print("Date fields already exist.")
1462286467339:}
1462286467341:# Processing --------------------------------------------------------------
1462286467343:# Process data to clean dataset and augment it with more data than default fields.
1462286467346:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1462286467348:## Cleaning =================================
1462286467350:# Page and Post Datasets
1462286467351:# Split dataset into two for pages and post data
1462286467353:# Create initial null sets
1462286467357:pagedata <- 0
1462286467357:postdata <- 0
1462286467360:## Appending =================================
1462286467362:### Page Metrics #############################
1462286467363:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1462286467363:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1462286467365:# Page Metrics to automatically pull
1462286467366:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1462286467368:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1462286467369:pagemetrics <- metrics
1462286467372:# Prep dataset by breaking into weeks
1462286467372:pagedata <- 0
1462286467375:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1462286467377:colnames(pagedata) = c("pageid", "page", "date")
1462286467380:pagedata$page = page$from_name[1]
1462286467381:pagedata$pageid = page$from_id[1]
1462286467383:divisor = 5
1462286467384:remainder = length(range)%%divisor;
1462286467386:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1462286467387:weeks <- 2 # (nrow(pagedata)/5)-2
1462286467390:# Start Data Acquisition Loop
1462286467391:for (metric in 1:length(metrics)) {
1462286467395:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1462286467397:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1462286467398:period = 'lifetime'
1462286467401:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1462286467402:period = 'day'
1462286467405:tempfloor = "2014-02-01"
1462286467406:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1462286467409:if (floor < tempfloor) {
1462286467412:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1462286467413:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1462286467414:weeks = tempweeks
1462286467417:} else {}
1462286467417:} else {
1462286467421:period = 'day'
1462286467421:weeks <- (nrow(pagedata)/5)-2
1462286467422:}
1462286467427:hold <- matrix(0, nrow=0, ncol=7)
1462286467429:for (week in 0:weeks) {
1462286467432:end <- pagedata$date[(week*5)+1]
1462286467433:start <- pagedata$date[((week+1)*5)+1]
1462286467437:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1462286467439:pull <- NULL
1462286467440:attempt <- 1
1462286467443:while(is.null(pull) && attempt <= 10) {
1462286467444:attempt <- attempt + 1
1462286467445:try(
1462286467446:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1462286467447:)
1462286467451:if (is.null(pull)) {
1462286467452:print("Empty Pull. Re-attempting.")
1462286467453:print(paste("Attempt", attempt))
1462286467454:} else {
1462286467455:pull$datetime <- format.facebook.date(pull$end_time)
1462286467456:pull$day <- format(pull$datetime, "%Y-%m-%d")
1462286467461:pull$datetime <- as.Date(pull$datetime)
1462286467462:#page$month <- as.Date(page$month)
1462286467464:pull$day <- as.Date(pull$day)
1462286467467:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1462286467468:print("Found Facebook data matching date range. Storing values.")
1462286467470:} else {
1462286467473:print("Did not find Facebook data matching dataset dates. Re-querying.")
1462286467474:print(paste("Attempt", attempt))
1462286467477:pull <- NULL}
1462286467480:if (attempt > 100) {
1462286467482:print('Too many attempts. Skipping.')
1462286467483:pull <- NULL
1462286467484:break
1462286467488:} else {}
1462286467490:}
1462286467493:pulllength <- ncol(pull)
1462286467496:rpull = pull[rev(rownames(pull)),]
1462286467500:hold <- rbind(hold,rpull)
1462286467502:rawhold <- hold
1462286467503:}
1462286467507:rhold = hold[rev(rownames(hold)),]
1462286467508:rhold$value = shift(rhold$value, 1)
1462286467509:hold = rhold[rev(rownames(rhold)),]
1462286467510:hold$value[1] = rawhold$value[1]
1462286467513:hours <- seq(0,23)
1462286467515:names(hours) <- paste("Hour", hours)
1462286467519:subtypes <- c('link','comment', 'like')
1462286467521:names(subtypes) <- c('Shares','Comments', 'Likes')
1462286467524:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1462286467525:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1462286467532:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1462286467536:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1462286467539:for (type in 1:length(subtypes)) {
1462286467540:typehold <- NA
1462286467543:typehold <- hold[hold$variable == subtypes[type],]
1462286467546:pagedata <- cbind(NA,pagedata)
1462286467548:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462286467551:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1462286467554:metrics <- c(metrics,subtypes[type])
1462286467556:}
1462286467562:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1462286467567:for (demographic in 1:length(demographics)) {
1462286467571:print(names(demographics[demographic]))
1462286467574:typehold <- NA
1462286467577:typehold <- hold[hold$variable == demographics[demographic],]
1462286467578:typehold[typehold$value <= 10,] <- NA
1462286467584:pagedata <- cbind(NA,pagedata)
1462286467586:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462286467588:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1462286467594:metrics <- c(metrics,demographics[demographic])
1462286467596:}
1462286467600:} else if ((metrics)[metric] == 'page_fans_online') {
1462286467604:for (hour in 1:length(hours)) {
1462286467606:typehold <- NA
1462286467608:typehold <- hold[hold$variable == hours[hour],]
1462286467611:pagedata <- cbind(NA,pagedata)
1462286467613:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462286467615:colnames(pagedata)[1] = paste("hour",hours[hour])
1462286467619:metrics <- c(metrics,hours[hour])
1462286467621:}
1462286467625:} else {
1462286467627:pagedata <- cbind(NA,pagedata)
1462286467632:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1462286467636:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1462286467639:}
1462286467642:cat("\n\n")
1462286467644:print(head(pagedata))
1462286467648:cat("\n")
1462286467651:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1462286467653:break
1462286467656:} else {
1462286467659:}
1462286467672:pagedata.tempstore <- pagedata
1462286467678:#Page Metrics to remove because they have subtypes
1462286467682:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1462286467686:# Page Metrics to manually create
1462286467688:metrics <- c(metrics,"organic reach")
1462286467691:names(metrics)[length(metrics)] <- c("Organic Reach")
1462286467698:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1462286467700:colnames(pagedata)[1] = "organic reach"
1462286467703:# Final dataset formatting
1462286467705:pagedatastore <- pagedata
1462286467707:#pagedata <- pagedatastore
1462286467709:pagedata2 <- pagedata
1462286467715:# reorder and null NA's for excel
1462286467717:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1462286467720:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1462286467722:#pagedata2[is.na(pagedata2)] <- ""
1462286467725:#pagedata2[pagedata2 == 0] <- ""
1462286467731:# store final dataset
1462286467733:pagedata <- pagedata2
1462286467739:### Post Metrics #############################
1462286467741:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1462286467743:# Most are automated, and will continue to retry through errors until a value is found.
1462286467744:# Manual modifications are run after initial data acquisition.
1462286467749:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1462286467752:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1462286467755:# Populate sets with values from pull
1462286467758:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1462286467762:page$datetime <- format.facebook.date(page$created_time)
1462286467765:page$month <- format(page$datetime, "%Y-%m")
1462286467767:page$day <- format(page$datetime, "%Y-%m-%d")
1462286467773:page$datetime <- as.Date(page$datetime)
1462286467777:#page$month <- as.Date(page$month)
1462286467780:page$day <- as.Date(page$day)
1462286467784:} else {
1462286467786:print("Date fields already exist for Post Data.")
1462286467789:}
1462286467793:postdata <- 0
1462286467795:postdata <- page[page$day > floor,]
1462286467799:postdata <- postdata[postdata$day < roof,]
1462286467806:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1462286467817:# Name column for usability
1462286467820:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1462286467827:rows <- nrow(postdata)
1462286467831:lpostmetrics <- postmetrics
1462286467837:#testlength <- 2
1462286467841:#length(postmetrics) instead of testlength; swapped out for hotfixes
1462286467856:for (pmetric in 1:length(postmetrics)) {
1462286467860:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$from_name[1]))
1462286467868:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1462286467871:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1462286467876:names(phold) <- c("id","name","period","title","description","value","variable")
1462286467880:} else {
1462286467884:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1462286467888:names(phold) <- c("id","name","period","title","description","value")
1462286467892:}
1462286467904:for (post in 1:nrow(postdata)) {
1462286467911:period <- "lifetime"
1462286467922:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1462286467930:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1462286467934:print('Not a Facebook Video.')
1462286467938:phold <- rbind(phold, NA)
1462286467942:next()
1462286467946:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1462286467950:} else {
1462286467954:}
1462286467966:postpull <- NULL
1462286467970:attempt <- 1
1462286467974:while( is.null(postpull) && attempt <= 50) {
1462286467976:attempt <- attempt + 1
1462286467980:try(
1462286467982:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1462286467986:#,silent=TRUE
1462286467990:)
1462286467993:if (attempt > 10) {
1462286467996:print('Too many attempts. Skipping.')
1462286468000:postpull <- NULL
1462286468004:break
1462286468008:} else {
1462286468011:print('Retrying.')
1462286468016:}
1462286468029:colnames(phold) <- names(postpull)
1462286468033:phold <- rbind(phold, postpull)
1462286468037:}
1462286468042:pholdstore <- phold
1462286468051:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1462286468055:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1462286468064:phold <- phold[-1,]
1462286468072:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1462286468082:postmetrics <- postmetrics[-pmetric]
1462286468084:pmetric <- pmetric + 1
1462286468088:for (ptype in (1:length(psubtypes))) {
1462286468090:ptyphehold <- NA
1462286468094:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1462286468102:postdata <- cbind(NA,postdata)
1462286468104:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1462286468111:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1462286468114:postmetrics <- c(postmetrics,psubtypes[ptype])
1462286468118:}
1462286468129:} else {
1462286468134:postdata <- cbind(NA,postdata)
1462286468136:postdata[1:length(phold$value),1] <- phold$value
1462286468139:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1462286468142:}
1462286468152:cat("\n\n")
1462286468157:print(head(postdata))
1462286468161:cat("\n")
1462286468164:}
1462286468170:postdatastore <- postdata
1462286468187:# Post Metrics to manually create
1462286468190:postmetrics <- c(postmetrics,"organic reach")
1462286468192:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1462286468198:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1462286468201:colnames(postdata)[1] = "organic reach"
1462286468208:# Final dataset formatting
1462286468211:#postdatastore <- postdata
1462286468215:#postdata <- postdatastore
1462286468225:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1462286468230:# reorder and null NA's for Excel
1462286468233:postdata2 <- postdata
1462286468235:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1462286468240:postdata2[is.na(postdata2)] <- ""
1462286468245:postdata2[postdata2 == 0] <- ""
1462286468251:# store final dataset
1462286468256:postdata <- as.data.frame(postdata2)
1462286468262:# Outputs -----------------------------------------------------------------
1462286468271:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1462286468275:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1462286468282:datafolder <- "Data"
1462286468291:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1462286468297:# Rename columns for Excel readability
1462286468300:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1462286468305:# output Page dataset as final csv
1462286468309:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1462286468312:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462286468317:?wri
1462286468322:# Rename columns for Excel readability
1462286468326:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1462286468330:# output Post dataset as final Excel
1462286468335:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1462286468338:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462286485468:}
1462457468215:NutritionHashtags <- read.csv("~/Work/Dairy Farmers of Canada/Nutrition Month/Hashtags.csv", dec=",", quote="", na.strings="", stringsAsFactors=FALSE)
1462457468346:View(NutritionHashtags)
1462457486113:NutritionHashtags$Twitter.Hashtags
1462457498881:NutritionHashtags$X
1462457523282:Nutrition <- c(NutritionHashtags$Twitter.Hashtags,NutritionHashtags$X,NutritionHashtags$X.1,NutritionHashtags$X.2)
1462457535619:Nutrition
1462457544536:Nutrition <- c(NutritionHashtags$Twitter.Hashtags,NutritionHashtags$X,NutritionHashtags$X.1,NutritionHashtags$X.2)
1462457551156:na.omit(Nutrition)
1462457558205:Nutrition <- c(NutritionHashtags$Twitter.Hashtags,NutritionHashtags$X,NutritionHashtags$X.1,NutritionHashtags$X.2)
1462457564121:Nutrition
1462457579597:Nutrition["NA"]
1462457583410:Nutrition[Nutrition="NA"]
1462457586758:Nutrition[Nutrition == "NA"]
1462457593889:na.omit(Nutrition)
1462457613374:Nutrition <- na.omit(Nutrition)
1462457629782:?write.csv
1462457653611:write.csv(Nutrition,"~/Desktop/Nutrition.csv")
1462540802732:ftokens <- c(
1462540802735:#Sledgehammer Wine
1462540802735:"EAACEdEose0cBAEyF7hkNB6lPbRHGjf0vKqW9ZB8sZBSy3LUGTUelMy8ZBE4rTo1HWZAc6IbZBUDkE6p7lhQ7FeCtxb1P0nUvy9x3ltkZCmcP1CyxSaSDZAwlPsUwZBysAtvvTCuqjDxmqZCYv5X4t2GKsZAVENiMZAkcur64cU7qu71xgZDZD"
1462540802738:#Chateau Saint Jean
1462540802738:,"EAACEdEose0cBAB6y1eZButlUqpuUt1IUau7lDlZChQxE4MiXWMZCuWkCLsI9yZCajIEnIQVxZCQrmR2XMJdsaufMRhh5QOkVrzwcMZAZCC4FctcBfZByjZCVsctpvMmPKJLGRWyyToWvMqxM4CBLi3rELZCipHbfI8QgCj04Py8ZCgVRAZDZD"
1462540802738:#19 Crimes
1462540802739:,"EAACEdEose0cBAHIQiWkKO8TdkDpxnojS1lDoZATgRap3L8Sz3D0B7WUYilnpj1NvnltXTbOE12QSnEDvjO2KmUZAvMRy3dVrZCBHP9ZCNiGjbXRK5QCkwsA7Vn5cD9oW9BSOGHb92N3o0j9t3ZAlptZA9kGjTv3qymVOvlsg5b7QZDZD"
1462540802739:#Beringer Vneyards
1462540802739:,"EAACEdEose0cBAP5NwqMtlIxi8HWYe4G6CP1hpHRatyK5AN1X6CDIVu1nDOfSZAI8ovTF4ibkwpkH1NMxEPwBdOgemK6nnbl8rsNF1mCoCYho4wMLrWdlYD5zJuJEOcMOJWJsECwKfFycVIdpymSoFZAq91ZBDZBUkz2DU3OZARgZDZD"
1462540802739:#100% Canadian Milk
1462540802739:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1462540802740:#Lait 100% Canadien
1462540802740:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1462540802740:#Recharge with Milk
1462540802740:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1462540802740:#Misc
1462540802741:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1462540802741:#Baron
1462540802741:#"EAACEdEose0cBALciy1ZChf6m2djQPKkiqKFF4orfwAwHMh16ZB4ZAx5eSgfwSAGrrIRPYW90D6EflzF7LDZAYku2yUwU3dQyjnPw6lwTTiaasWJ34zyAslNqx34G0erECxs6YZBRIWbVLNI80ZBU2smxERgurcncRlg2CdtFFujwZDZD"
1462540802741:)
1462540802742:totalpagedata <- data.frame()
1462540802742:totalpostdata <- data.frame()
1462540834610:dataname = 'TWE'
1462540852209:totalpagedata <- data.frame()
1462540852210:totalpostdata <- data.frame()
1462540852212:for (brand in 1:length(ftokens)) {
1462540852212:ftoken <- ftokens[brand]
1462540852216:## User Id
1462540852216:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1462540852219:userid = "10153046308598756"
1462540852220:# Access public personal data; basically a ftoken test
1462540852224:me <- getUsers("me", token=ftoken)
1462540852227:print(me$name)
1462540852227:## Page Id
1462540852228:# Define which page will be used for the data collection. Change id's as necessary.
1462540852231:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1462540852231:pageid = me$id
1462540852232:# Acquisition -------------------------------------------------------------
1462540852236:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1462540852239:page <- getPage(pageid, ftoken, n = posts)
1462540852239:page.store <- page
1462540852243:# Create new vectors in dataset with datetime, month, and day formattiong
1462540852244:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1462540852246:page$datetime <- format.facebook.date(page$created_time)
1462540852247:page$month <- format(page$datetime, "%Y-%m")
1462540852250:page$day <- format(page$datetime, "%Y-%m-%d")
1462540852250:page$datetime <- as.Date(page$datetime)
1462540852253:#page$month <- as.Date(page$month)
1462540852254:page$day <- as.Date(page$day)
1462540852254:} else {
1462540852255:print("Date fields already exist.")
1462540852255:}
1462540852256:# Processing --------------------------------------------------------------
1462540852259:# Process data to clean dataset and augment it with more data than default fields.
1462540852259:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1462540852260:## Cleaning =================================
1462540852261:# Page and Post Datasets
1462540852261:# Split dataset into two for pages and post data
1462540852261:# Create initial null sets
1462540852262:pagedata <- 0
1462540852262:postdata <- 0
1462540852263:## Appending =================================
1462540852264:### Page Metrics #############################
1462540852264:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1462540852264:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1462540852266:# Page Metrics to automatically pull
1462540852266:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1462540852269:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1462540852271:pagemetrics <- metrics
1462540852274:# Prep dataset by breaking into weeks
1462540852275:pagedata <- 0
1462540852276:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1462540852278:colnames(pagedata) = c("pageid", "page", "date")
1462540852279:pagedata$page = page$from_name[1]
1462540852281:pagedata$pageid = page$from_id[1]
1462540852282:divisor = 5
1462540852286:remainder = length(range)%%divisor;
1462540852288:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1462540852290:weeks <- 2 # (nrow(pagedata)/5)-2
1462540852292:# Start Data Acquisition Loop
1462540852293:for (metric in 1:length(metrics)) {
1462540852294:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1462540852298:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1462540852299:period = 'lifetime'
1462540852300:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1462540852301:period = 'day'
1462540852305:tempfloor = "2014-02-01"
1462540852306:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1462540852307:if (floor < tempfloor) {
1462540852308:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1462540852309:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1462540852310:weeks = tempweeks
1462540852311:} else {}
1462540852312:} else {
1462540852313:period = 'day'
1462540852314:weeks <- (nrow(pagedata)/5)-2
1462540852316:}
1462540852319:hold <- matrix(0, nrow=0, ncol=7)
1462540852321:for (week in 0:weeks) {
1462540852324:end <- pagedata$date[(week*5)+1]
1462540852325:start <- pagedata$date[((week+1)*5)+1]
1462540852328:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1462540852330:pull <- NULL
1462540852331:attempt <- 1
1462540852336:while(is.null(pull) && attempt <= 10) {
1462540852337:attempt <- attempt + 1
1462540852339:try(
1462540852340:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1462540852343:)
1462540852346:if (is.null(pull)) {
1462540852347:print("Empty Pull. Re-attempting.")
1462540852350:print(paste("Attempt", attempt))
1462540852352:} else {
1462540852354:pull$datetime <- format.facebook.date(pull$end_time)
1462540852355:pull$day <- format(pull$datetime, "%Y-%m-%d")
1462540852359:pull$datetime <- as.Date(pull$datetime)
1462540852360:#page$month <- as.Date(page$month)
1462540852362:pull$day <- as.Date(pull$day)
1462540852365:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1462540852367:print("Found Facebook data matching date range. Storing values.")
1462540852370:} else {
1462540852372:print("Did not find Facebook data matching dataset dates. Re-querying.")
1462540852374:print(paste("Attempt", attempt))
1462540852375:pull <- NULL}
1462540852378:if (attempt > 100) {
1462540852380:print('Too many attempts. Skipping.')
1462540852382:pull <- NULL
1462540852384:break
1462540852386:} else {}
1462540852388:}
1462540852391:pulllength <- ncol(pull)
1462540852394:rpull = pull[rev(rownames(pull)),]
1462540852395:hold <- rbind(hold,rpull)
1462540852397:rawhold <- hold
1462540852399:}
1462540852406:rhold = hold[rev(rownames(hold)),]
1462540852408:rhold$value = shift(rhold$value, 1)
1462540852411:hold = rhold[rev(rownames(rhold)),]
1462540852414:hold$value[1] = rawhold$value[1]
1462540852417:hours <- seq(0,23)
1462540852418:names(hours) <- paste("Hour", hours)
1462540852423:subtypes <- c('link','comment', 'like')
1462540852425:names(subtypes) <- c('Shares','Comments', 'Likes')
1462540852429:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1462540852431:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1462540852434:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1462540852439:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1462540852443:for (type in 1:length(subtypes)) {
1462540852444:typehold <- NA
1462540852447:typehold <- hold[hold$variable == subtypes[type],]
1462540852451:pagedata <- cbind(NA,pagedata)
1462540852453:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462540852455:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1462540852459:metrics <- c(metrics,subtypes[type])
1462540852460:}
1462540852464:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1462540852467:for (demographic in 1:length(demographics)) {
1462540852470:print(names(demographics[demographic]))
1462540852473:typehold <- NA
1462540852475:typehold <- hold[hold$variable == demographics[demographic],]
1462540852477:typehold[typehold$value <= 10,] <- NA
1462540852481:pagedata <- cbind(NA,pagedata)
1462540852484:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462540852486:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1462540852489:metrics <- c(metrics,demographics[demographic])
1462540852491:}
1462540852496:} else if ((metrics)[metric] == 'page_fans_online') {
1462540852500:for (hour in 1:length(hours)) {
1462540852505:typehold <- NA
1462540852508:typehold <- hold[hold$variable == hours[hour],]
1462540852512:pagedata <- cbind(NA,pagedata)
1462540852515:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462540852517:colnames(pagedata)[1] = paste("hour",hours[hour])
1462540852523:metrics <- c(metrics,hours[hour])
1462540852525:}
1462540852528:} else {
1462540852530:pagedata <- cbind(NA,pagedata)
1462540852533:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1462540852536:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1462540852541:}
1462540852545:cat("\n\n")
1462540852546:print(head(pagedata))
1462540852550:cat("\n")
1462540852553:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1462540852555:break
1462540852557:} else {
1462540852560:}
1462540852566:pagedata.tempstore <- pagedata
1462540852569:#Page Metrics to remove because they have subtypes
1462540852571:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1462540852576:# Page Metrics to manually create
1462540852578:metrics <- c(metrics,"organic reach")
1462540852581:names(metrics)[length(metrics)] <- c("Organic Reach")
1462540852584:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1462540852587:colnames(pagedata)[1] = "organic reach"
1462540852592:# Final dataset formatting
1462540852593:pagedatastore <- pagedata
1462540852595:#pagedata <- pagedatastore
1462540852597:pagedata2 <- pagedata
1462540852601:# reorder and null NA's for excel
1462540852604:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1462540852607:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1462540852610:#pagedata2[is.na(pagedata2)] <- ""
1462540852611:#pagedata2[pagedata2 == 0] <- ""
1462540852614:# store final dataset
1462540852616:pagedata <- pagedata2
1462540852620:### Post Metrics #############################
1462540852622:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1462540852625:# Most are automated, and will continue to retry through errors until a value is found.
1462540852626:# Manual modifications are run after initial data acquisition.
1462540852631:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1462540852634:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1462540852637:# Populate sets with values from pull
1462540852640:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1462540852643:page$datetime <- format.facebook.date(page$created_time)
1462540852648:page$month <- format(page$datetime, "%Y-%m")
1462540852651:page$day <- format(page$datetime, "%Y-%m-%d")
1462540852657:page$datetime <- as.Date(page$datetime)
1462540852661:#page$month <- as.Date(page$month)
1462540852663:page$day <- as.Date(page$day)
1462540852665:} else {
1462540852667:print("Date fields already exist for Post Data.")
1462540852670:}
1462540852673:postdata <- 0
1462540852675:postdata <- page[page$day > floor,]
1462540852678:postdata <- postdata[postdata$day < roof,]
1462540852682:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1462540852689:# Name column for usability
1462540852693:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1462540852700:rows <- nrow(postdata)
1462540852702:lpostmetrics <- postmetrics
1462540852707:#testlength <- 2
1462540852710:#length(postmetrics) instead of testlength; swapped out for hotfixes
1462540852721:for (pmetric in 1:length(postmetrics)) {
1462540852724:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$from_name[1]))
1462540852727:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1462540852729:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1462540852731:names(phold) <- c("id","name","period","title","description","value","variable")
1462540852734:} else {
1462540852736:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1462540852740:names(phold) <- c("id","name","period","title","description","value")
1462540852743:}
1462540852753:for (post in 1:nrow(postdata)) {
1462540852758:period <- "lifetime"
1462540852764:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1462540852768:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1462540852771:print('Not a Facebook Video.')
1462540852773:phold <- rbind(phold, NA)
1462540852775:next()
1462540852777:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1462540852780:} else {
1462540852782:}
1462540852790:postpull <- NULL
1462540852793:attempt <- 1
1462540852797:while( is.null(postpull) && attempt <= 50) {
1462540852800:attempt <- attempt + 1
1462540852804:try(
1462540852807:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1462540852811:#,silent=TRUE
1462540852814:)
1462540852816:if (attempt > 10) {
1462540852819:print('Too many attempts. Skipping.')
1462540852821:postpull <- NULL
1462540852825:break
1462540852828:} else {
1462540852830:print('Retrying.')
1462540852835:}
1462540852842:colnames(phold) <- names(postpull)
1462540852844:phold <- rbind(phold, postpull)
1462540852846:}
1462540852850:pholdstore <- phold
1462540852857:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1462540852861:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1462540852868:phold <- phold[-1,]
1462540852874:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1462540852879:postmetrics <- postmetrics[-pmetric]
1462540852882:pmetric <- pmetric + 1
1462540852888:for (ptype in (1:length(psubtypes))) {
1462540852890:ptyphehold <- NA
1462540852892:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1462540852899:postdata <- cbind(NA,postdata)
1462540852901:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1462540852911:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1462540852915:postmetrics <- c(postmetrics,psubtypes[ptype])
1462540852919:}
1462540852928:} else {
1462540852931:postdata <- cbind(NA,postdata)
1462540852933:postdata[1:length(phold$value),1] <- phold$value
1462540852936:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1462540852938:}
1462540852948:cat("\n\n")
1462540852951:print(head(postdata))
1462540852956:cat("\n")
1462540852959:}
1462540852966:postdatastore <- postdata
1462540852978:# Post Metrics to manually create
1462540852980:postmetrics <- c(postmetrics,"organic reach")
1462540852982:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1462540852990:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1462540852992:colnames(postdata)[1] = "organic reach"
1462540852999:# Final dataset formatting
1462540853004:#postdatastore <- postdata
1462540853008:#postdata <- postdatastore
1462540853014:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1462540853023:# reorder and null NA's for Excel
1462540853026:postdata2 <- postdata
1462540853030:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1462540853034:postdata2[is.na(postdata2)] <- ""
1462540853038:postdata2[postdata2 == 0] <- ""
1462540853043:# store final dataset
1462540853046:postdata <- as.data.frame(postdata2)
1462540853053:# Outputs -----------------------------------------------------------------
1462540853058:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1462540853061:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1462540853066:datafolder <- "Data"
1462540853074:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1462540853081:# Rename columns for Excel readability
1462540853084:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1462540853087:# output Page dataset as final csv
1462540853090:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1462540853092:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462540853096:?wri
1462540853099:# Rename columns for Excel readability
1462540853102:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1462540853105:# output Post dataset as final Excel
1462540853109:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1462540853115:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462540853123:# Raw Data
1462540853130:# output dataset as raw csv
1462540853133:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1462540853139:totalpagedata <- rbind(totalpagedata, pagedata)
1462540853143:totalpostdata <- rbind(totalpostdata, postdata)
1462540853148:}
1462540853156:dataname = 'TWE'
1462540853157:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste(dataname, "Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462540853159:# Rename columns for Excel readability
1462540853164:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1462540853167:# output Post dataset as final Excel
1462540853169:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1462540853170:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste(dataname,"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462540868385:## Facebook Query Injector #####
1462540868386:## Mirum Agency ################
1462540868388:## By Vivek Menon ##############
1462540868388:## v.1.5.0 #####################
1462540868392:# Summary -----------------------------------------------------------------
1462540868393:# Todo --------------------------------------------------------------------
1462540868395:# - Run script for all major brands
1462540868396:# - Create 'participation rate' function
1462540868399:# - Incorporate Twitter
1462540868399:# Setup -------------------------------------------------------------------
1462540868400:# Load and install all necessary packages for the script
1462540868400:# Required Packages for dataframes, forecasting, graphical visualization, and development
1462540868400:# Use 'install.packages()' if unavailable.
1462540868401:#library(zoo)
1462540868401:#library(forecast)
1462540868402:library(ggplot2)
1462540868737:#library(scales)
1462540868738:library(devtools)
1462540868794:library(compare)
1462540868826:library(xlsx)
1462540869909:require(httr)
1462540869948:require(rjson)
1462540869992:require(RCurl)
1462540870225:# Pull most up to date Github repositories for relevant packages
1462540870225:# Not frequently updated; does not need to be run every time.
1462540870227:#install_github("pablobarbera/Rfacebook/Rfacebook")
1462540870228:#install_github("pablobarbera/instaR/instaR")
1462540870231:# Required packags for plugging into Facebook API
1462540870232:#library(twitteR)
1462540870235:#install.packages('Rfacebook')
1462540870237:library(devtools)
1462540870239:install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
1462540872984:library(Rfacebook)
1462540873089:#library(instaR)
1462540873089:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1462540873091:# https://instagram.com/developer/authentication/?hl=en
1462540873092:setwd("~/")
1462540873092:getwd()
1462540873093:# Authorize with Facebook
1462540873093:#Using 'rFacebook' from Github
1462540873096:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1462540875793:# Functions ---------------------------------------------------------------
1462540875793:# User Functions
1462540875796:# Function to convert Facebook date format to R date format
1462540875796:format.facebook.date <- function(datestring) {
1462540875796:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1462540875797:}
1462540875797:# Shift a vector up by an amount
1462540875797:shift <- function(x, n){
1462540875797:c(x[-(seq(n))], rep(NA, n))
1462540875798:}
1462540875798:# Get gcd from vector
1462540875798:gcd <- function(x,y) {
1462540875799:r <- x%%y;
1462540875799:return(ifelse(r, gcd(y, r), y))
1462540875799:}
1462540875800:# Inputs ------------------------------------------------------------------
1462540875800:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1462540875802:# Define data range for data (2012 is out of bounds for some metrics)
1462540875803:posts <- 5000
1462540875803:roof = Sys.Date() #"2015-12-31"
1462540875805:floor = "2016-01-01" #"2015-05-01"
1462540875806:range = seq(as.Date(floor), as.Date(roof), by="days")
1462540875812:## Access ftoken
1462540875812:# Use token from Facebook Graph API
1462540875814:# token generated here: https://developers.facebook.com/tools/explorer
1462540875814:# Lasts two hours, and must be changed depending on page and permissions
1462540875815:ftokens <- c(
1462540875815:#Sledgehammer Wine
1462540875815:"EAACEdEose0cBAEyF7hkNB6lPbRHGjf0vKqW9ZB8sZBSy3LUGTUelMy8ZBE4rTo1HWZAc6IbZBUDkE6p7lhQ7FeCtxb1P0nUvy9x3ltkZCmcP1CyxSaSDZAwlPsUwZBysAtvvTCuqjDxmqZCYv5X4t2GKsZAVENiMZAkcur64cU7qu71xgZDZD"
1462540875816:#Chateau Saint Jean
1462540875816:,"EAACEdEose0cBAB6y1eZButlUqpuUt1IUau7lDlZChQxE4MiXWMZCuWkCLsI9yZCajIEnIQVxZCQrmR2XMJdsaufMRhh5QOkVrzwcMZAZCC4FctcBfZByjZCVsctpvMmPKJLGRWyyToWvMqxM4CBLi3rELZCipHbfI8QgCj04Py8ZCgVRAZDZD"
1462540875817:#19 Crimes
1462540875817:,"EAACEdEose0cBAHIQiWkKO8TdkDpxnojS1lDoZATgRap3L8Sz3D0B7WUYilnpj1NvnltXTbOE12QSnEDvjO2KmUZAvMRy3dVrZCBHP9ZCNiGjbXRK5QCkwsA7Vn5cD9oW9BSOGHb92N3o0j9t3ZAlptZA9kGjTv3qymVOvlsg5b7QZDZD"
1462540875817:#Beringer Vneyards
1462540875817:,"EAACEdEose0cBAP5NwqMtlIxi8HWYe4G6CP1hpHRatyK5AN1X6CDIVu1nDOfSZAI8ovTF4ibkwpkH1NMxEPwBdOgemK6nnbl8rsNF1mCoCYho4wMLrWdlYD5zJuJEOcMOJWJsECwKfFycVIdpymSoFZAq91ZBDZBUkz2DU3OZARgZDZD"
1462540875818:#100% Canadian Milk
1462540875818:#"CAACEdEose0cBAN55w2Iwc1CCih30BVoA6sJzxZChyuuU5gsK0eTTYi3u9ArxrhaFQwqVSnRUxS7AeHXi2ZC6EcyBJlgYAVT9BM3YHHHgA9LsZC5qffOrHdQFnrEt5R6ZAMpltOCyzfMzNyO2nTb8LW89BFci1gxiuqzWEcGeT3dZAjYc4ZBBAuRRg6cMjO2nDbyrlZBcS3jPAZDZD"
1462540875819:#Lait 100% Canadien
1462540875819:#,"CAACEdEose0cBABvIZCxdsiheNqkU6JrRpsdYDMdlOXv3fmVVHrtOXhDE92KoqS6Q9wjlZBZAjZAFENUsBztZBqZBgJEGgGZAu8niDw2vkVS1vzKwedFFpPcQr39dAaCJy018ZAhNNbhRZARPMGsQyFr6H7owPBRgZCWPynFihWs7zgx2vFpjY8qdPKVpFiDMmW20djQhJSF7C76QZDZD"
1462540875819:#Recharge with Milk
1462540875820:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1462540875821:#Misc
1462540875824:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1462540875825:#Baron
1462540875828:#"EAACEdEose0cBALciy1ZChf6m2djQPKkiqKFF4orfwAwHMh16ZB4ZAx5eSgfwSAGrrIRPYW90D6EflzF7LDZAYku2yUwU3dQyjnPw6lwTTiaasWJ34zyAslNqx34G0erECxs6YZBRIWbVLNI80ZBU2smxERgurcncRlg2CdtFFujwZDZD"
1462540875828:)
1462540875829:totalpagedata <- data.frame()
1462540875830:totalpostdata <- data.frame()
1462540875833:for (brand in 1:length(ftokens)) {
1462540875833:ftoken <- ftokens[brand]
1462540875837:## User Id
1462540875838:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1462540875842:userid = "10153046308598756"
1462540875844:# Access public personal data; basically a ftoken test
1462540875844:me <- getUsers("me", token=ftoken)
1462540875845:print(me$name)
1462540875846:## Page Id
1462540875846:# Define which page will be used for the data collection. Change id's as necessary.
1462540875847:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1462540875848:pageid = me$id
1462540875849:# Acquisition -------------------------------------------------------------
1462540875849:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1462540875850:page <- getPage(pageid, ftoken, n = posts)
1462540875851:page.store <- page
1462540875852:# Create new vectors in dataset with datetime, month, and day formattiong
1462540875855:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1462540875855:page$datetime <- format.facebook.date(page$created_time)
1462540875858:page$month <- format(page$datetime, "%Y-%m")
1462540875859:page$day <- format(page$datetime, "%Y-%m-%d")
1462540875863:page$datetime <- as.Date(page$datetime)
1462540875863:#page$month <- as.Date(page$month)
1462540875866:page$day <- as.Date(page$day)
1462540875867:} else {
1462540875871:print("Date fields already exist.")
1462540875873:}
1462540875875:# Processing --------------------------------------------------------------
1462540875877:# Process data to clean dataset and augment it with more data than default fields.
1462540875878:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1462540875882:## Cleaning =================================
1462540875883:# Page and Post Datasets
1462540875885:# Split dataset into two for pages and post data
1462540875887:# Create initial null sets
1462540875889:pagedata <- 0
1462540875889:postdata <- 0
1462540875893:## Appending =================================
1462540875894:### Page Metrics #############################
1462540875896:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1462540875896:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1462540875901:# Page Metrics to automatically pull
1462540875902:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1462540875904:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1462540875906:pagemetrics <- metrics
1462540875909:# Prep dataset by breaking into weeks
1462540875910:pagedata <- 0
1462540875911:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1462540875913:colnames(pagedata) = c("pageid", "page", "date")
1462540875915:pagedata$page = page$from_name[1]
1462540875916:pagedata$pageid = page$from_id[1]
1462540875917:divisor = 5
1462540875918:remainder = length(range)%%divisor;
1462540875921:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1462540875924:weeks <- 2 # (nrow(pagedata)/5)-2
1462540875926:# Start Data Acquisition Loop
1462540875927:for (metric in 1:length(metrics)) {
1462540875929:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1462540875931:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1462540875932:period = 'lifetime'
1462540875935:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1462540875936:period = 'day'
1462540875939:tempfloor = "2014-02-01"
1462540875941:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1462540875945:if (floor < tempfloor) {
1462540875947:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1462540875949:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1462540875950:weeks = tempweeks
1462540875954:} else {}
1462540875956:} else {
1462540875958:period = 'day'
1462540875959:weeks <- (nrow(pagedata)/5)-2
1462540875962:}
1462540875965:hold <- matrix(0, nrow=0, ncol=7)
1462540875968:for (week in 0:weeks) {
1462540875970:end <- pagedata$date[(week*5)+1]
1462540875972:start <- pagedata$date[((week+1)*5)+1]
1462540875975:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1462540875977:pull <- NULL
1462540875979:attempt <- 1
1462540875983:while(is.null(pull) && attempt <= 10) {
1462540875985:attempt <- attempt + 1
1462540875989:try(
1462540875991:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1462540875994:)
1462540875996:if (is.null(pull)) {
1462540875998:print("Empty Pull. Re-attempting.")
1462540876000:print(paste("Attempt", attempt))
1462540876002:} else {
1462540876004:pull$datetime <- format.facebook.date(pull$end_time)
1462540876005:pull$day <- format(pull$datetime, "%Y-%m-%d")
1462540876008:pull$datetime <- as.Date(pull$datetime)
1462540876010:#page$month <- as.Date(page$month)
1462540876011:pull$day <- as.Date(pull$day)
1462540876014:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1462540876015:print("Found Facebook data matching date range. Storing values.")
1462540876019:} else {
1462540876021:print("Did not find Facebook data matching dataset dates. Re-querying.")
1462540876023:print(paste("Attempt", attempt))
1462540876026:pull <- NULL}
1462540876029:if (attempt > 100) {
1462540876031:print('Too many attempts. Skipping.')
1462540876032:pull <- NULL
1462540876033:break
1462540876038:} else {}
1462540876040:}
1462540876045:pulllength <- ncol(pull)
1462540876049:rpull = pull[rev(rownames(pull)),]
1462540876053:hold <- rbind(hold,rpull)
1462540876055:rawhold <- hold
1462540876057:}
1462540876068:rhold = hold[rev(rownames(hold)),]
1462540876070:rhold$value = shift(rhold$value, 1)
1462540876073:hold = rhold[rev(rownames(rhold)),]
1462540876075:hold$value[1] = rawhold$value[1]
1462540876079:hours <- seq(0,23)
1462540876081:names(hours) <- paste("Hour", hours)
1462540876085:subtypes <- c('link','comment', 'like')
1462540876088:names(subtypes) <- c('Shares','Comments', 'Likes')
1462540876092:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1462540876094:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1462540876098:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1462540876103:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1462540876106:for (type in 1:length(subtypes)) {
1462540876108:typehold <- NA
1462540876110:typehold <- hold[hold$variable == subtypes[type],]
1462540876115:pagedata <- cbind(NA,pagedata)
1462540876117:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462540876119:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1462540876123:metrics <- c(metrics,subtypes[type])
1462540876124:}
1462540876130:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1462540876132:for (demographic in 1:length(demographics)) {
1462540876135:print(names(demographics[demographic]))
1462540876138:typehold <- NA
1462540876141:typehold <- hold[hold$variable == demographics[demographic],]
1462540876143:typehold[typehold$value <= 10,] <- NA
1462540876147:pagedata <- cbind(NA,pagedata)
1462540876150:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462540876152:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1462540876157:metrics <- c(metrics,demographics[demographic])
1462540876159:}
1462540876164:} else if ((metrics)[metric] == 'page_fans_online') {
1462540876166:for (hour in 1:length(hours)) {
1462540876173:typehold <- NA
1462540876176:typehold <- hold[hold$variable == hours[hour],]
1462540876181:pagedata <- cbind(NA,pagedata)
1462540876183:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1462540876186:colnames(pagedata)[1] = paste("hour",hours[hour])
1462540876191:metrics <- c(metrics,hours[hour])
1462540876194:}
1462540876196:} else {
1462540876199:pagedata <- cbind(NA,pagedata)
1462540876202:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1462540876206:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1462540876210:}
1462540876215:cat("\n\n")
1462540876219:print(head(pagedata))
1462540876221:cat("\n")
1462540876226:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1462540876228:break
1462540876231:} else {
1462540876232:}
1462540876244:pagedata.tempstore <- pagedata
1462540876247:#Page Metrics to remove because they have subtypes
1462540876250:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1462540876256:# Page Metrics to manually create
1462540876259:metrics <- c(metrics,"organic reach")
1462540876261:names(metrics)[length(metrics)] <- c("Organic Reach")
1462540876266:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1462540876269:colnames(pagedata)[1] = "organic reach"
1462540876274:# Final dataset formatting
1462540876277:pagedatastore <- pagedata
1462540876282:#pagedata <- pagedatastore
1462540876285:pagedata2 <- pagedata
1462540876292:# reorder and null NA's for excel
1462540876295:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1462540876298:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1462540876301:#pagedata2[is.na(pagedata2)] <- ""
1462540876304:#pagedata2[pagedata2 == 0] <- ""
1462540876311:# store final dataset
1462540876314:pagedata <- pagedata2
1462540876322:### Post Metrics #############################
1462540876325:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1462540876328:# Most are automated, and will continue to retry through errors until a value is found.
1462540876331:# Manual modifications are run after initial data acquisition.
1462540876337:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1462540876340:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1462540876348:# Populate sets with values from pull
1462540876354:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1462540876358:page$datetime <- format.facebook.date(page$created_time)
1462540876361:page$month <- format(page$datetime, "%Y-%m")
1462540876365:page$day <- format(page$datetime, "%Y-%m-%d")
1462540876372:page$datetime <- as.Date(page$datetime)
1462540876376:#page$month <- as.Date(page$month)
1462540876380:page$day <- as.Date(page$day)
1462540876383:} else {
1462540876387:print("Date fields already exist for Post Data.")
1462540876391:}
1462540876399:postdata <- 0
1462540876403:postdata <- page[page$day > floor,]
1462540876407:postdata <- postdata[postdata$day < roof,]
1462540876414:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1462540876425:# Name column for usability
1462540876429:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1462540876435:rows <- nrow(postdata)
1462540876439:lpostmetrics <- postmetrics
1462540876445:#testlength <- 2
1462540876447:#length(postmetrics) instead of testlength; swapped out for hotfixes
1462540876461:for (pmetric in 1:length(postmetrics)) {
1462540876463:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$from_name[1]))
1462540876467:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1462540876470:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1462540876472:names(phold) <- c("id","name","period","title","description","value","variable")
1462540876476:} else {
1462540876479:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1462540876481:names(phold) <- c("id","name","period","title","description","value")
1462540876484:}
1462540876492:for (post in 1:nrow(postdata)) {
1462540876498:period <- "lifetime"
1462540876506:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1462540876512:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1462540876515:print('Not a Facebook Video.')
1462540876518:phold <- rbind(phold, NA)
1462540876522:next()
1462540876525:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1462540876529:} else {
1462540876534:}
1462540876543:postpull <- NULL
1462540876546:attempt <- 1
1462540876550:while( is.null(postpull) && attempt <= 50) {
1462540876553:attempt <- attempt + 1
1462540876557:try(
1462540876561:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1462540876564:#,silent=TRUE
1462540876567:)
1462540876571:if (attempt > 10) {
1462540876574:print('Too many attempts. Skipping.')
1462540876580:postpull <- NULL
1462540876583:break
1462540876585:} else {
1462540876590:print('Retrying.')
1462540876594:}
1462540876601:colnames(phold) <- names(postpull)
1462540876605:phold <- rbind(phold, postpull)
1462540876608:}
1462540876610:pholdstore <- phold
1462540876616:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1462540876619:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1462540876624:phold <- phold[-1,]
1462540876630:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1462540876636:postmetrics <- postmetrics[-pmetric]
1462540876639:pmetric <- pmetric + 1
1462540876647:for (ptype in (1:length(psubtypes))) {
1462540876651:ptyphehold <- NA
1462540876655:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1462540876660:postdata <- cbind(NA,postdata)
1462540876663:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1462540876670:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1462540876673:postmetrics <- c(postmetrics,psubtypes[ptype])
1462540876676:}
1462540876684:} else {
1462540876687:postdata <- cbind(NA,postdata)
1462540876692:postdata[1:length(phold$value),1] <- phold$value
1462540876695:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1462540876700:}
1462540876711:cat("\n\n")
1462540876714:print(head(postdata))
1462540876717:cat("\n")
1462540876720:}
1462540876726:postdatastore <- postdata
1462540876741:# Post Metrics to manually create
1462540876745:postmetrics <- c(postmetrics,"organic reach")
1462540876749:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1462540876757:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1462540876760:colnames(postdata)[1] = "organic reach"
1462540876765:# Final dataset formatting
1462540876768:#postdatastore <- postdata
1462540876772:#postdata <- postdatastore
1462540876779:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1462540876787:# reorder and null NA's for Excel
1462540876791:postdata2 <- postdata
1462540876795:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1462540876800:postdata2[is.na(postdata2)] <- ""
1462540876805:postdata2[postdata2 == 0] <- ""
1462540876813:# store final dataset
1462540876816:postdata <- as.data.frame(postdata2)
1462540876824:# Outputs -----------------------------------------------------------------
1462540876830:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1462540876833:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1462540876842:datafolder <- "Data"
1462540876850:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1462540876859:# Rename columns for Excel readability
1462540876863:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1462540876868:# output Page dataset as final csv
1462540876873:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1462540876876:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462540876879:?wri
1462540876882:# Rename columns for Excel readability
1462540876885:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1462540876890:# output Post dataset as final Excel
1462540876893:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1462540876896:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462540876905:# Raw Data
1462540876909:# output dataset as raw csv
1462540876913:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1462540876922:totalpagedata <- rbind(totalpagedata, pagedata)
1462540876926:totalpostdata <- rbind(totalpostdata, postdata)
1462540876931:}
1462541839862:dataname = 'TWE'
1462541839865:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste(dataname, "Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462541849991:# Rename columns for Excel readability
1462541849992:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1462541849993:# output Post dataset as final Excel
1462541849993:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1462541849995:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste(dataname,"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462542119421:totalpostdata
1462542131410:#update.packages("instaR")
1462542131410:library("instaR")
1462542131534:setwd("~/")
1462542131535:my_oauth <- instaOAuth(app_id="5933291741634bb29d46b067f8457c50", app_secret="73f4a7f7c78b4fa7b2aeb0a5e7d19dae")
1462542135664:# User Functions
1462542135664:# Function to convert Facebook date format to R date format
1462542135667:format.facebook.date <- function(datestring) {
1462542135667:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1462542135671:}
1462542135675:#folder <- "19c"
1462542135675:#df <- searchInstagram(tag="womenchampions", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1462542135678:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1462542135678:#floor = "2015-12-31" #"2015-05-01"
1462542135682:#df <- df[df$created_time > floor,]
1462542135682:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1462542135686:#"19crimeswine", "19crimeswine,
1462542144618:accounts <- c("19crimeswine", "beringervyds")
1462542145050:roof =  Sys.Date()+1
1462542145597:floor = "2015-03-01"
1462542146018:for (account in 1:length(accounts)) {
1462542146569:posts <- getUserMedia(accounts[account],token=my_oauth, n=500)#,n = 1)#, n=200, verbose = TRUE)
1462542147309:#user <- getUser(accounts[account], token=my_oauth)
1462542147473:#df <- getFollowers('womenchampions', token=my_oauth)
1462542147987:df <- posts
1462542148154:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1462542148159:df$datetime <- format.facebook.date(df$created_time)
1462542148440:df$day <- format(df$datetime, "%Y-%m-%d")
1462542148443:df$month <- format(df$datetime, "%Y-%m")
1462542148739:} else {
1462542148745:}
1462542148747:print("Date fields already exist.")
1462542149125:#roof = "2015-11-02"
1462542149130:#floor = "2013-01-01"
1462542149391:#df <- df[df$day > floor,]
1462542159242:{}
1462542160776:}[]
1462542183591:#update.packages("instaR")
1462542183592:library("instaR")
1462542183738:setwd("~/")
1462542183739:my_oauth <- instaOAuth(app_id="5933291741634bb29d46b067f8457c50", app_secret="73f4a7f7c78b4fa7b2aeb0a5e7d19dae")
1462542186709:# User Functions
1462542186709:# Function to convert Facebook date format to R date format
1462542186711:format.facebook.date <- function(datestring) {
1462542186711:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1462542186712:}
1462542186712:#folder <- "19c"
1462542186713:#df <- searchInstagram(tag="womenchampions", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1462542186715:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1462542186715:#floor = "2015-12-31" #"2015-05-01"
1462542186716:#df <- df[df$created_time > floor,]
1462542186716:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1462542186716:#"19crimeswine", "19crimeswine,
1462542186717:accounts <- c("19crimeswine", "beringervyds")
1462542186718:roof =  Sys.Date()+1
1462542186718:floor = "2015-03-01"
1462542186719:for (account in 1:length(accounts)) {
1462542186721:posts <- getUserMedia(accounts[account],token=my_oauth, n=500)#,n = 1)#, n=200, verbose = TRUE)
1462542186723:#user <- getUser(accounts[account], token=my_oauth)
1462542186723:#df <- getFollowers('womenchampions', token=my_oauth)
1462542186725:df <- posts
1462542186729:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1462542186732:df$datetime <- format.facebook.date(df$created_time)
1462542186732:df$month <- format(df$datetime, "%Y-%m")
1462542186736:df$day <- format(df$datetime, "%Y-%m-%d")
1462542186737:} else {
1462542186740:print("Date fields already exist.")
1462542186743:}
1462542186747:#roof = "2015-11-02"
1462542186748:#floor = "2013-01-01"
1462542186751:#df <- df[df$day > floor,]
1462542186752:#df <- df[df$day < roof,]
1462542186755:#posts <- posts[posts$created_time > floor,]
1462542186756:#posts <- posts[posts$created_time < roof,]
1462542186758:#posts <- df
1462542186759:follows <- NULL
1462542186759:impressions <- NULL
1462542186760:impressionusers <- NULL
1462542186761:count <- 0
1462542186761:jump <- 1 # Loop paramater
1462542186762:weight <- 0.1 # 10%
1462542186763:for (post in 1:nrow(df)) {
1462542186765:try(impressionusers <- c(
1462542186765:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1462542186769:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1462542186769:)
1462542186773:,silent = TRUE)
1462542186773:impression <- 0
1462542186775:if (is.null(impressionusers) == TRUE){
1462542186776:impressions[post] <- 0
1462542186780:} else {
1462542186783:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1462542186784:for (user in 1:length(impressionusers)){
1462542186786:#print(user)
1462542186787:#print(impression)
1462542186790:userdata <- NULL
1462542186792:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1462542186795:if (is.null(userdata)) {
1462542186796:newimpression <- 0
1462542186800:impression <- as.numeric(newimpression) + as.numeric(impression)
1462542186802:next
1462542186803:} else {
1462542186806:newimpression <- + userdata$follows + userdata$followed_by
1462542186806:impression <- as.numeric(impression) + as.numeric(newimpression)
1462542186810:}
1462542186813:# Scale down to simulate organic
1462542186813:impression = ceiling(weight * impression)
1462542186815:impressions[post] <- impression
1462542186817:}
1462542186819:print(impressions[post])
1462542186822:count = count + 1
1462542186825:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1462542186826:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1462542186827:}
1462542186831:impressions.store <- impressions
1462542186832:#impressions <- round(impressions/5,0)
1462542186836:df <- cbind(df, impressions)
1462542186839:df.store <- df
1462542186841:df[is.na(df)] <- ""
1462542186844:name <- paste(df$user_fullname[1],"Instagram", Sys.Date())
1462542186846:datafolder <- "/Data"
1462542186848:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1462542186852:write.csv(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".csv")))#, row.names=FALSE)
1462542186853:}
1462799614498:## Facebook Ad API Scraper #####
1462799614500:## Mirum Agency ################
1462799614500:## By Vivek Menon ##############
1462799614503:## v.1.2.0 #####################
1462799614503:# Setup -------------------------------------------------------------------
1462799614504:#.Options - Check current factory options.
1462799614504:#options(stringsAsFactors = FALSE)
1462799614504:library(httr)
1462799614537:library(RJSONIO)
1462799614599:library(RCurl)
1462799614817:library(devtools)
1462799614885:library(xlsx)
1462799616101:# Install and use Rfacebook; deprecated for direct API call approach.
1462799616102:#install_github("pablobarbera/Rfacebook/Rfacebook")
1462799616106:#library(Rfacebook)
1462799616106:#install.packages("Rfacebook")
1462799616107:#library(Rfacebook)
1462799616108:#Using 'rFacebook' from Github
1462799616108:#fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1462799616111:#callAPI("https://graph.facebook.com/v2.5/act_693722000711682/adgroups?fields=name&limit=1000", fboauth)
1462799616111:# Functions ---------------------------------------------------------------
1462799616112:# User Functions
1462799616112:# Function to convert Facebook date format to R date format
1462799616113:format.facebook.date <- function(datestring) {
1462799616113:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1462799616113:}
1462799616115:# Inputs ------------------------------------------------------------------
1462799616116:#Turn stringsAsFactors off so rbind works properly.
1462799616118:options(stringsAsFactors = FALSE)
1462799616119:# Find OAuth settings for facebook:
1462799616119:#http://developers.facebook.com/docs/authentication/server-side/
1462799616119:facebook <- oauth_endpoints("facebook")
1462799616120:#facebook <- oauth_endpoint(
1462799616120:#  authorize = "https://www.facebook.com/dialog/oauth",
1462799616123:#  access = "https://graph.facebook.com/oauth/access_token",
1462799616123:#  base = "https://localhost:1410")
1462799616124:# Register an application at https://developers.facebook.com/apps/
1462799616124:#Insert your values below - if secret is omitted, it will look it up in
1462799616125:#the FACEBOOK_CONSUMER_SECRET environmental variable.
1462799616125:app_name <- "r_access"
1462799616129:app_id <- "955460364539237"
1462799616129:app_secret <- "0a3e6943c90510dc158fc7683e560f7d"
1462799616132:scope = "ads_management,manage_pages,publish_actions"
1462799616133:## Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
1462799616136:full_url <- oauth_callback()
1462799616136:full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
1462799616137:message <- paste("Copy and paste into Site URL on Facebook App Settings:",
1462799616138:full_url, "\nWhen done, press any key to continue...")
1462799616138:## Reminder to add callback into the app page.
1462799616138:invisible(readline(message))
1462799616141:myapp <- oauth_app(app_name, app_id, app_secret)
1462799616143:## current httr version, to test which oauth protocol to use. [Required to set global port variables; won't work otherwise.]
1462799616145:if (packageVersion('httr') > "0.6.1"){
1462799616145:Sys.setenv("HTTR_SERVER_PORT" = "1410/")
1462799616146:fb_oauth <- oauth2.0_token(facebook, myapp,
1462799616147:scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
1462799616147:if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
1462799616148:message("Authentication successful.")
1462799616148:}
1462799618929:# Test 1: Facebook Profile Information
1462799618929:req <- GET("https://graph.facebook.com/v2.5/me?fields=id,name", config(token = fb_oauth))
1462799619448:stop_for_status(req)
1462799619449:str(content(req))
1462799619600:# Test 2: Ad Account Information
1462799619600:accountreq <- GET("https://graph.facebook.com/v2.5/act_693722000711682?fields=name", config(token = fb_oauth))
1462799620397:adaccountname <- content(accountreq)[1]$name
1462799620401:adaccountid <- content(accountreq)[2]$id
1462799620407:# Inputs ------------------------------------------------------------------
1462799620407:# /insights is the new /stats; gets ad data at the account and id level
1462799620409:# /keywordstats = interests in ad manager UI
1462799620410:## Variables
1462799620412:# Number of Ads to Pull
1462799620413:ads = 1000 #So far, only 167 in the account.
1462799620413:#try(
1462799620414:#  adreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=",")), config(token = fb_oauth))
1462799620417:#)
1462799620417:#stop_for_status(adreq)
1462799620418:#adcontent <- content(adreq)
1462799620421:#adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1462799620422:## Facebook:
1462799620422:#[1] All valid values are: date_start, date_stop, account_id, account_name, adgroup_id, adgroup_name, campaign_group_id, campaign_group_name, campaign_id, campaign_name, action_carousel_card_id, action_carousel_card_name, actions, unique_actions, total_actions, total_unique_actions, action_values, total_action_value, impressions, social_impressions, clicks, social_clicks, unique_impressions, unique_social_impressions, unique_clicks, unique_social_clicks, spend, frequency, social_spend, deeplink_clicks, app_store_clicks, website_clicks, call_to_action_clicks, newsfeed_avg_position, newsfeed_impressions, newsfeed_clicks, reach, social_reach, ctr, unique_ctr, cpc, cpm, cpp, cost_per_total_action, cost_per_action_type, cost_per_unique_click, cost_per_10_sec_video_view, relevance_score, website_ctr, video_avg_sec_watched_actions, video_avg_pct_watched_actions, video_p25_watched_actions, video_p50_watched_actions, video_p75_watched_actions, video_p95_watched_actions, video_p100_watched_actions, video_complete_watched_actions, video_10_sec_watched_actions, video_15_sec_watched_actions, video_30_sec_watched_actions"
1462799620423:# Processing --------------------------------------------------------------
1462799620423:### Intial Batch Ad Pull
1462799620424:# Dataframe and query result holder
1462799620424:initialcontent <- NULL
1462799620425:after <- NULL
1462799620428:# Pull all ad ids and names, batch mode
1462799620429:#initialreq <- GET(paste0("https://graph.facebook.com/v2.5/act_693722000711682/adcampaigns?fields=name&limit=",ads), config(token = fb_oauth))
1462799620432:initialreq <- 400
1462799620433:count <- 0
1462799620437:while (warn_for_status(initialreq) != TRUE) {
1462799620439:count <- count + 1
1462799620439:print(paste('Query Attempt', count))
1462799620440:initialreq <- GET(paste0("https://graph.facebook.com/v2.5/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
1462799620440:}
1462799621169:initialreq <- GET(paste0("https://graph.facebook.com/v2.5/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
1462799621876:str(content(initialreq))
1462799622391:initialcontent <- content(initialreq)
1462799622398:# List of 154; don't need to paginate yet
1462799622398:#after <- initialcontent$paging$cursors$after
1462799622400:## Loop 1, Organize all ads into dataset
1462799622401:print(paste("Pulling All Ad Campaigns for",paste0(adaccountname,".")))
1462799622406:adlist <- data.frame(NULL, stringsAsFactors = FALSE)
1462799622412:ad <- 0
1462799622413:for (ad in (1:(length(initialcontent$data)))) {
1462799622414:#print(i)
1462799622420:adlist[ad,c("ad.campaign.id")] <- initialcontent$data[[ad]]$id
1462799622420:adlist[ad,c("ad.campaign.name")] <- initialcontent$data[[ad]]$name
1462799622423:adlist[ad,c("objective")] <- initialcontent$data[[ad]]$objective
1462799622424:#adlist[ad,c("status")] <- initialcontent$data[[ad]]$campaign_group_status
1462799622426:adlist[ad,c("created.time")] <- substr(initialcontent$data[[ad]]$created_time, 1, 10)
1462799622428:#adlist[ad,c("campaign id")] <- initialcontent$data[[ad]]$campaign_id
1462799622428:#adlist[ad,c("campaign name")] <- initialcontent$data[[ad]]$campaign_name
1462799622458:# Use this loop to populate with admetrics, and augment initial dataset; will not affect following loops.
1462799622459:completion <- (ad/(length(initialcontent$data))*100)
1462799622461:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1462799622463:}
1462799622625:adlist_store <- adlist
1462799622626:# slice list
1462799622628:adlist <- adlist[adlist$created.time > "2016-02-29",]
1462799622629:adlist_sliced <- adlist
1462799622631:# Metrics to examine
1462799622632:admetrics <- c("frequency,newsfeed_avg_position,ctr,unique_ctr,spend,reach,social_reach,unique_clicks,social_clicks,cost_per_unique_click,total_actions,cost_per_total_action,actions,video_avg_pct_watched_actions,video_avg_sec_watched_actions") #"cost_per_action_type"
1462799622634:# Test Pull for Loop 2
1462799622636:#testreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[89,1],"/insights?fields=",paste(admetrics,collapse=",")), config(token = fb_oauth))
1462799622636:#warn_for_status(testreq)
1462799622664:#content(testreq)
1462799622665:# Metrics framed
1462799622667:overalladmetricsreturned <- c("date_start","date_stop","spend","reach","social_reach","frequency","page_engagement","post_engagement","unique_clicks","social_clicks","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view","video_avg_sec_watched_video_view","video_avg_sec_watched_page_engagement","video_avg_sec_watched_post_engagement","video_avg_pct_watched_video_view","video_avg_pct_watched_page_engagement","video_avg_pct_watched_post_engagement")
1462799622668:adoveralldata <- data.frame(stringsAsFactors = FALSE)
1462799622669:#number of columns = length(c(names(header),overalladmetricsreturned))
1462799622672:#adstart <- ad
1462799622700:#600 calls / 600 seconds rate limit
1462799622717:### Warning: Massive while loop that continues until the ad list is retrieved from Facebook Need to restart/interrupt R to stop the loop.
1462799622724:#nrow(adlist))
1462799622742:for (ad in 1:nrow(adlist)) {
1462799622744:print(paste0('Querying Ad ',ad,": ", adlist$ad.campaign.name[ad]))
1462799622748:adreq$status_code <- 400
1462799622750:count <- 0
1462799622751:while(adreq$status_code == 400) {
1462799622757:try(adreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&time_increment=1"), config(token = fb_oauth)))
1462799622758:count <- count + 1
1462799622760:#print(paste('Attempt', count))
1462799622763:}
1462799622764:print('Query successful.')
1462799622766:#print(content(adreq))
1462799622772:# Organize/clean data
1462799622772:adcontent <- content(adreq)
1462799622775:adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1462799622776:nextpage <- adcontent$paging$`next`
1462799622780:while (is.null(nextpage) == FALSE) {
1462799622780:#print("Additional Days")
1462799622790:adreq.additional <- GET(adcontent$paging$`next`, config(token = fb_oauth))
1462799622791:adcontent.additional <- content(adreq.additional)
1462799622796:adcontent.additional.parsed <- unlist(adcontent.additional, use.names=TRUE, recursive=TRUE)
1462799622798:adcontentparsed <- c(adcontentparsed,adcontent.additional.parsed)
1462799622799:nextpage <- adcontent.additional$paging$`next`
1462799622803:}
1462799622804:#adcontent2 <- unlist(adcontent$data, use.names=FALSE, recursive=TRUE)
1462799622805:adcontentparsed.store <- adcontentparsed
1462799622806:#adcontentparsed <- adcontentparsed.store
1462799622810:names(adcontentparsed)[(names(adcontentparsed) == ("actions.value"))] <- adcontentparsed[(names(adcontentparsed) == ("actions.action_type"))]
1462799622811:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("actions.action_type")))]
1462799622814:if (length(which(names(adcontentparsed) %in% c("video_avg_pct_watched_actions.action_type","video_avg_sec_watched_actions.action_type"))) > 1) {
1462799622815:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_sec_watched_actions.value"))] <- paste0("video_avg_sec_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1462799622817:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_pct_watched_actions.value"))] <- paste0("video_avg_pct_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1462799622819:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("video_avg_pct_watched_actions.action_type")))]
1462799622825:} else {}
1462799622827:# Frame data for inclusion
1462799622831:days = length((adcontentparsed[overalladmetricsreturned[1] == names(adcontentparsed)]))
1462799622834:header <- c(adlist[ad,c("ad.campaign.id","ad.campaign.name","objective","created.time")])
1462799622836:footer <- data.frame()
1462799622839:if (is.null(adcontentparsed)==TRUE) {
1462799622840:footer <- rep(0,length(overalladmetricsreturned))
1462799622842:names(footer) <- overalladmetricsreturned
1462799622844:adoverallset <- c(unlist(header),footer)
1462799622846:} else {
1462799622848:for (day in 1:days) {
1462799622853:for (metric in 1:length(overalladmetricsreturned)) {
1462799622857:if (is.na(adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]) == TRUE) {
1462799622859:footer[day,metric] <- 0
1462799622861:} else {
1462799622862:footer[day,metric] <- adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]
1462799622865:}
1462799622870:colnames(footer) <- overalladmetricsreturned
1462799622871:adoverallset <- cbind(header,footer)
1462799622873:}
1462799622876:adoveralldata <- rbind(adoveralldata,adoverallset)
1462799622879:colnames(adoveralldata) <- c(names(header),overalladmetricsreturned)
1462799622881:# Print processing stats
1462799622883:completion <- (ad/(nrow(adlist))*100)
1462799622885:#print(ad)
1462799622887:#print(nrow(adoveralldata))
1462799622889:#print(paste0("Finding Facebook Data for Ad Set ",ad,": ",adlist[ad,2]))
1462799622891:print(paste0('Primary dataset appended: ',nrow(adoveralldata),' rows retrieved from Facebook.'))
1462799622896:print(paste(paste0(round(completion, digits = 0),"%"), "of Ads Processed."))
1462799622899:}
1462799651361:#names(adoveralldata) <- overalladmetricsreturned
1462799651361:print(adoveralldata)
1462799651455:# Exporting ---------------------------------------------------------------
1462799651456:adoveralldatastore <- adoveralldata
1462799651456:#adoveralldata <- adoveralldatastore
1462799651457:adoveralldata[is.na(adoveralldata)] <- ""
1462799651458:#adoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)
1462799651458:#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1462799651459:#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1462799651459:setwd("/Users/vivek.menon")
1462799651460:datafolder <- "Data"
1462799651460:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1462799651461:# Rename columns for Excel readability
1462799651461:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1462799651465:# output Page dataset as final csv
1462799651465:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1462799651465:#write.xlsx(adoveralldata, paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462799651465:write.csv(adoveralldata, file = paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".csv"), row.names=FALSE)
1462799651472:#####
1462799651473:## Ad Hourly Vector Frame
1462799651475:admetricsreturned <- c("campaign_id","campaign_name","date_start","date_stop","hourly_stats_aggregated_by_advertiser_time_zone","spend","reach","social_reach","frequency","page_engagement","post_engagement","clicks","social_clicks","ctr","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view")
1462799651476:adhourdata <- data.frame(NULL,stringsAsFactors=FALSE)
1462799651477:### Hourly Ad Metrics
1462799651477:## Loop 2: Hourly Ad Pull (Based on Loop 1)
1462799651481:for (ad in 1:nrow(adlist)) {
1462799651481:adhourreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=hourly_stats_aggregated_by_advertiser_time_zone"), config(token = fb_oauth))
1462799651481:adhourlydata <- content(adhourreq)
1462799651482:adhourlycontent <- unlist(adhourlydata$data, use.names=TRUE, recursive=TRUE)
1462799651483:completion <- (ad/(nrow(adlist))*100)
1462799651483:print(paste('Finding Facebook Ad Data for',adlist[ad,2]))
1462799651484:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1462799651485:if (length(adhourlycontent) > 0) {
1462799651485:names(adhourlycontent)[(names(adhourlycontent) == ("actions.value"))] <- adhourlycontent[(names(adhourlycontent) == ("actions.action_type"))]
1462799651486:adhourlycontent <- adhourlycontent[-which((names(adhourlycontent) == ("actions.action_type")))]
1462799651487:hours <- adhourlycontent[names(adhourlycontent) == "hourly_stats_aggregated_by_advertiser_time_zone"]
1462799651487:adhourlysetdata <- data.frame(NULL, stringsAsFactors = FALSE)
1462799651492:for (hour in 1:length(hours)){
1462799651493:if (hour <= 1) {
1462799651494:startindex = 1
1462799651495:endindex = which(adhourlycontent == hours[(hour)])
1462799651495:} else {
1462799651496:startindex = which(adhourlycontent == hours[(hour-1)])+1
1462799651496:endindex = which(adhourlycontent == hours[(hour)])
1462799651497:}
1462799651499:#print(paste("Set", hour))
1462799651500:#print(length(adhourlycontent[startindex:endindex]))
1462799651501:#print(adhourlycontent[startindex:endindex])
1462799651502:adhourlyset <- adhourlycontent[startindex:endindex]
1462799651503:adhourlyrow <- adhourlyset[match(admetricsreturned,names(adhourlyset))]
1462799651504:adhourlysetdata <- rbind(adhourlyrow,adhourlysetdata)
1462799651505:#print(adhourlyrow)
1462799651507:}
1462799651507:names(adhourlysetdata) <- admetricsreturned
1462799651508:#print(tail(adhourlysetdata))
1462799651509:adhourdata <- rbind(adhourlysetdata,adhourdata)
1462799651511:names(adhourdata) <- admetricsreturned
1462799651511:} else {
1462799651512:#next()
1462799651513:}
1462799676992:adstart <- ad
1462799676993:#Hourly Admetrics
1462799676995:for (ad in 1:nrow(adlist)) {
1462799676995:adhourreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=hourly_stats_aggregated_by_advertiser_time_zone"), config(token = fb_oauth))
1462799676996:adhourlydata <- content(adhourreq)
1462799676997:adhourlycontent <- unlist(adhourlydata$data, use.names=TRUE, recursive=TRUE)
1462799676999:if (length(adhourlycontent) > 0) {
1462799677000:names(adhourlycontent)[(names(adhourlycontent) == ("actions.value"))] <- adhourlycontent[(names(adhourlycontent) == ("actions.action_type"))]
1462799677004:adhourlycontent <- adhourlycontent[-which((names(adhourlycontent) == ("actions.action_type")))]
1462799677007:hours <- adhourlycontent[names(adhourlycontent) == "hourly_stats_aggregated_by_advertiser_time_zone"]
1462799677009:adhourlysetdata <- data.frame(NULL, stringsAsFactors = FALSE)
1462799677012:for (hour in 1:length(hours)){
1462799677014:if (hour <= 1) {
1462799677015:startindex = 1
1462799677018:endindex = which(adhourlycontent == hours[(hour)])
1462799677019:} else {
1462799677022:startindex = which(adhourlycontent == hours[(hour-1)])+1
1462799677022:endindex = which(adhourlycontent == hours[(hour)])
1462799677025:}
1462799677027:#print(paste("Set", hour))
1462799677029:#print(length(adhourlycontent[startindex:endindex]))
1462799677029:#print(adhourlycontent[startindex:endindex])
1462799677033:adhourlyset <- adhourlycontent[startindex:endindex]
1462799677034:adhourlyrow <- adhourlyset[match(admetricsreturned,names(adhourlyset))]
1462799677036:adhourlysetdata <- rbind(adhourlyrow,adhourlysetdata)
1462799677037:#print(adhourlyrow)
1462799677040:}
1462799677041:names(adhourlysetdata) <- admetricsreturned
1462799677044:#print(tail(adhourlysetdata))
1462799677044:adhourdata <- rbind(adhourlysetdata,adhourdata)
1462799677048:names(adhourdata) <- admetricsreturned
1462799677049:} else {
1462799677051:next()
1462799677052:}
1462799696748:### Segmented Ad Metrics
1462799696749:## Loop 3: Segmented Ad Pull (Based on Loop 1)
1462799696751:ad <-  0
1462799696752:admetricsreturned <- c("campaign_id","campaign_name","date_start","date_stop","gender","age","spend","reach","social_reach","frequency","page_engagement","post_engagement","clicks","social_clicks","ctr","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view")
1462799696753:### PICK UP FROM HERE; THIS LOOP ONLY GETS TO 5% ###
1462799696754:adsegmentsetdata <- data.frame(NULL,stringsAsFactors=FALSE)
1462799696758:for (ad in 1:nrow(adlist)) {
1462799696758:adsegmentreq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=age,gender"), config(token = fb_oauth))
1462799696761:adsegmentdata <- content(adsegmentreq)
1462799696762:adsegmentcontent <- unlist(adsegmentdata$data, use.names=TRUE, recursive=TRUE)
1462799696765:completion <- (ad/(length(initialcontent$data))*100)
1462799696765:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1462799696767:if (length(adsegmentcontent) > 0) {
1462799696767:names(adsegmentcontent)[(names(adsegmentcontent) == ("actions.value"))] <- adsegmentcontent[(names(adsegmentcontent) == ("actions.action_type"))]
1462799696768:adsegmentcontent <- adsegmentcontent[-which((names(adsegmentcontent) == ("actions.action_type")))]
1462799696772:ages <- unique(adsegmentcontent[names(adsegmentcontent) == "age"])
1462799696773:genders <- unique(adsegmentcontent[names(adsegmentcontent) == "gender"])
1462799696776:adsegmentsetdata <- data.frame(NULL, stringsAsFactors = FALSE)
1462799696777:for (age in 1:length(ages)) {
1462799696780:if (age <= 1) {
1462799696783:startindex = 1
1462799696784:endindex = which(adsegmentcontent == ages[(age)])[3]+1
1462799696800:} else {
1462799696806:startindex = which(adsegmentcontent == ages[(age-1)])[3]+1
1462799696807:endindex = which(adsegmentcontent == ages[(age)])[3]+1
1462799696808:}
1462799696824:adsegmentset <- adsegmentcontent[startindex:endindex]
1462799696831:for (gender in 1:length(genders)) {
1462799696833:if (gender <= 1) {
1462799696834:startgenderindex = 1
1462799696835:endgenderindex = which(adsegmentset == genders[(gender)])
1462799696838:} else {
1462799696839:startgenderindex = which(adsegmentset == genders[(gender-1)])+1
1462799696840:endgenderindex = which(adsegmentset == genders[(gender)])
1462799696842:}
1462799696846:adsegmentrow <- adsegmentset[match(admetricsreturned,names(adsegmentset))]
1462799696847:adsegmentsetdata <- rbind(adsegmentrow,adsegmentsetdata)
1462799696849:}
1462799696851:} else {
1462799696853:next()
1462799696854:}
1462799717206:names(adsegmentdata) <- admetricsreturned
1462799717208:# Placement and Device
1462799717209:adplacereq <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=placement,impression_device"), config(token = fb_oauth))
1462799717738:# Age and Gender
1462799717738:adreq2 <- GET(paste0("https://graph.facebook.com/v2.5/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=age,gender"), config(token = fb_oauth))
1462799718259:adcontent <- content(adreq)
1462799718265:adcontent1 <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1462799718267:# Clean out the NA's
1462799718267:# Exporting ---------------------------------------------------------------
1462799718271:adoveralldata[is.na(adoveralldata)] <- ""
1462799718273:adoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)
1462799718278:#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1462799718278:#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1462799718283:setwd("/Users/vivek.menon")
1462799718284:datafolder <- "Data"
1462799718287:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1462799718288:# Rename columns for Excel readability
1462799718288:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1462799718292:# output Page dataset as final csv
1462799718295:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1462799718295:write.xlsx(adoveralldata, paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1462799722341:# Rename columns for Excel readability
1462799722342:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1462799722343:# output Post dataset as final Excel
1462799722344:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1462799754923:paste(df$user_fullname[1],"Instagram", Sys.Date())
1462799791635:#devtools::install_github("pablobarbera/instaR/instaR")
1462799791638:#install_github("pablobarbera/instaR/instaR")
1462799791638:#update.packages("instaR")
1462799791641:library("instaR")
1462799791739:setwd("~/")
1462799791739:my_oauth <- instaOAuth(app_id="5933291741634bb29d46b067f8457c50", app_secret="73f4a7f7c78b4fa7b2aeb0a5e7d19dae")
1462799794747:# User Functions
1462799794748:# Function to convert Facebook date format to R date format
1462799794750:format.facebook.date <- function(datestring) {
1462799794750:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1462799794751:}
1462799794752:#folder <- "19c"
1462799794753:#df <- searchInstagram(tag="womenchampions", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1462799794754:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1462799794754:#floor = "2015-12-31" #"2015-05-01"
1462799794755:#df <- df[df$created_time > floor,]
1462799794756:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1462799794756:#"19crimeswine", "19crimeswine,
1462799794760:accounts <- c("19crimeswine", "beringervyds")
1462799794762:roof =  Sys.Date()+1
1462799794765:floor = "2015-03-01"
1462799794767:for (account in 1:length(accounts)) {
1462799794770:posts <- getUserMedia(accounts[account],token=my_oauth, n=500)#,n = 1)#, n=200, verbose = TRUE)
1462799794770:#user <- getUser(accounts[account], token=my_oauth)
1462799794772:#df <- getFollowers('womenchampions', token=my_oauth)
1462799794773:df <- posts
1462799794776:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1462799794776:df$datetime <- format.facebook.date(df$created_time)
1462799794780:df$month <- format(df$datetime, "%Y-%m")
1462799794780:df$day <- format(df$datetime, "%Y-%m-%d")
1462799794783:} else {
1462799794784:print("Date fields already exist.")
1462799794787:}
1462799794788:#roof = "2015-11-02"
1462799794791:#floor = "2013-01-01"
1462799794791:#df <- df[df$day > floor,]
1462799794795:#df <- df[df$day < roof,]
1462799794796:#posts <- posts[posts$created_time > floor,]
1462799794797:#posts <- posts[posts$created_time < roof,]
1462799794800:#posts <- df
1462799794801:follows <- NULL
1462799794803:impressions <- NULL
1462799794804:impressionusers <- NULL
1462799794807:count <- 0
1462799794807:jump <- 1 # Loop paramater
1462799794808:weight <- 0.1 # 10%
1462799794808:for (post in 1:nrow(df)) {
1462799794809:try(impressionusers <- c(
1462799794809:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1462799794813:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1462799794813:)
1462799794818:,silent = TRUE)
1462799794820:impression <- 0
1462799794821:if (is.null(impressionusers) == TRUE){
1462799794824:impressions[post] <- 0
1462799794824:} else {
1462799794828:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1462799794830:for (user in 1:length(impressionusers)){
1462799794832:#print(user)
1462799794833:#print(impression)
1462799794836:userdata <- NULL
1462799794838:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1462799794840:if (is.null(userdata)) {
1462799794841:newimpression <- 0
1462799794843:impression <- as.numeric(newimpression) + as.numeric(impression)
1462799794844:next
1462799794847:} else {
1462799794848:newimpression <- + userdata$follows + userdata$followed_by
1462799794850:impression <- as.numeric(impression) + as.numeric(newimpression)
1462799794851:}
1462799794855:# Scale down to simulate organic
1462799794855:impression = ceiling(weight * impression)
1462799794862:impressions[post] <- impression
1462799794863:}
1462799794864:print(impressions[post])
1462799794867:count = count + 1
1462799794868:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1462799794869:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1462799794870:}
1462799794875:impressions.store <- impressions
1462799794877:#impressions <- round(impressions/5,0)
1462799794879:df <- cbind(df, impressions)
1462799794883:df.store <- df
1462799794885:df[is.na(df)] <- ""
1462799794887:name <- paste(df$user_fullname[1],"Instagram", Sys.Date())
1462799794889:datafolder <- "/Data"
1462799794890:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1462799794894:write.csv(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".csv")))#, row.names=FALSE)
1462799794896:}
1462803229269:#update.packages("instaR")
1462803229272:library("instaR")
1462803229405:setwd("~/")
1462803229406:my_oauth <- instaOAuth(app_id="5933291741634bb29d46b067f8457c50", app_secret="73f4a7f7c78b4fa7b2aeb0a5e7d19dae")
1462803236536:# Function to convert Facebook date format to R date format
1462803236536:format.facebook.date <- function(datestring) {
1462803236538:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1462803236539:}
1462803236540:#folder <- "19c"
1462803236540:#df <- searchInstagram(tag="womenchampions", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1462803236543:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1462803236544:#floor = "2015-12-31" #"2015-05-01"
1462803236547:#df <- df[df$created_time > floor,]
1462803236547:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1462803236550:#"19crimeswine", "19crimeswine,
1462803236551:accounts <- c("19crimeswine", "beringervyds")
1462803236552:roof =  Sys.Date()+1
1462803236555:floor = "2016-03-01"
1462803240214:for (account in 1:length(accounts)) {
1462803240216:posts <- getUserMedia(accounts[account],token=my_oauth, n=500)#,n = 1)#, n=200, verbose = TRUE)
1462803240217:#user <- getUser(accounts[account], token=my_oauth)
1462803240217:#df <- getFollowers('womenchampions', token=my_oauth)
1462803240218:df <- posts
1462803240219:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1462803240222:df$datetime <- format.facebook.date(df$created_time)
1462803240222:df$month <- format(df$datetime, "%Y-%m")
1462803240226:df$day <- format(df$datetime, "%Y-%m-%d")
1462803240227:} else {
1462803240229:print("Date fields already exist.")
1462803240229:}
1462803240230:#roof = "2015-11-02"
1462803240230:#floor = "2013-01-01"
1462803240234:df <- df[df$day > floor,]
1462803240235:df <- df[df$day < roof,]
1462803240238:#posts <- posts[posts$created_time > floor,]
1462803240238:#posts <- posts[posts$created_time < roof,]
1462803240242:#posts <- df
1462803240242:follows <- NULL
1462803240245:impressions <- NULL
1462803240246:impressionusers <- NULL
1462803240248:count <- 0
1462803240249:jump <- 1 # Loop paramater
1462803240252:weight <- 0.1 # 10%
1462803240253:for (post in 1:nrow(df)) {
1462803240256:try(impressionusers <- c(
1462803240257:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1462803240260:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1462803240260:)
1462803240263:,silent = TRUE)
1462803240264:impression <- 0
1462803240268:if (is.null(impressionusers) == TRUE){
1462803240268:impressions[post] <- 0
1462803240271:} else {
1462803240272:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1462803240275:for (user in 1:length(impressionusers)){
1462803240276:#print(user)
1462803240277:#print(impression)
1462803240278:userdata <- NULL
1462803240279:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1462803240280:if (is.null(userdata)) {
1462803240283:newimpression <- 0
1462803240283:impression <- as.numeric(newimpression) + as.numeric(impression)
1462803240286:next
1462803240287:} else {
1462803240288:newimpression <- + userdata$follows + userdata$followed_by
1462803240289:impression <- as.numeric(impression) + as.numeric(newimpression)
1462803240292:}
1462803240295:# Scale down to simulate organic
1462803240295:impression = ceiling(weight * impression)
1462803240297:impressions[post] <- impression
1462803240299:}
1462803240300:print(impressions[post])
1462803240303:count = count + 1
1462803240304:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1462803240308:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1462803240311:}
1462803240313:impressions.store <- impressions
1462803240314:#impressions <- round(impressions/5,0)
1462803240319:df <- cbind(df, impressions)
1462803240321:df.store <- df
1462803240323:df[is.na(df)] <- ""
1462803240325:name <- paste(df$user_fullname[1],"Instagram", Sys.Date())
1462803240330:datafolder <- "/Data"
1462803240332:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1462803240333:write.csv(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".csv")))#, row.names=FALSE)
1462803240336:}
1462803241278:#write.xlsx(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".xlsx")), row.names=FALSE)
1462803257009:accounts[account]
1462803260462:posts <- getUserMedia(accounts[account],token=my_oauth, n=500)#,n = 1)#, n=200, verbose = TRUE)
1462803278158:#update.packages("instaR")
1462803278159:library("instaR")
1462803278299:setwd("~/")
1462803278302:my_oauth <- instaOAuth(app_id="5933291741634bb29d46b067f8457c50", app_secret="73f4a7f7c78b4fa7b2aeb0a5e7d19dae")
1462803281189:# User Functions
1462803281189:# Function to convert Facebook date format to R date format
1462803281194:format.facebook.date <- function(datestring) {
1462803281195:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1462803281198:}
1462803281199:#folder <- "19c"
1462803286149:#df <- searchInstagram(tag="womenchampions", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1462803286403:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1462803286566:#floor = "2015-12-31" #"2015-05-01"
1462803286903:#df <- df[df$created_time > floor,]
1462803287906:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1462803288182:#"19crimeswine", "19crimeswine,
1462803288601:accounts <- c("19crimeswine", "beringervyds")
1462803289752:roof =  Sys.Date()+1
1462803290203:floor = "2016-03-01"
1462803293869:posts <- getUserMedia(accounts[account],token=my_oauth, n=500)#,n = 1)#, n=200, verbose = TRUE)
1462803304131:accounts[account]
1462803328620:getUserMedia("19crimeswine",token=my_oauth,n=50)
1462803341143:getUserMedia("beringervyds",token=my_oauth,n=50)
1462803350987:#update.packages("instaR")
1462803350988:library("instaR")
1462803350990:setwd("~/")
1462803350991:my_oauth <- instaOAuth(app_id="5933291741634bb29d46b067f8457c50", app_secret="73f4a7f7c78b4fa7b2aeb0a5e7d19dae")
1462803353032:# User Functions
1462803353033:# Function to convert Facebook date format to R date format
1462803353035:format.facebook.date <- function(datestring) {
1462803353036:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1462803353036:}
1462803353037:#folder <- "19c"
1462803353038:#df <- searchInstagram(tag="womenchampions", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1462803353041:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1462803353042:#floor = "2015-12-31" #"2015-05-01"
1462803353045:#df <- df[df$created_time > floor,]
1462803353046:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1462803353048:#"19crimeswine", "19crimeswine,
1462803353049:accounts <- c("19crimeswine", "beringervyds")
1462803358357:roof =  Sys.Date()+1
1462803358657:floor = "2016-03-01"
1462803362092:for (account in 1:length(accounts)) {
1462803363257:posts <- getUserMedia(accounts[account],token=my_oauth, n=500)#,n = 1)#, n=200, verbose = TRUE)
1462803363478:#user <- getUser(accounts[account], token=my_oauth)
1462803363661:#df <- getFollowers('womenchampions', token=my_oauth)
1462803363858:df <- posts
1462803364012:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1462803364212:df$datetime <- format.facebook.date(df$created_time)
1462803364364:df$month <- format(df$datetime, "%Y-%m")
1462803364543:df$day <- format(df$datetime, "%Y-%m-%d")
1462803365029:} else {
1462803365130:print("Date fields already exist.")
1462803365233:}
1462803365262:#roof = "2015-11-02"
1462803365336:#floor = "2013-01-01"
1462803365497:df <- df[df$day > floor,]
1462803365577:df <- df[df$day < roof,]
1462803365647:#posts <- posts[posts$created_time > floor,]
1462803365784:#posts <- posts[posts$created_time < roof,]
1462803365786:#posts <- df
1462803365933:follows <- NULL
1462803365938:impressions <- NULL
1462803366061:impressionusers <- NULL
1462803366148:count <- 0
1462803366281:jump <- 1 # Loop paramater
1462803366284:weight <- 0.1 # 10%
1462803366381:for (post in 1:nrow(df)) {
1462803366477:try(impressionusers <- c(
1462803366565:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1462803366702:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1462803366705:)
1462803366841:,silent = TRUE)
1462803366850:impression <- 0
1462803366964:if (is.null(impressionusers) == TRUE){
1462803367041:impressions[post] <- 0
1462803367119:} else {
1462803367243:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1462803367332:for (user in 1:length(impressionusers)){
1462803367374:#print(user)
1462803367465:#print(impression)
1462803367574:userdata <- NULL
1462803367608:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1462803367708:if (is.null(userdata)) {
1462803367803:newimpression <- 0
1462803367893:impression <- as.numeric(newimpression) + as.numeric(impression)
1462803367974:next
1462803368067:} else {
1462803368166:newimpression <- + userdata$follows + userdata$followed_by
1462803368262:impression <- as.numeric(impression) + as.numeric(newimpression)
1462803368292:}
1462803368477:# Scale down to simulate organic
1462803368534:impression = ceiling(weight * impression)
1462803368681:impressions[post] <- impression
1462803368702:}
1462803368775:print(impressions[post])
1462803368891:count = count + 1
1462803368983:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1462803369090:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1462803369174:}
1462803369225:impressions.store <- impressions
1462803369316:#impressions <- round(impressions/5,0)
1462803369407:df <- cbind(df, impressions)
1462803369524:df.store <- df
1462803371624:df[is.na(df)] <- ""
1462803373553:}
1462803381309:devtools::install_github("pablobarbera/instaR/instaR")
1462803391051:install_github("pablobarbera/instaR/instaR")
1462803399194:update.packages("instaR")
1462803404980:library("instaR")
1462803407730:setwd("~/")
1462803408247:my_oauth <- instaOAuth(app_id="5933291741634bb29d46b067f8457c50", app_secret="73f4a7f7c78b4fa7b2aeb0a5e7d19dae")
1462803418146:# User Functions
1462803418146:# Function to convert Facebook date format to R date format
1462803418148:format.facebook.date <- function(datestring) {
1462803418149:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1462803418149:}
1462803418150:#folder <- "19c"
1462803437920:accounts <- c("19crimeswine", "beringervyds")
1462803438315:roof =  Sys.Date()+1
1462803438738:floor = "2016-03-01"
1462803441200:roof
1462803442073:floor
1462803448878:getUserMedia(accounts[account],token=my_oauth, n=500)
1462803473181:getUserMedia("womenchampions", token=my_oauth)
1462803495149:getUserMedia("womenchampions", token=my_oauth, n=300)
1462803558320:library("instaR")
1462803559460:setwd("~/")
1462803560410:my_oauth <- instaOAuth(app_id="5933291741634bb29d46b067f8457c50", app_secret="73f4a7f7c78b4fa7b2aeb0a5e7d19dae")
