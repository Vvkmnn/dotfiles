1470844923292:# Rename columns for Excel readability
1470844923293:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470844923296:# output Post dataset as final Excel
1470844923296:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470844923297:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470844923312:# Images
1470844923313:#imagefolder <- paste0("Im
1470848808083:## Facebook Query Injector #####
1470848808084:## Mirum Agency ################
1470848808087:## By Vivek Menon ##############
1470848808090:## v.1.5.0 #####################
1470848808091:# Summary -----------------------------------------------------------------
1470848808091:# Todo --------------------------------------------------------------------
1470848808091:# - Run script for all major brands
1470848808092:# - Create 'participation rate' function
1470848808092:# - Incorporate Twitter
1470848808092:# Setup -------------------------------------------------------------------
1470848808093:# Load and install all necessary packages for the script
1470848808093:# Required Packages for dataframes, forecasting, graphical visualization, and development
1470848808094:# Use 'install.packages()' if unavailable.
1470848808097:#library(zoo)
1470848808097:#library(forecast)
1470848808098:library(ggplot2)
1470848808098:#library(scales)
1470848808098:library(devtools)
1470848808103:library(compare)
1470848808106:library(xlsx)
1470848808107:require(httr)
1470848808109:require(rjson)
1470848808110:require(RCurl)
1470848808111:# Pull most up to date Github repositories for relevant packages
1470848808111:# Not frequently updated; does not need to be run every time.
1470848808115:#install_github("pablobarbera/Rfacebook/Rfacebook")
1470848808116:#install_github("pablobarbera/instaR/instaR")
1470848808118:# Required packags for plugging into Facebook API
1470848808118:#library(twitteR)
1470848808119:library(Rfacebook)
1470848808119:#library(instaR)
1470848808120:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1470848808123:# https://instagram.com/developer/authentication/?hl=en
1470848808123:#setwd("~/Desktop/TWE/Monthly Reports/June 2015")
1470848808124:setwd("~/")
1470848808124:getwd()
1470848808125:# Functions ---------------------------------------------------------------
1470848808128:# User Functions
1470848808128:# Function to convert Facebook date format to R date format
1470848808131:format.facebook.date <- function(datestring) {
1470848808132:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470848808132:}
1470848808133:# Shift a vector up by an amount
1470848808133:shift <- function(x, n){
1470848808134:c(x[-(seq(n))], rep(NA, n))
1470848808134:}
1470848808135:# Get gcd from vector
1470848808135:gcd <- function(x,y) {
1470848808136:r <- x%%y;
1470848808137:return(ifelse(r, gcd(y, r), y))
1470848808137:}
1470848808138:# Inputs ------------------------------------------------------------------
1470848808138:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1470848808139:# Define data range for data (2012 is out of bounds for some metrics)
1470848808140:# http://thinktostart.com/analyzing-facebook-with-r/
1470848808144:fb_oauth <- fbOAuth(app_id="955460364539237", app_secret="0a3e6943c90510dc158fc7683e560f7d",extended_permissions = FALSE)
1470848811679:posts <- 2000
1470848811680:roof = Sys.Date() #"2015-12-31"
1470848811681:floor = "2016-05-01" #"2015-05-01"
1470848811682:range = seq(as.Date(floor), as.Date(roof), by="days")
1470848811686:## Access ftoken
1470848811686:# Use token from Facebook Graph API
1470848811692:# token generated here: https://developers.facebook.com/tools/explorer
1470848811692:# Lasts two hours, and must be changed depending on page and permissions
1470848811696:ftokens <- c(
1470848811696:#Sledgehammer Wine
1470848811699:#"CAACEdEose0cBAAaqv8JuC9FYYF2JZBzCDyJSrZB5aXhCMHeZAYjdcRkoOyZBHAqNdsSAVnmf63EyT3ZB6pcBZAIcPxcDCQCAXFE1ER62zJDC9tMF6AC5IvTXczksCjh9HocfSBYA1qjER8wsoFvPUF1B9f4mMhNrnAPWRZADbliPBRDTh0D2qF72LAPwZCsfw3UZD"
1470848811699:#Chateau Saint Jean
1470848811699:#"EAACEdEose0cBAOwwfrVCmYxjRlHVlMDJAjtEJkfMZBkWVsQbDGv0eXi50MZCc4F2i33vbhmJ6823oIzAbhezsZAkqchpPpYaiB8XzcfZBKS2jSXE22EY1e855OvkfgFyjKPiOPOjOZAQIbDiJg1tHCMMLVjUlwPcoKGBEexWbGQZDZD"
1470848811700:#19 Crimes
1470848811700:#,"EAACEdEose0cBANCXTZAFtviL9VEUq4DhkEwMyzqdmWgZBh68EReZAIEOVBYlTSiS52swRACvjhybfPQGFqEOmJp0OjTSPQ9ZC01R6nxViJ5xDHXPlDCwnnXOBObHYwZAXhQzy52kL3FZA3WcHNrGNIqfJZC9MZCJPkkfXHpVsx3PHQZDZD"
1470848811700:#Beringer Vneyards
1470848811701:#,"EAACEdEose0cBAAfj1KkrLbPzVw0v5gul87LeUeoXUHnN6rlxrVRklAgg214vFGLkQTKeLHEUWDGg9ZBVeTDRQdOietA25FLcAaQCGiKvmLFv3ZAYnMpLg9YKnpNpazKjXKwWpkXZBdjuKB7Ql6JKu4Q8pNOZCk97LWSwW4U8vgZDZD"
1470848811701:#100% Canadian Milk
1470848811701:#"EAACEdEose0cBAK7Hbibie8kWBzeZBqevx9FEVIgUecHAXLLMZAyR974zvJIf2I3LgxiR05o4gZCm7PkRfvSvVCLhtR98AeVBjSZB9A8Ym6KeJSXhmetOFzjaaFxjVJBZBaVxvNQaTQZCxCgfIZCBl7AZCuSx0tSV1b9ZCUGdBj7OUZAAZDZD"
1470848811702:#Lait 100% Canadien
1470848811703:#,"EAACEdEose0cBAMZB9OeGbItotQXru0sp1vggahZCvZCDQvZAQeskIsZC2713k83AAE5fwZBV5UPAoYgk1NIAi64MgHjSLb362JomROuLuBZB2i9OJoPZC0664EuZBpjSMJEDqtdcvJfvlZAFX9TWPeItEEPdR81KfzSGJJ2l8MeDL1pwZDZD"
1470848811703:#Recharge with Milk
1470848811710:#,"CAACEdEose0cBAJ9NPmffbszUQ1HYObOGqdht5XWBoU7zABLhgZB6L53eyqVrt0CPxkZAXQpI0fGW7FHucQ0LgGtmRRlWP6eAQgZBSa6oaRibk9qZAp0xVGZCr4B6AdysmfVlbZCFjoZBYZCJ3sxN1yMdL5jz6yCWOZAAbAv00nXq5wURrgCUe3dXZAZBF2COnBm9YxXk5vFoWWJkQZDZD"
1470848811712:#BaronSamedi
1470848811712:"EAANkZCHOgFWUBAFFiEN1pHdjkw8oZBCI1YChiCkioJGsX5EkqbtiovV4dEIudx2OMyZA7lN4Nh9STOgTiuowiawddVCTwElFHbZA8dZBk3D9FOu9DGW7jUYurxqteoQ55OCguikF1mtH7mF9d4Sq8SN6iUefBcpEUJb6LD4FZAjAZDZD"
1470848811714:)
1470848811715:totalpagedata <- data.frame()
1470848811717:totalpostdata <- data.frame()
1470848811723:for (brand in 1:length(ftokens)) {
1470848811725:ftoken <- ftokens[brand]
1470848811727:## User Id
1470848811729:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1470848811730:userid = "10153046308598756"
1470848811731:# Access public personal data; basically a ftoken test
1470848811731:me <- getUsers("me", token=ftoken)
1470848811742:print(me$name)
1470848811751:## Page Id
1470848811752:# Define which page will be used for the data collection. Change id's as necessary.
1470848811754:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1470848811755:pageid = me$id
1470848811759:# Acquisition -------------------------------------------------------------
1470848811760:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1470848811761:page <- getPage(pageid, ftoken, n = posts)
1470848811762:page.store <- page
1470848811766:# Create new vectors in dataset with datetime, month, and day formattiong
1470848811766:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470848811767:page$datetime <- format.facebook.date(page$created_time)
1470848811767:page$month <- format(page$datetime, "%Y-%m")
1470848811772:page$day <- format(page$datetime, "%Y-%m-%d")
1470848811775:page$datetime <- as.Date(page$datetime)
1470848811776:#page$month <- as.Date(page$month)
1470848811779:page$day <- as.Date(page$day)
1470848811779:} else {
1470848811782:print("Date fields already exist.")
1470848811783:}
1470848811794:# Processing --------------------------------------------------------------
1470848811796:# Process data to clean dataset and augment it with more data than default fields.
1470848811797:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1470848811799:## Cleaning =================================
1470848811801:# Page and Post Datasets
1470848811801:# Split dataset into two for pages and post data
1470848811805:# Create initial null sets
1470848811805:pagedata <- 0
1470848811808:postdata <- 0
1470848811810:## Appending =================================
1470848811816:### Page Metrics #############################
1470848811818:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1470848811820:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1470848811825:# Page Metrics to automatically pull
1470848811826:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1470848811830:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1470848811834:pagemetrics <- metrics
1470848811836:# Prep dataset by breaking into weeks
1470848811837:pagedata <- 0
1470848811837:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1470848811841:colnames(pagedata) = c("pageid", "page", "date")
1470848811843:pagedata$page = page$from_name[1]
1470848811845:pagedata$pageid = page$from_id[1]
1470848811849:divisor = 5
1470848811850:remainder = length(range)%%divisor;
1470848811855:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1470848811857:weeks <- (nrow(pagedata)/5)-2
1470848811860:# Start Data Acquisition Loop
1470848811861:for (metric in 1:length(metrics)) {
1470848811864:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1470848811865:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1470848811866:period = 'lifetime'
1470848811867:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1470848811870:period = 'day'
1470848811871:tempfloor = "2014-02-01"
1470848811874:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1470848811876:if (floor < tempfloor) {
1470848811879:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1470848811881:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1470848811882:weeks = tempweeks
1470848811883:} else {}
1470848811886:} else {
1470848811886:period = 'day'
1470848811887:weeks <- (nrow(pagedata)/5)-2
1470848811889:}
1470848811943:hold <- matrix(0, nrow=0, ncol=7)
1470848811947:for (week in 0:weeks) {
1470848811956:end <- pagedata$date[(week*5)+1]
1470848811960:start <- pagedata$date[((week+1)*5)+1]
1470848811968:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1470848811974:pull <- NULL
1470848811979:attempt <- 1
1470848811984:while(is.null(pull) && attempt <= 10) {
1470848811987:attempt <- attempt + 1
1470848811989:try(
1470848811991:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1470848811994:)
1470848812022:if (is.null(pull)) {
1470848812023:print("Empty Pull. Re-attempting.")
1470848812027:print(paste("Attempt", attempt))
1470848812029:} else {
1470848812034:pull$datetime <- format.facebook.date(pull$end_time)
1470848812036:pull$day <- format(pull$datetime, "%Y-%m-%d")
1470848812039:pull$datetime <- as.Date(pull$datetime)
1470848812043:#page$month <- as.Date(page$month)
1470848812047:pull$day <- as.Date(pull$day)
1470848812051:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1470848812053:print("Found Facebook data matching date range. Storing values.")
1470848812055:} else {
1470848812057:print("Did not find Facebook data matching dataset dates. Re-querying.")
1470848812069:print(paste("Attempt", attempt))
1470848812072:pull <- NULL}
1470848812076:if (attempt > 100) {
1470848812080:print('Too many attempts. Skipping.')
1470848812082:pull <- NULL
1470848812084:break
1470848812086:} else {}
1470848812088:}
1470848812092:pulllength <- ncol(pull)
1470848812098:rpull = pull[rev(rownames(pull)),]
1470848812102:hold <- rbind(hold,rpull)
1470848812104:rawhold <- hold
1470848812124:}
1470848812188:rhold = hold[rev(rownames(hold)),]
1470848812190:rhold$value = shift(rhold$value, 1)
1470848812192:hold = rhold[rev(rownames(rhold)),]
1470848812212:hold$value[1] = rawhold$value[1]
1470848812337:hours <- seq(0,23)
1470848812342:names(hours) <- paste("Hour", hours)
1470848812362:subtypes <- c('link','comment', 'like')
1470848812373:names(subtypes) <- c('Shares','Comments', 'Likes')
1470848812378:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1470848812381:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1470848812390:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1470848812403:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1470848812411:for (type in 1:length(subtypes)) {
1470848812414:typehold <- NA
1470848812418:typehold <- hold[hold$variable == subtypes[type],]
1470848812423:pagedata <- cbind(NA,pagedata)
1470848812425:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470848812428:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1470848812433:metrics <- c(metrics,subtypes[type])
1470848812435:}
1470848812446:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1470848812451:for (demographic in 1:length(demographics)) {
1470848812461:print(names(demographics[demographic]))
1470848812468:typehold <- NA
1470848812471:typehold <- hold[hold$variable == demographics[demographic],]
1470848812475:typehold[typehold$value <= 10,] <- NA
1470848812480:pagedata <- cbind(NA,pagedata)
1470848812485:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470848812488:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1470848812493:metrics <- c(metrics,demographics[demographic])
1470848812546:}
1470848812571:} else if ((metrics)[metric] == 'page_fans_online') {
1470848812581:for (hour in 1:length(hours)) {
1470848812591:typehold <- NA
1470848812594:typehold <- hold[hold$variable == hours[hour],]
1470848812600:pagedata <- cbind(NA,pagedata)
1470848812604:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470848812607:colnames(pagedata)[1] = paste("hour",hours[hour])
1470848812613:metrics <- c(metrics,hours[hour])
1470848812619:}
1470848812622:} else {
1470848812643:pagedata <- cbind(NA,pagedata)
1470848812646:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1470848812654:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1470848812665:}
1470848812671:cat("\n\n")
1470848812702:print(head(pagedata))
1470848812712:cat("\n")
1470848812721:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1470848812729:break
1470848812733:} else {
1470848812772:}
1470848812785:pagedata.tempstore <- pagedata
1470848812791:#Page Metrics to remove because they have subtypes
1470848812803:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1470848812834:# Page Metrics to manually create
1470848812850:metrics <- c(metrics,"organic reach")
1470848812865:names(metrics)[length(metrics)] <- c("Organic Reach")
1470848812936:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1470848812941:colnames(pagedata)[1] = "organic reach"
1470848812951:# Final dataset formatting
1470848812954:pagedatastore <- pagedata
1470848812981:#pagedata <- pagedatastore
1470848813000:pagedata2 <- pagedata
1470848813014:# reorder and null NA's for excel
1470848813018:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1470848813022:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1470848813060:#pagedata2[is.na(pagedata2)] <- ""
1470848813066:#pagedata2[pagedata2 == 0] <- ""
1470848813075:# store final dataset
1470848813079:pagedata <- pagedata2
1470848813087:### Post Metrics #############################
1470848813096:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1470848813100:# Most are automated, and will continue to retry through errors until a value is found.
1470848813104:# Manual modifications are run after initial data acquisition.
1470848813110:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1470848813119:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1470848813130:# Populate sets with values from pull
1470848813137:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470848813142:page$datetime <- format.facebook.date(page$created_time)
1470848813146:page$month <- format(page$datetime, "%Y-%m")
1470848813149:page$day <- format(page$datetime, "%Y-%m-%d")
1470848813162:page$datetime <- as.Date(page$datetime)
1470848813178:#page$month <- as.Date(page$month)
1470848813186:page$day <- as.Date(page$day)
1470848813196:} else {
1470848813200:print("Date fields already exist for Post Data.")
1470848813253:}
1470848813261:postdata <- 0
1470848813265:postdata <- page[page$day > floor,]
1470848813268:postdata <- postdata[postdata$day < roof,]
1470848813285:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1470848813303:# Name column for usability
1470848813308:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1470848813315:rows <- nrow(postdata)
1470848813319:lpostmetrics <- postmetrics
1470848813377:testlength <- 2
1470848813381:#length(postmetrics) instead of testlength; swapped out for hotfixes
1470848813412:for (pmetric in 1:length(postmetrics)) {
1470848813422:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1470848813433:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1470848813438:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1470848813448:names(phold) <- c("id","name","period","title","description","value","variable")
1470848813462:} else {
1470848813469:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1470848813473:names(phold) <- c("id","name","period","title","description","value")
1470848813480:}
1470848813550:for (post in 1:nrow(postdata)) {
1470848813571:period <- "lifetime"
1470848813583:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1470848813607:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1470848813612:print('Not a Facebook Video.')
1470848813617:phold <- rbind(phold, NA)
1470848813621:next()
1470848813626:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1470848813632:} else {
1470848813638:}
1470848813655:postpull <- NULL
1470848813661:attempt <- 1
1470848813673:while( is.null(postpull) && attempt <= 100) {
1470848813677:attempt <- attempt + 1
1470848813683:try(
1470848813688:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1470848813697:,silent=TRUE
1470848813703:)
1470848813734:if (attempt > 10) {
1470848813738:print('Too many attempts. Skipping.')
1470848813744:postpull <- NULL
1470848813749:break
1470848813768:} else {
1470848813773:}
1470848813822:colnames(phold) <- names(postpull)
1470848813832:phold <- rbind(phold, postpull)
1470848813840:}
1470848813846:pholdstore <- phold
1470848813860:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1470848813867:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1470848813878:phold <- phold[-1,]
1470848813893:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1470848814014:postmetrics <- postmetrics[-pmetric]
1470848814020:pmetric <- pmetric + 1
1470848814030:for (ptype in (1:length(psubtypes))) {
1470848814064:ptyphehold <- NA
1470848814070:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1470848814082:postdata <- cbind(NA,postdata)
1470848814087:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1470848814103:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1470848814110:postmetrics <- c(postmetrics,psubtypes[ptype])
1470848814115:}
1470848814134:} else {
1470848814140:postdata <- cbind(NA,postdata)
1470848814148:postdata[1:length(phold$value),1] <- phold$value
1470848814153:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1470848814160:}
1470848814179:cat("\n\n")
1470848814183:print(head(postdata))
1470848814188:cat("\n")
1470848814196:}
1470848814220:postdatastore <- postdata
1470848814258:# Post Metrics to manually create
1470848814278:postmetrics <- c(postmetrics,"organic reach")
1470848814285:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1470848814308:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1470848814317:colnames(postdata)[1] = "organic reach"
1470848814336:# Final dataset formatting
1470848814341:#postdatastore <- postdata
1470848814346:#postdata <- postdatastore
1470848814366:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1470848814451:# reorder and null NA's for Excel
1470848814468:postdata2 <- postdata
1470848814474:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1470848814484:postdata2[is.na(postdata2)] <- ""
1470848814490:postdata2[postdata2 == 0] <- ""
1470848814515:# store final dataset
1470848814523:postdata <- as.data.frame(postdata2)
1470848814539:# Outputs -----------------------------------------------------------------
1470848814557:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1470848814566:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1470848814575:datafolder <- "Data"
1470848814588:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470848814602:# Rename columns for Excel readability
1470848814613:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1470848814620:# output Page dataset as final csv
1470848814637:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1470848814647:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470848814653:?wri
1470848814656:# Rename columns for Excel readability
1470848814665:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470848814672:# output Post dataset as final Excel
1470848814677:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470848814683:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470848814704:# Raw Data
1470848814712:# output dataset as raw csv
1470848814718:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470848814730:totalpagedata <- rbind(totalpagedata, pagedata)
1470848814736:totalpostdata <- rbind(totalpostdata, postdata)
1470848814747:}
1470848815343:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470848815358:# Rename columns for Excel readability
1470848815358:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470848815360:# output Post dataset as final Excel
1470848815360:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470848815360:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470848815372:# Images
1470848815372:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1470848815374:#for (picture in (1:nrow(postdata))) {
1470848815374:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1470848815375:#
1470848815375:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1470848815375:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1470848815375:#
1470848815375:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1470848815376:# Edit the core program and change feedback loop.
1470848815376:#
1470848815376:#}
1470849222793:## Facebook Query Injector #####
1470849222795:## Mirum Agency ################
1470849222796:## By Vivek Menon ##############
1470849222796:## v.1.5.0 #####################
1470849222797:# Summary -----------------------------------------------------------------
1470849222797:# Todo --------------------------------------------------------------------
1470849222798:# - Run script for all major brands
1470849222798:# - Create 'participation rate' function
1470849222798:# - Incorporate Twitter
1470849222799:# Setup -------------------------------------------------------------------
1470849222799:# Load and install all necessary packages for the script
1470849222799:# Required Packages for dataframes, forecasting, graphical visualization, and development
1470849222800:# Use 'install.packages()' if unavailable.
1470849222800:#library(zoo)
1470849222800:#library(forecast)
1470849222800:library(ggplot2)
1470849222801:#library(scales)
1470849222801:library(devtools)
1470849222805:library(compare)
1470849222805:library(xlsx)
1470849222808:require(httr)
1470849222809:require(rjson)
1470849222812:require(RCurl)
1470849222812:# Pull most up to date Github repositories for relevant packages
1470849222813:# Not frequently updated; does not need to be run every time.
1470849222813:#install_github("pablobarbera/Rfacebook/Rfacebook")
1470849222813:#install_github("pablobarbera/instaR/instaR")
1470849222813:# Required packags for plugging into Facebook API
1470849222814:#library(twitteR)
1470849222814:library(Rfacebook)
1470849222815:#library(instaR)
1470849222815:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1470849222818:# https://instagram.com/developer/authentication/?hl=en
1470849222819:#setwd("~/Desktop/TWE/Monthly Reports/June 2015")
1470849222822:setwd("~/")
1470849222823:getwd()
1470849222826:# Functions ---------------------------------------------------------------
1470849222827:# User Functions
1470849222827:# Function to convert Facebook date format to R date format
1470849222830:format.facebook.date <- function(datestring) {
1470849222831:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470849222831:}
1470849222832:# Shift a vector up by an amount
1470849222832:shift <- function(x, n){
1470849222835:c(x[-(seq(n))], rep(NA, n))
1470849222835:}
1470849222836:# Get gcd from vector
1470849222837:gcd <- function(x,y) {
1470849222840:r <- x%%y;
1470849222840:return(ifelse(r, gcd(y, r), y))
1470849222841:}
1470849222842:# Inputs ------------------------------------------------------------------
1470849222842:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1470849222846:# Define data range for data (2012 is out of bounds for some metrics)
1470849222849:# http://thinktostart.com/analyzing-facebook-with-r/
1470849222849:fb_oauth <- fbOAuth(app_id="955460364539237", app_secret="0a3e6943c90510dc158fc7683e560f7d",extended_permissions = FALSE)
1470849225260:posts <- 2000
1470849225261:roof = Sys.Date() #"2015-12-31"
1470849225263:floor = "2016-04-01" #"2015-05-01"
1470849225264:range = seq(as.Date(floor), as.Date(roof), by="days")
1470849225268:## Access ftoken
1470849225268:# Use token from Facebook Graph API
1470849225273:# token generated here: https://developers.facebook.com/tools/explorer
1470849225274:# Lasts two hours, and must be changed depending on page and permissions
1470849225277:ftokens <- c(
1470849225277:#Sledgehammer Wine
1470849225280:#"CAACEdEose0cBAAaqv8JuC9FYYF2JZBzCDyJSrZB5aXhCMHeZAYjdcRkoOyZBHAqNdsSAVnmf63EyT3ZB6pcBZAIcPxcDCQCAXFE1ER62zJDC9tMF6AC5IvTXczksCjh9HocfSBYA1qjER8wsoFvPUF1B9f4mMhNrnAPWRZADbliPBRDTh0D2qF72LAPwZCsfw3UZD"
1470849225280:#Chateau Saint Jean
1470849225281:#"EAACEdEose0cBAOwwfrVCmYxjRlHVlMDJAjtEJkfMZBkWVsQbDGv0eXi50MZCc4F2i33vbhmJ6823oIzAbhezsZAkqchpPpYaiB8XzcfZBKS2jSXE22EY1e855OvkfgFyjKPiOPOjOZAQIbDiJg1tHCMMLVjUlwPcoKGBEexWbGQZDZD"
1470849225281:#19 Crimes
1470849225281:#,"EAACEdEose0cBANCXTZAFtviL9VEUq4DhkEwMyzqdmWgZBh68EReZAIEOVBYlTSiS52swRACvjhybfPQGFqEOmJp0OjTSPQ9ZC01R6nxViJ5xDHXPlDCwnnXOBObHYwZAXhQzy52kL3FZA3WcHNrGNIqfJZC9MZCJPkkfXHpVsx3PHQZDZD"
1470849225281:#Beringer Vneyards
1470849225282:#,"EAACEdEose0cBAAfj1KkrLbPzVw0v5gul87LeUeoXUHnN6rlxrVRklAgg214vFGLkQTKeLHEUWDGg9ZBVeTDRQdOietA25FLcAaQCGiKvmLFv3ZAYnMpLg9YKnpNpazKjXKwWpkXZBdjuKB7Ql6JKu4Q8pNOZCk97LWSwW4U8vgZDZD"
1470849225282:#100% Canadian Milk
1470849225282:#"EAACEdEose0cBAK7Hbibie8kWBzeZBqevx9FEVIgUecHAXLLMZAyR974zvJIf2I3LgxiR05o4gZCm7PkRfvSvVCLhtR98AeVBjSZB9A8Ym6KeJSXhmetOFzjaaFxjVJBZBaVxvNQaTQZCxCgfIZCBl7AZCuSx0tSV1b9ZCUGdBj7OUZAAZDZD"
1470849225282:#Lait 100% Canadien
1470849225283:#,"EAACEdEose0cBAMZB9OeGbItotQXru0sp1vggahZCvZCDQvZAQeskIsZC2713k83AAE5fwZBV5UPAoYgk1NIAi64MgHjSLb362JomROuLuBZB2i9OJoPZC0664EuZBpjSMJEDqtdcvJfvlZAFX9TWPeItEEPdR81KfzSGJJ2l8MeDL1pwZDZD"
1470849225283:#Recharge with Milk
1470849225283:#,"CAACEdEose0cBAJ9NPmffbszUQ1HYObOGqdht5XWBoU7zABLhgZB6L53eyqVrt0CPxkZAXQpI0fGW7FHucQ0LgGtmRRlWP6eAQgZBSa6oaRibk9qZAp0xVGZCr4B6AdysmfVlbZCFjoZBYZCJ3sxN1yMdL5jz6yCWOZAAbAv00nXq5wURrgCUe3dXZAZBF2COnBm9YxXk5vFoWWJkQZDZD"
1470849225284:#BaronSamedi
1470849225284:"EAANkZCHOgFWUBAHaWKdF0oFQrEW1ncmqdZBH064po1PJfWbJZAzIDhJ0z7n2ma06aogrSuA6QUZClnQ4sCRH6YX0O00AuQzEFgvMXYZAD25qZBhDiCp4LW59qZApQZAd6SQlf0sP3ZATCyOM3ToFCxFiMXZCG6AKbHDrqPBxFRxmFFDQZDZD"
1470849225285:)
1470849225285:totalpagedata <- data.frame()
1470849225286:totalpostdata <- data.frame()
1470849225290:for (brand in 1:length(ftokens)) {
1470849225291:ftoken <- ftokens[brand]
1470849225293:## User Id
1470849225294:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1470849225296:userid = "10153046308598756"
1470849225297:# Access public personal data; basically a ftoken test
1470849225297:me <- getUsers("me", token=ftoken)
1470849225298:print(me$name)
1470849225298:## Page Id
1470849225298:# Define which page will be used for the data collection. Change id's as necessary.
1470849225299:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1470849225299:pageid = me$id
1470849225300:# Acquisition -------------------------------------------------------------
1470849225300:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1470849225300:page <- getPage(pageid, ftoken, n = posts)
1470849225301:page.store <- page
1470849225301:# Create new vectors in dataset with datetime, month, and day formattiong
1470849225302:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470849225302:page$datetime <- format.facebook.date(page$created_time)
1470849225302:page$month <- format(page$datetime, "%Y-%m")
1470849225302:page$day <- format(page$datetime, "%Y-%m-%d")
1470849225303:page$datetime <- as.Date(page$datetime)
1470849225303:#page$month <- as.Date(page$month)
1470849225307:page$day <- as.Date(page$day)
1470849225307:} else {
1470849225307:print("Date fields already exist.")
1470849225308:}
1470849225309:# Processing --------------------------------------------------------------
1470849225312:# Process data to clean dataset and augment it with more data than default fields.
1470849225312:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1470849225316:## Cleaning =================================
1470849225317:# Page and Post Datasets
1470849225319:# Split dataset into two for pages and post data
1470849225320:# Create initial null sets
1470849225323:pagedata <- 0
1470849225323:postdata <- 0
1470849225324:## Appending =================================
1470849225325:### Page Metrics #############################
1470849225328:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1470849225328:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1470849225330:# Page Metrics to automatically pull
1470849225330:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1470849225333:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1470849225333:pagemetrics <- metrics
1470849225337:# Prep dataset by breaking into weeks
1470849225337:pagedata <- 0
1470849225338:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1470849225339:colnames(pagedata) = c("pageid", "page", "date")
1470849225340:pagedata$page = page$from_name[1]
1470849225340:pagedata$pageid = page$from_id[1]
1470849225342:divisor = 5
1470849225343:remainder = length(range)%%divisor;
1470849225346:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1470849225347:weeks <- (nrow(pagedata)/5)-2
1470849225348:# Start Data Acquisition Loop
1470849225351:for (metric in 1:length(metrics)) {
1470849225352:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1470849225355:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1470849225356:period = 'lifetime'
1470849225358:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1470849225359:period = 'day'
1470849225362:tempfloor = "2014-02-01"
1470849225363:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1470849225367:if (floor < tempfloor) {
1470849225369:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1470849225372:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1470849225373:weeks = tempweeks
1470849225377:} else {}
1470849225378:} else {
1470849225380:period = 'day'
1470849225381:weeks <- (nrow(pagedata)/5)-2
1470849225384:}
1470849225385:hold <- matrix(0, nrow=0, ncol=7)
1470849225390:for (week in 0:weeks) {
1470849225391:end <- pagedata$date[(week*5)+1]
1470849225392:start <- pagedata$date[((week+1)*5)+1]
1470849225395:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1470849225397:pull <- NULL
1470849225400:attempt <- 1
1470849225401:while(is.null(pull) && attempt <= 10) {
1470849225404:attempt <- attempt + 1
1470849225404:try(
1470849225405:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1470849225406:)
1470849225407:if (is.null(pull)) {
1470849225408:print("Empty Pull. Re-attempting.")
1470849225412:print(paste("Attempt", attempt))
1470849225413:} else {
1470849225415:pull$datetime <- format.facebook.date(pull$end_time)
1470849225417:pull$day <- format(pull$datetime, "%Y-%m-%d")
1470849225419:pull$datetime <- as.Date(pull$datetime)
1470849225420:#page$month <- as.Date(page$month)
1470849225423:pull$day <- as.Date(pull$day)
1470849225426:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1470849225427:print("Found Facebook data matching date range. Storing values.")
1470849225430:} else {
1470849225431:print("Did not find Facebook data matching dataset dates. Re-querying.")
1470849225435:print(paste("Attempt", attempt))
1470849225437:pull <- NULL}
1470849225439:if (attempt > 100) {
1470849225441:print('Too many attempts. Skipping.')
1470849225442:pull <- NULL
1470849225445:break
1470849225446:} else {}
1470849225449:}
1470849225451:pulllength <- ncol(pull)
1470849225453:rpull = pull[rev(rownames(pull)),]
1470849225455:hold <- rbind(hold,rpull)
1470849225458:rawhold <- hold
1470849225460:}
1470849225464:rhold = hold[rev(rownames(hold)),]
1470849225465:rhold$value = shift(rhold$value, 1)
1470849225468:hold = rhold[rev(rownames(rhold)),]
1470849225469:hold$value[1] = rawhold$value[1]
1470849225474:hours <- seq(0,23)
1470849225475:names(hours) <- paste("Hour", hours)
1470849225478:subtypes <- c('link','comment', 'like')
1470849225480:names(subtypes) <- c('Shares','Comments', 'Likes')
1470849225483:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1470849225484:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1470849225487:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1470849225491:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1470849225494:for (type in 1:length(subtypes)) {
1470849225495:typehold <- NA
1470849225498:typehold <- hold[hold$variable == subtypes[type],]
1470849225500:pagedata <- cbind(NA,pagedata)
1470849225501:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849225503:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1470849225507:metrics <- c(metrics,subtypes[type])
1470849225509:}
1470849225512:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1470849225515:for (demographic in 1:length(demographics)) {
1470849225519:print(names(demographics[demographic]))
1470849225522:typehold <- NA
1470849225523:typehold <- hold[hold$variable == demographics[demographic],]
1470849225524:typehold[typehold$value <= 10,] <- NA
1470849225530:pagedata <- cbind(NA,pagedata)
1470849225532:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849225535:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1470849225540:metrics <- c(metrics,demographics[demographic])
1470849225541:}
1470849225544:} else if ((metrics)[metric] == 'page_fans_online') {
1470849225547:for (hour in 1:length(hours)) {
1470849225553:typehold <- NA
1470849225556:typehold <- hold[hold$variable == hours[hour],]
1470849225559:pagedata <- cbind(NA,pagedata)
1470849225560:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849225562:colnames(pagedata)[1] = paste("hour",hours[hour])
1470849225565:metrics <- c(metrics,hours[hour])
1470849225567:}
1470849225570:} else {
1470849225571:pagedata <- cbind(NA,pagedata)
1470849225573:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1470849225575:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1470849225579:}
1470849225583:cat("\n\n")
1470849225585:print(head(pagedata))
1470849225587:cat("\n")
1470849225591:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1470849225593:break
1470849225595:} else {
1470849225598:}
1470849225605:pagedata.tempstore <- pagedata
1470849225608:#Page Metrics to remove because they have subtypes
1470849225610:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1470849225614:# Page Metrics to manually create
1470849225615:metrics <- c(metrics,"organic reach")
1470849225619:names(metrics)[length(metrics)] <- c("Organic Reach")
1470849225623:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1470849225624:colnames(pagedata)[1] = "organic reach"
1470849225628:# Final dataset formatting
1470849225630:pagedatastore <- pagedata
1470849225632:#pagedata <- pagedatastore
1470849225634:pagedata2 <- pagedata
1470849225640:# reorder and null NA's for excel
1470849225644:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1470849225646:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1470849225649:#pagedata2[is.na(pagedata2)] <- ""
1470849225652:#pagedata2[pagedata2 == 0] <- ""
1470849225658:# store final dataset
1470849225662:pagedata <- pagedata2
1470849225668:### Post Metrics #############################
1470849225672:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1470849225677:# Most are automated, and will continue to retry through errors until a value is found.
1470849225681:# Manual modifications are run after initial data acquisition.
1470849225690:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1470849225693:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1470849225702:# Populate sets with values from pull
1470849225709:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470849225713:page$datetime <- format.facebook.date(page$created_time)
1470849225716:page$month <- format(page$datetime, "%Y-%m")
1470849225721:page$day <- format(page$datetime, "%Y-%m-%d")
1470849225729:page$datetime <- as.Date(page$datetime)
1470849225731:#page$month <- as.Date(page$month)
1470849225734:page$day <- as.Date(page$day)
1470849225737:} else {
1470849225741:print("Date fields already exist for Post Data.")
1470849225745:}
1470849225752:postdata <- 0
1470849225755:postdata <- page[page$day > floor,]
1470849225760:postdata <- postdata[postdata$day < roof,]
1470849225765:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1470849225774:# Name column for usability
1470849225777:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1470849225782:rows <- nrow(postdata)
1470849225787:lpostmetrics <- postmetrics
1470849225793:testlength <- 2
1470849225795:#length(postmetrics) instead of testlength; swapped out for hotfixes
1470849225809:for (pmetric in 1:length(postmetrics)) {
1470849225812:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1470849225817:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1470849225819:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1470849225821:names(phold) <- c("id","name","period","title","description","value","variable")
1470849225824:} else {
1470849225826:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1470849225830:names(phold) <- c("id","name","period","title","description","value")
1470849225833:}
1470849225842:for (post in 1:nrow(postdata)) {
1470849225849:period <- "lifetime"
1470849225862:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1470849225867:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1470849225869:print('Not a Facebook Video.')
1470849225872:phold <- rbind(phold, NA)
1470849225875:next()
1470849225878:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1470849225881:} else {
1470849225884:}
1470849225893:postpull <- NULL
1470849225897:attempt <- 1
1470849225904:while( is.null(postpull) && attempt <= 100) {
1470849225908:attempt <- attempt + 1
1470849225910:try(
1470849225913:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1470849225917:,silent=TRUE
1470849225919:)
1470849225922:if (attempt > 10) {
1470849225925:print('Too many attempts. Skipping.')
1470849225927:postpull <- NULL
1470849225932:break
1470849225934:} else {
1470849225937:}
1470849225946:colnames(phold) <- names(postpull)
1470849225951:phold <- rbind(phold, postpull)
1470849225954:}
1470849225957:pholdstore <- phold
1470849225967:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1470849225970:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1470849225977:phold <- phold[-1,]
1470849225983:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1470849225989:postmetrics <- postmetrics[-pmetric]
1470849225992:pmetric <- pmetric + 1
1470849226000:for (ptype in (1:length(psubtypes))) {
1470849226002:ptyphehold <- NA
1470849226005:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1470849226011:postdata <- cbind(NA,postdata)
1470849226015:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1470849226020:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1470849226022:postmetrics <- c(postmetrics,psubtypes[ptype])
1470849226025:}
1470849226033:} else {
1470849226036:postdata <- cbind(NA,postdata)
1470849226039:postdata[1:length(phold$value),1] <- phold$value
1470849226041:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1470849226044:}
1470849226053:cat("\n\n")
1470849226056:print(head(postdata))
1470849226059:cat("\n")
1470849226062:}
1470849226070:postdatastore <- postdata
1470849226082:# Post Metrics to manually create
1470849226087:postmetrics <- c(postmetrics,"organic reach")
1470849226092:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1470849226102:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1470849226107:colnames(postdata)[1] = "organic reach"
1470849226115:# Final dataset formatting
1470849226117:#postdatastore <- postdata
1470849226122:#postdata <- postdatastore
1470849226132:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1470849226138:# reorder and null NA's for Excel
1470849226140:postdata2 <- postdata
1470849226143:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1470849226146:postdata2[is.na(postdata2)] <- ""
1470849226148:postdata2[postdata2 == 0] <- ""
1470849226155:# store final dataset
1470849226158:postdata <- as.data.frame(postdata2)
1470849226165:# Outputs -----------------------------------------------------------------
1470849226170:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1470849226173:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1470849226180:datafolder <- "Data"
1470849226186:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470849226194:# Rename columns for Excel readability
1470849226197:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1470849226201:# output Page dataset as final csv
1470849226206:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1470849226210:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470849226214:?wri
1470849226218:# Rename columns for Excel readability
1470849226225:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470849226233:# output Post dataset as final Excel
1470849226239:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470849226246:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470849226260:# Raw Data
1470849226265:# output dataset as raw csv
1470849226271:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470849226282:totalpagedata <- rbind(totalpagedata, pagedata)
1470849226288:totalpostdata <- rbind(totalpostdata, postdata)
1470849226298:}
1470849275035:## Facebook Query Injector #####
1470849275035:## Mirum Agency ################
1470849275037:## By Vivek Menon ##############
1470849275037:## v.1.5.0 #####################
1470849275038:# Summary -----------------------------------------------------------------
1470849275038:# Todo --------------------------------------------------------------------
1470849275038:# - Run script for all major brands
1470849275039:# - Create 'participation rate' function
1470849275039:# - Incorporate Twitter
1470849275039:# Setup -------------------------------------------------------------------
1470849275039:# Load and install all necessary packages for the script
1470849275040:# Required Packages for dataframes, forecasting, graphical visualization, and development
1470849275040:# Use 'install.packages()' if unavailable.
1470849275040:#library(zoo)
1470849275041:#library(forecast)
1470849275041:library(ggplot2)
1470849275041:#library(scales)
1470849275042:library(devtools)
1470849275046:library(compare)
1470849275046:library(xlsx)
1470849275049:require(httr)
1470849275050:require(rjson)
1470849275053:require(RCurl)
1470849275053:# Pull most up to date Github repositories for relevant packages
1470849275056:# Not frequently updated; does not need to be run every time.
1470849275057:#install_github("pablobarbera/Rfacebook/Rfacebook")
1470849275057:#install_github("pablobarbera/instaR/instaR")
1470849275058:# Required packags for plugging into Facebook API
1470849275058:#library(twitteR)
1470849275058:library(Rfacebook)
1470849275059:#library(instaR)
1470849275059:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1470849275062:# https://instagram.com/developer/authentication/?hl=en
1470849275063:#setwd("~/Desktop/TWE/Monthly Reports/June 2015")
1470849275066:setwd("~/")
1470849275067:getwd()
1470849275067:# Functions ---------------------------------------------------------------
1470849275070:# User Functions
1470849275071:# Function to convert Facebook date format to R date format
1470849275074:format.facebook.date <- function(datestring) {
1470849275074:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470849275074:}
1470849275075:# Shift a vector up by an amount
1470849275075:shift <- function(x, n){
1470849275075:c(x[-(seq(n))], rep(NA, n))
1470849275076:}
1470849275076:# Get gcd from vector
1470849275077:gcd <- function(x,y) {
1470849275078:r <- x%%y;
1470849275078:return(ifelse(r, gcd(y, r), y))
1470849275079:}
1470849275079:# Inputs ------------------------------------------------------------------
1470849275080:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1470849275083:# Define data range for data (2012 is out of bounds for some metrics)
1470849275083:# http://thinktostart.com/analyzing-facebook-with-r/
1470849275086:fb_oauth <- fbOAuth(app_id="955460364539237", app_secret="0a3e6943c90510dc158fc7683e560f7d",extended_permissions = FALSE)
1470849277268:posts <- 2000
1470849277268:roof = Sys.Date() #"2015-12-31"
1470849277271:floor = "2016-05-15" #"2015-05-01"
1470849277271:range = seq(as.Date(floor), as.Date(roof), by="days")
1470849277275:## Access ftoken
1470849277275:# Use token from Facebook Graph API
1470849277278:# token generated here: https://developers.facebook.com/tools/explorer
1470849277278:# Lasts two hours, and must be changed depending on page and permissions
1470849277282:ftokens <- c(
1470849277282:#Sledgehammer Wine
1470849277282:#"CAACEdEose0cBAAaqv8JuC9FYYF2JZBzCDyJSrZB5aXhCMHeZAYjdcRkoOyZBHAqNdsSAVnmf63EyT3ZB6pcBZAIcPxcDCQCAXFE1ER62zJDC9tMF6AC5IvTXczksCjh9HocfSBYA1qjER8wsoFvPUF1B9f4mMhNrnAPWRZADbliPBRDTh0D2qF72LAPwZCsfw3UZD"
1470849277282:#Chateau Saint Jean
1470849277283:#"EAACEdEose0cBAOwwfrVCmYxjRlHVlMDJAjtEJkfMZBkWVsQbDGv0eXi50MZCc4F2i33vbhmJ6823oIzAbhezsZAkqchpPpYaiB8XzcfZBKS2jSXE22EY1e855OvkfgFyjKPiOPOjOZAQIbDiJg1tHCMMLVjUlwPcoKGBEexWbGQZDZD"
1470849277283:#19 Crimes
1470849277283:#,"EAACEdEose0cBANCXTZAFtviL9VEUq4DhkEwMyzqdmWgZBh68EReZAIEOVBYlTSiS52swRACvjhybfPQGFqEOmJp0OjTSPQ9ZC01R6nxViJ5xDHXPlDCwnnXOBObHYwZAXhQzy52kL3FZA3WcHNrGNIqfJZC9MZCJPkkfXHpVsx3PHQZDZD"
1470849277283:#Beringer Vneyards
1470849277283:#,"EAACEdEose0cBAAfj1KkrLbPzVw0v5gul87LeUeoXUHnN6rlxrVRklAgg214vFGLkQTKeLHEUWDGg9ZBVeTDRQdOietA25FLcAaQCGiKvmLFv3ZAYnMpLg9YKnpNpazKjXKwWpkXZBdjuKB7Ql6JKu4Q8pNOZCk97LWSwW4U8vgZDZD"
1470849277284:#100% Canadian Milk
1470849277284:#"EAACEdEose0cBAK7Hbibie8kWBzeZBqevx9FEVIgUecHAXLLMZAyR974zvJIf2I3LgxiR05o4gZCm7PkRfvSvVCLhtR98AeVBjSZB9A8Ym6KeJSXhmetOFzjaaFxjVJBZBaVxvNQaTQZCxCgfIZCBl7AZCuSx0tSV1b9ZCUGdBj7OUZAAZDZD"
1470849277285:#Lait 100% Canadien
1470849277285:#,"EAACEdEose0cBAMZB9OeGbItotQXru0sp1vggahZCvZCDQvZAQeskIsZC2713k83AAE5fwZBV5UPAoYgk1NIAi64MgHjSLb362JomROuLuBZB2i9OJoPZC0664EuZBpjSMJEDqtdcvJfvlZAFX9TWPeItEEPdR81KfzSGJJ2l8MeDL1pwZDZD"
1470849277285:#Recharge with Milk
1470849277286:#,"CAACEdEose0cBAJ9NPmffbszUQ1HYObOGqdht5XWBoU7zABLhgZB6L53eyqVrt0CPxkZAXQpI0fGW7FHucQ0LgGtmRRlWP6eAQgZBSa6oaRibk9qZAp0xVGZCr4B6AdysmfVlbZCFjoZBYZCJ3sxN1yMdL5jz6yCWOZAAbAv00nXq5wURrgCUe3dXZAZBF2COnBm9YxXk5vFoWWJkQZDZD"
1470849277286:#BaronSamedi
1470849277286:"EAANkZCHOgFWUBAHaWKdF0oFQrEW1ncmqdZBH064po1PJfWbJZAzIDhJ0z7n2ma06aogrSuA6QUZClnQ4sCRH6YX0O00AuQzEFgvMXYZAD25qZBhDiCp4LW59qZApQZAd6SQlf0sP3ZATCyOM3ToFCxFiMXZCG6AKbHDrqPBxFRxmFFDQZDZD"
1470849277287:)
1470849277287:totalpagedata <- data.frame()
1470849277288:totalpostdata <- data.frame()
1470849277291:for (brand in 1:length(ftokens)) {
1470849277292:ftoken <- ftokens[brand]
1470849277295:## User Id
1470849277295:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1470849277299:userid = "10153046308598756"
1470849277299:# Access public personal data; basically a ftoken test
1470849277300:me <- getUsers("me", token=ftoken)
1470849277303:print(me$name)
1470849277303:## Page Id
1470849277304:# Define which page will be used for the data collection. Change id's as necessary.
1470849277304:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1470849277304:pageid = me$id
1470849277305:# Acquisition -------------------------------------------------------------
1470849277306:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1470849277309:page <- getPage(pageid, ftoken, n = posts)
1470849277310:page.store <- page
1470849277313:# Create new vectors in dataset with datetime, month, and day formattiong
1470849277314:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470849277316:page$datetime <- format.facebook.date(page$created_time)
1470849277317:page$month <- format(page$datetime, "%Y-%m")
1470849277320:page$day <- format(page$datetime, "%Y-%m-%d")
1470849277321:page$datetime <- as.Date(page$datetime)
1470849277324:#page$month <- as.Date(page$month)
1470849277325:page$day <- as.Date(page$day)
1470849277328:} else {
1470849277328:print("Date fields already exist.")
1470849277332:}
1470849277333:# Processing --------------------------------------------------------------
1470849277336:# Process data to clean dataset and augment it with more data than default fields.
1470849277336:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1470849277341:## Cleaning =================================
1470849277343:# Page and Post Datasets
1470849277346:# Split dataset into two for pages and post data
1470849277348:# Create initial null sets
1470849277348:pagedata <- 0
1470849277352:postdata <- 0
1470849277353:## Appending =================================
1470849277356:### Page Metrics #############################
1470849277356:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1470849277359:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1470849277361:# Page Metrics to automatically pull
1470849277363:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1470849277364:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1470849277367:pagemetrics <- metrics
1470849277369:# Prep dataset by breaking into weeks
1470849277371:pagedata <- 0
1470849277371:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1470849277375:colnames(pagedata) = c("pageid", "page", "date")
1470849277376:pagedata$page = page$from_name[1]
1470849277378:pagedata$pageid = page$from_id[1]
1470849277379:divisor = 5
1470849277380:remainder = length(range)%%divisor;
1470849277384:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1470849277387:weeks <- (nrow(pagedata)/5)-2
1470849277388:# Start Data Acquisition Loop
1470849277390:for (metric in 1:length(metrics)) {
1470849277391:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1470849277394:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1470849277395:period = 'lifetime'
1470849277404:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1470849277406:period = 'day'
1470849277408:tempfloor = "2014-02-01"
1470849277410:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1470849277412:if (floor < tempfloor) {
1470849277414:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1470849277416:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1470849277418:weeks = tempweeks
1470849277420:} else {}
1470849277422:} else {
1470849277423:period = 'day'
1470849277425:weeks <- (nrow(pagedata)/5)-2
1470849277427:}
1470849277431:hold <- matrix(0, nrow=0, ncol=7)
1470849277434:for (week in 0:weeks) {
1470849277436:end <- pagedata$date[(week*5)+1]
1470849277440:start <- pagedata$date[((week+1)*5)+1]
1470849277444:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1470849277446:pull <- NULL
1470849277448:attempt <- 1
1470849277450:while(is.null(pull) && attempt <= 10) {
1470849277453:attempt <- attempt + 1
1470849277455:try(
1470849277456:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1470849277458:)
1470849277460:if (is.null(pull)) {
1470849277465:print("Empty Pull. Re-attempting.")
1470849277466:print(paste("Attempt", attempt))
1470849277469:} else {
1470849277471:pull$datetime <- format.facebook.date(pull$end_time)
1470849277473:pull$day <- format(pull$datetime, "%Y-%m-%d")
1470849277476:pull$datetime <- as.Date(pull$datetime)
1470849277477:#page$month <- as.Date(page$month)
1470849277479:pull$day <- as.Date(pull$day)
1470849277481:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1470849277486:print("Found Facebook data matching date range. Storing values.")
1470849277488:} else {
1470849277490:print("Did not find Facebook data matching dataset dates. Re-querying.")
1470849277491:print(paste("Attempt", attempt))
1470849277493:pull <- NULL}
1470849277496:if (attempt > 100) {
1470849277497:print('Too many attempts. Skipping.')
1470849277499:pull <- NULL
1470849277501:break
1470849277503:} else {}
1470849277505:}
1470849277509:pulllength <- ncol(pull)
1470849277513:rpull = pull[rev(rownames(pull)),]
1470849277517:hold <- rbind(hold,rpull)
1470849277519:rawhold <- hold
1470849277521:}
1470849277531:rhold = hold[rev(rownames(hold)),]
1470849277533:rhold$value = shift(rhold$value, 1)
1470849277536:hold = rhold[rev(rownames(rhold)),]
1470849277538:hold$value[1] = rawhold$value[1]
1470849277542:hours <- seq(0,23)
1470849277546:names(hours) <- paste("Hour", hours)
1470849277552:subtypes <- c('link','comment', 'like')
1470849277553:names(subtypes) <- c('Shares','Comments', 'Likes')
1470849277558:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1470849277561:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1470849277565:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1470849277572:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1470849277577:for (type in 1:length(subtypes)) {
1470849277580:typehold <- NA
1470849277582:typehold <- hold[hold$variable == subtypes[type],]
1470849277588:pagedata <- cbind(NA,pagedata)
1470849277590:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849277596:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1470849277601:metrics <- c(metrics,subtypes[type])
1470849277603:}
1470849277611:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1470849277615:for (demographic in 1:length(demographics)) {
1470849277620:print(names(demographics[demographic]))
1470849277637:typehold <- NA
1470849277640:typehold <- hold[hold$variable == demographics[demographic],]
1470849277645:typehold[typehold$value <= 10,] <- NA
1470849277650:pagedata <- cbind(NA,pagedata)
1470849277653:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849277654:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1470849277659:metrics <- c(metrics,demographics[demographic])
1470849277660:}
1470849277666:} else if ((metrics)[metric] == 'page_fans_online') {
1470849277669:for (hour in 1:length(hours)) {
1470849277705:typehold <- NA
1470849277708:typehold <- hold[hold$variable == hours[hour],]
1470849277718:pagedata <- cbind(NA,pagedata)
1470849277723:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849277726:colnames(pagedata)[1] = paste("hour",hours[hour])
1470849277731:metrics <- c(metrics,hours[hour])
1470849277734:}
1470849277738:} else {
1470849277741:pagedata <- cbind(NA,pagedata)
1470849277744:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1470849277747:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1470849277754:}
1470849277759:cat("\n\n")
1470849277762:print(head(pagedata))
1470849277765:cat("\n")
1470849277772:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1470849277775:break
1470849277776:} else {
1470849277782:}
1470849277791:pagedata.tempstore <- pagedata
1470849277803:#Page Metrics to remove because they have subtypes
1470849277808:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1470849277816:# Page Metrics to manually create
1470849277821:metrics <- c(metrics,"organic reach")
1470849277843:names(metrics)[length(metrics)] <- c("Organic Reach")
1470849277867:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1470849277881:colnames(pagedata)[1] = "organic reach"
1470849277890:# Final dataset formatting
1470849277912:pagedatastore <- pagedata
1470849277918:#pagedata <- pagedatastore
1470849277922:pagedata2 <- pagedata
1470849277936:# reorder and null NA's for excel
1470849277941:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1470849277944:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1470849277948:#pagedata2[is.na(pagedata2)] <- ""
1470849277954:#pagedata2[pagedata2 == 0] <- ""
1470849277971:# store final dataset
1470849277975:pagedata <- pagedata2
1470849278033:### Post Metrics #############################
1470849278058:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1470849278066:# Most are automated, and will continue to retry through errors until a value is found.
1470849278083:# Manual modifications are run after initial data acquisition.
1470849278097:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1470849278101:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1470849278114:# Populate sets with values from pull
1470849278123:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470849278148:page$datetime <- format.facebook.date(page$created_time)
1470849278152:page$month <- format(page$datetime, "%Y-%m")
1470849278156:page$day <- format(page$datetime, "%Y-%m-%d")
1470849278175:page$datetime <- as.Date(page$datetime)
1470849278179:#page$month <- as.Date(page$month)
1470849278183:page$day <- as.Date(page$day)
1470849278186:} else {
1470849278197:print("Date fields already exist for Post Data.")
1470849278206:}
1470849278227:postdata <- 0
1470849278231:postdata <- page[page$day > floor,]
1470849278234:postdata <- postdata[postdata$day < roof,]
1470849278248:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1470849278262:# Name column for usability
1470849278267:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1470849278280:rows <- nrow(postdata)
1470849278288:lpostmetrics <- postmetrics
1470849278298:testlength <- 2
1470849278303:#length(postmetrics) instead of testlength; swapped out for hotfixes
1470849278318:for (pmetric in 1:length(postmetrics)) {
1470849278325:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1470849278345:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1470849278349:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1470849278352:names(phold) <- c("id","name","period","title","description","value","variable")
1470849278356:} else {
1470849278367:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1470849278379:names(phold) <- c("id","name","period","title","description","value")
1470849278388:}
1470849278400:for (post in 1:nrow(postdata)) {
1470849278408:period <- "lifetime"
1470849278437:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1470849278445:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1470849278449:print('Not a Facebook Video.')
1470849278453:phold <- rbind(phold, NA)
1470849278457:next()
1470849278462:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1470849278466:} else {
1470849278481:}
1470849278586:postpull <- NULL
1470849278596:attempt <- 1
1470849278615:while( is.null(postpull) && attempt <= 100) {
1470849278654:attempt <- attempt + 1
1470849278667:try(
1470849278680:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1470849278686:,silent=TRUE
1470849278690:)
1470849278915:if (attempt > 10) {
1470849278963:print('Too many attempts. Skipping.')
1470849278967:postpull <- NULL
1470849278976:break
1470849278984:} else {
1470849278991:}
1470849279019:colnames(phold) <- names(postpull)
1470849279024:phold <- rbind(phold, postpull)
1470849279029:}
1470849279035:pholdstore <- phold
1470849279043:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1470849279047:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1470849279064:phold <- phold[-1,]
1470849279073:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1470849279088:postmetrics <- postmetrics[-pmetric]
1470849279093:pmetric <- pmetric + 1
1470849279109:for (ptype in (1:length(psubtypes))) {
1470849279115:ptyphehold <- NA
1470849279125:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1470849279141:postdata <- cbind(NA,postdata)
1470849279146:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1470849279157:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1470849279163:postmetrics <- c(postmetrics,psubtypes[ptype])
1470849279167:}
1470849279206:} else {
1470849279212:postdata <- cbind(NA,postdata)
1470849279217:postdata[1:length(phold$value),1] <- phold$value
1470849279223:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1470849279228:}
1470849279261:cat("\n\n")
1470849279282:print(head(postdata))
1470849279288:cat("\n")
1470849279293:}
1470849279303:postdatastore <- postdata
1470849279327:# Post Metrics to manually create
1470849279336:postmetrics <- c(postmetrics,"organic reach")
1470849279344:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1470849279358:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1470849279367:colnames(postdata)[1] = "organic reach"
1470849279385:# Final dataset formatting
1470849279390:#postdatastore <- postdata
1470849279395:#postdata <- postdatastore
1470849279406:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1470849279417:# reorder and null NA's for Excel
1470849279425:postdata2 <- postdata
1470849279432:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1470849279448:postdata2[is.na(postdata2)] <- ""
1470849279453:postdata2[postdata2 == 0] <- ""
1470849279474:# store final dataset
1470849279480:postdata <- as.data.frame(postdata2)
1470849279491:# Outputs -----------------------------------------------------------------
1470849279520:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1470849279524:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1470849279535:datafolder <- "Data"
1470849279543:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470849279554:# Rename columns for Excel readability
1470849279564:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1470849279571:# output Page dataset as final csv
1470849279577:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1470849279583:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470849279618:?wri
1470849279625:# Rename columns for Excel readability
1470849279633:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470849279642:# output Post dataset as final Excel
1470849279668:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470849279674:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470849279685:# Raw Data
1470849279691:# output dataset as raw csv
1470849279696:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470849279711:totalpagedata <- rbind(totalpagedata, pagedata)
1470849279728:totalpostdata <- rbind(totalpostdata, postdata)
1470849279742:}
1470849331113:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470849331134:# Rename columns for Excel readability
1470849331134:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470849331136:# output Post dataset as final Excel
1470849331136:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470849331136:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470849331163:# Images
1470849331163:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1470849331168:#for (picture in (1:nrow(postdata))) {
1470849331168:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1470849331169:#
1470849331169:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1470849331169:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1470849331170:#
1470849331170:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1470849331171:# Edit the core program and change feedback loop.
1470849331171:#
1470849331174:#}
1470849449961:install_github("pablobarbera/Rfacebook/Rfacebook")
1470849461967:library(Rfacebook)
1470849464086:setwd("~/")
1470849464306:getwd()
1470849464452:# Functions ---------------------------------------------------------------
1470849464835:# User Functions
1470849465033:# Function to convert Facebook date format to R date format
1470849465505:format.facebook.date <- function(datestring) {
1470849465605:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470849465703:}
1470849465753:# Shift a vector up by an amount
1470849465956:shift <- function(x, n){
1470849465959:c(x[-(seq(n))], rep(NA, n))
1470849466040:}
1470849466320:# Get gcd from vector
1470849466323:gcd <- function(x,y) {
1470849466325:return(ifelse(r, gcd(y, r), y))
1470849466327:r <- x%%y;
1470849466587:}
1470849466637:# Inputs ------------------------------------------------------------------
1470849466970:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1470849471940:# Inputs ------------------------------------------------------------------
1470849471941:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1470849471943:# Define data range for data (2012 is out of bounds for some metrics)
1470849471943:# http://thinktostart.com/analyzing-facebook-with-r/
1470849471943:fb_oauth <- fbOAuth(app_id="955460364539237", app_secret="0a3e6943c90510dc158fc7683e560f7d",extended_permissions = FALSE)
1470849473318:posts <- 2000
1470849473318:roof = Sys.Date() #"2015-12-31"
1470849473320:floor = "2016-05-15" #"2015-05-01"
1470849473321:range = seq(as.Date(floor), as.Date(roof), by="days")
1470849473325:## Access ftoken
1470849473325:# Use token from Facebook Graph API
1470849473328:# token generated here: https://developers.facebook.com/tools/explorer
1470849473328:# Lasts two hours, and must be changed depending on page and permissions
1470849473329:ftokens <- c(
1470849473330:#Sledgehammer Wine
1470849473333:#"CAACEdEose0cBAAaqv8JuC9FYYF2JZBzCDyJSrZB5aXhCMHeZAYjdcRkoOyZBHAqNdsSAVnmf63EyT3ZB6pcBZAIcPxcDCQCAXFE1ER62zJDC9tMF6AC5IvTXczksCjh9HocfSBYA1qjER8wsoFvPUF1B9f4mMhNrnAPWRZADbliPBRDTh0D2qF72LAPwZCsfw3UZD"
1470849473333:#Chateau Saint Jean
1470849473333:#"EAACEdEose0cBAOwwfrVCmYxjRlHVlMDJAjtEJkfMZBkWVsQbDGv0eXi50MZCc4F2i33vbhmJ6823oIzAbhezsZAkqchpPpYaiB8XzcfZBKS2jSXE22EY1e855OvkfgFyjKPiOPOjOZAQIbDiJg1tHCMMLVjUlwPcoKGBEexWbGQZDZD"
1470849473334:#19 Crimes
1470849473334:#,"EAACEdEose0cBANCXTZAFtviL9VEUq4DhkEwMyzqdmWgZBh68EReZAIEOVBYlTSiS52swRACvjhybfPQGFqEOmJp0OjTSPQ9ZC01R6nxViJ5xDHXPlDCwnnXOBObHYwZAXhQzy52kL3FZA3WcHNrGNIqfJZC9MZCJPkkfXHpVsx3PHQZDZD"
1470849473334:#Beringer Vneyards
1470849473335:#,"EAACEdEose0cBAAfj1KkrLbPzVw0v5gul87LeUeoXUHnN6rlxrVRklAgg214vFGLkQTKeLHEUWDGg9ZBVeTDRQdOietA25FLcAaQCGiKvmLFv3ZAYnMpLg9YKnpNpazKjXKwWpkXZBdjuKB7Ql6JKu4Q8pNOZCk97LWSwW4U8vgZDZD"
1470849473335:#100% Canadian Milk
1470849473335:#"EAACEdEose0cBAK7Hbibie8kWBzeZBqevx9FEVIgUecHAXLLMZAyR974zvJIf2I3LgxiR05o4gZCm7PkRfvSvVCLhtR98AeVBjSZB9A8Ym6KeJSXhmetOFzjaaFxjVJBZBaVxvNQaTQZCxCgfIZCBl7AZCuSx0tSV1b9ZCUGdBj7OUZAAZDZD"
1470849473336:#Lait 100% Canadien
1470849473336:#,"EAACEdEose0cBAMZB9OeGbItotQXru0sp1vggahZCvZCDQvZAQeskIsZC2713k83AAE5fwZBV5UPAoYgk1NIAi64MgHjSLb362JomROuLuBZB2i9OJoPZC0664EuZBpjSMJEDqtdcvJfvlZAFX9TWPeItEEPdR81KfzSGJJ2l8MeDL1pwZDZD"
1470849473336:#Recharge with Milk
1470849473337:#,"CAACEdEose0cBAJ9NPmffbszUQ1HYObOGqdht5XWBoU7zABLhgZB6L53eyqVrt0CPxkZAXQpI0fGW7FHucQ0LgGtmRRlWP6eAQgZBSa6oaRibk9qZAp0xVGZCr4B6AdysmfVlbZCFjoZBYZCJ3sxN1yMdL5jz6yCWOZAAbAv00nXq5wURrgCUe3dXZAZBF2COnBm9YxXk5vFoWWJkQZDZD"
1470849473337:#BaronSamedi
1470849473337:"EAANkZCHOgFWUBAHaWKdF0oFQrEW1ncmqdZBH064po1PJfWbJZAzIDhJ0z7n2ma06aogrSuA6QUZClnQ4sCRH6YX0O00AuQzEFgvMXYZAD25qZBhDiCp4LW59qZApQZAd6SQlf0sP3ZATCyOM3ToFCxFiMXZCG6AKbHDrqPBxFRxmFFDQZDZD"
1470849473338:)
1470849473339:totalpagedata <- data.frame()
1470849473340:totalpostdata <- data.frame()
1470849476777:for (brand in 1:length(ftokens)) {
1470849476777:ftoken <- ftokens[brand]
1470849476779:## User Id
1470849476780:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1470849476780:userid = "10153046308598756"
1470849476780:# Access public personal data; basically a ftoken test
1470849476781:me <- getUsers("me", token=ftoken)
1470849476781:print(me$name)
1470849476781:## Page Id
1470849476782:# Define which page will be used for the data collection. Change id's as necessary.
1470849476782:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1470849476783:pageid = me$id
1470849476783:# Acquisition -------------------------------------------------------------
1470849476787:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1470849476787:page <- getPage(pageid, ftoken, n = posts)
1470849476791:page.store <- page
1470849476793:# Create new vectors in dataset with datetime, month, and day formattiong
1470849476794:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470849476795:page$datetime <- format.facebook.date(page$created_time)
1470849476796:page$month <- format(page$datetime, "%Y-%m")
1470849476797:page$day <- format(page$datetime, "%Y-%m-%d")
1470849476801:page$datetime <- as.Date(page$datetime)
1470849476802:#page$month <- as.Date(page$month)
1470849476804:page$day <- as.Date(page$day)
1470849476804:} else {
1470849476805:print("Date fields already exist.")
1470849476805:}
1470849476810:# Processing --------------------------------------------------------------
1470849476810:# Process data to clean dataset and augment it with more data than default fields.
1470849476813:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1470849476814:## Cleaning =================================
1470849476817:# Page and Post Datasets
1470849476818:# Split dataset into two for pages and post data
1470849476822:# Create initial null sets
1470849476824:pagedata <- 0
1470849476829:postdata <- 0
1470849476833:## Appending =================================
1470849476835:### Page Metrics #############################
1470849476836:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1470849476838:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1470849476839:# Page Metrics to automatically pull
1470849476840:metrics = c("page_fans_online","page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions","page_fans_gender_age", "page_positive_feedback_by_type") #c(
1470849476843:names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1470849476843:pagemetrics <- metrics
1470849476847:# Prep dataset by breaking into weeks
1470849476848:pagedata <- 0
1470849476851:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1470849476852:colnames(pagedata) = c("pageid", "page", "date")
1470849476854:pagedata$page = page$from_name[1]
1470849476855:pagedata$pageid = page$from_id[1]
1470849476856:divisor = 5
1470849476857:remainder = length(range)%%divisor;
1470849476861:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1470849476862:weeks <- (nrow(pagedata)/5)-2
1470849476865:# Start Data Acquisition Loop
1470849476866:for (metric in 1:length(metrics)) {
1470849476869:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1470849476870:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1470849476872:period = 'lifetime'
1470849476873:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1470849476876:period = 'day'
1470849476877:tempfloor = "2014-02-01"
1470849476880:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1470849476881:if (floor < tempfloor) {
1470849476885:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1470849476886:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1470849476888:weeks = tempweeks
1470849476889:} else {}
1470849476892:} else {
1470849476893:period = 'day'
1470849476896:weeks <- (nrow(pagedata)/5)-2
1470849476896:}
1470849476900:hold <- matrix(0, nrow=0, ncol=7)
1470849476902:for (week in 0:weeks) {
1470849476904:end <- pagedata$date[(week*5)+1]
1470849476905:start <- pagedata$date[((week+1)*5)+1]
1470849476909:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1470849476910:pull <- NULL
1470849476912:attempt <- 1
1470849476914:while(is.null(pull) && attempt <= 10) {
1470849476916:attempt <- attempt + 1
1470849476917:try(
1470849476921:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1470849476922:)
1470849476924:if (is.null(pull)) {
1470849476925:print("Empty Pull. Re-attempting.")
1470849476927:print(paste("Attempt", attempt))
1470849476928:} else {
1470849476932:pull$datetime <- format.facebook.date(pull$end_time)
1470849476933:pull$day <- format(pull$datetime, "%Y-%m-%d")
1470849476936:pull$datetime <- as.Date(pull$datetime)
1470849476937:#page$month <- as.Date(page$month)
1470849476941:pull$day <- as.Date(pull$day)
1470849476944:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1470849476945:print("Found Facebook data matching date range. Storing values.")
1470849476946:} else {
1470849476950:print("Did not find Facebook data matching dataset dates. Re-querying.")
1470849476951:print(paste("Attempt", attempt))
1470849476954:pull <- NULL}
1470849476960:if (attempt > 100) {
1470849476963:print('Too many attempts. Skipping.')
1470849476965:pull <- NULL
1470849476968:break
1470849476970:} else {}
1470849476972:}
1470849476976:pulllength <- ncol(pull)
1470849476981:rpull = pull[rev(rownames(pull)),]
1470849476985:hold <- rbind(hold,rpull)
1470849476987:rawhold <- hold
1470849476989:}
1470849476997:rhold = hold[rev(rownames(hold)),]
1470849476998:rhold$value = shift(rhold$value, 1)
1470849477003:hold = rhold[rev(rownames(rhold)),]
1470849477005:hold$value[1] = rawhold$value[1]
1470849477008:hours <- seq(0,23)
1470849477009:names(hours) <- paste("Hour", hours)
1470849477012:subtypes <- c('link','comment', 'like')
1470849477013:names(subtypes) <- c('Shares','Comments', 'Likes')
1470849477018:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1470849477019:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1470849477022:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1470849477027:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1470849477030:for (type in 1:length(subtypes)) {
1470849477032:typehold <- NA
1470849477034:typehold <- hold[hold$variable == subtypes[type],]
1470849477036:pagedata <- cbind(NA,pagedata)
1470849477038:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849477040:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1470849477043:metrics <- c(metrics,subtypes[type])
1470849477046:}
1470849477050:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1470849477053:for (demographic in 1:length(demographics)) {
1470849477057:print(names(demographics[demographic]))
1470849477060:typehold <- NA
1470849477062:typehold <- hold[hold$variable == demographics[demographic],]
1470849477065:typehold[typehold$value <= 10,] <- NA
1470849477069:pagedata <- cbind(NA,pagedata)
1470849477071:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849477072:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1470849477075:metrics <- c(metrics,demographics[demographic])
1470849477077:}
1470849477081:} else if ((metrics)[metric] == 'page_fans_online') {
1470849477084:for (hour in 1:length(hours)) {
1470849477086:typehold <- NA
1470849477088:typehold <- hold[hold$variable == hours[hour],]
1470849477093:pagedata <- cbind(NA,pagedata)
1470849477094:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849477098:colnames(pagedata)[1] = paste("hour",hours[hour])
1470849477102:metrics <- c(metrics,hours[hour])
1470849477105:}
1470849477108:} else {
1470849477109:pagedata <- cbind(NA,pagedata)
1470849477111:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1470849477113:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1470849477117:}
1470849477120:cat("\n\n")
1470849477123:print(head(pagedata))
1470849477125:cat("\n")
1470849477129:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1470849477132:break
1470849477135:} else {
1470849477137:}
1470849477144:pagedata.tempstore <- pagedata
1470849477149:#Page Metrics to remove because they have subtypes
1470849477151:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1470849477155:# Page Metrics to manually create
1470849477157:metrics <- c(metrics,"organic reach")
1470849477161:names(metrics)[length(metrics)] <- c("Organic Reach")
1470849477164:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1470849477168:colnames(pagedata)[1] = "organic reach"
1470849477172:# Final dataset formatting
1470849477173:pagedatastore <- pagedata
1470849477175:#pagedata <- pagedatastore
1470849477177:pagedata2 <- pagedata
1470849477184:# reorder and null NA's for excel
1470849477187:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1470849477188:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1470849477192:#pagedata2[is.na(pagedata2)] <- ""
1470849477194:#pagedata2[pagedata2 == 0] <- ""
1470849477198:# store final dataset
1470849477201:pagedata <- pagedata2
1470849477204:### Post Metrics #############################
1470849477207:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1470849477209:# Most are automated, and will continue to retry through errors until a value is found.
1470849477212:# Manual modifications are run after initial data acquisition.
1470849477216:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1470849477218:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1470849477223:# Populate sets with values from pull
1470849477228:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470849477231:page$datetime <- format.facebook.date(page$created_time)
1470849477234:page$month <- format(page$datetime, "%Y-%m")
1470849477236:page$day <- format(page$datetime, "%Y-%m-%d")
1470849477240:page$datetime <- as.Date(page$datetime)
1470849477242:#page$month <- as.Date(page$month)
1470849477245:page$day <- as.Date(page$day)
1470849477248:} else {
1470849477250:print("Date fields already exist for Post Data.")
1470849477253:}
1470849477258:postdata <- 0
1470849477261:postdata <- page[page$day > floor,]
1470849477263:postdata <- postdata[postdata$day < roof,]
1470849477272:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1470849477278:# Name column for usability
1470849477280:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1470849477285:rows <- nrow(postdata)
1470849477287:lpostmetrics <- postmetrics
1470849477291:testlength <- 2
1470849477294:#length(postmetrics) instead of testlength; swapped out for hotfixes
1470849477305:for (pmetric in 1:length(postmetrics)) {
1470849477307:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1470849477311:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1470849477313:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1470849477317:names(phold) <- c("id","name","period","title","description","value","variable")
1470849477321:} else {
1470849477323:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1470849477325:names(phold) <- c("id","name","period","title","description","value")
1470849477328:}
1470849477336:for (post in 1:nrow(postdata)) {
1470849477341:period <- "lifetime"
1470849477346:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1470849477353:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1470849477355:print('Not a Facebook Video.')
1470849477357:phold <- rbind(phold, NA)
1470849477360:next()
1470849477363:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1470849477366:} else {
1470849477369:}
1470849477375:postpull <- NULL
1470849477379:attempt <- 1
1470849477384:while( is.null(postpull) && attempt <= 100) {
1470849477386:attempt <- attempt + 1
1470849477389:try(
1470849477395:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1470849477400:,silent=TRUE
1470849477403:)
1470849477408:if (attempt > 10) {
1470849477412:print('Too many attempts. Skipping.')
1470849477416:postpull <- NULL
1470849477418:break
1470849477422:} else {
1470849477426:}
1470849477436:colnames(phold) <- names(postpull)
1470849477440:phold <- rbind(phold, postpull)
1470849477443:}
1470849477445:pholdstore <- phold
1470849477452:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1470849477456:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1470849477461:phold <- phold[-1,]
1470849477468:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1470849477473:postmetrics <- postmetrics[-pmetric]
1470849477476:pmetric <- pmetric + 1
1470849477484:for (ptype in (1:length(psubtypes))) {
1470849477486:ptyphehold <- NA
1470849477488:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1470849477494:postdata <- cbind(NA,postdata)
1470849477499:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1470849477505:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1470849477508:postmetrics <- c(postmetrics,psubtypes[ptype])
1470849477511:}
1470849477528:} else {
1470849477534:postdata <- cbind(NA,postdata)
1470849477538:postdata[1:length(phold$value),1] <- phold$value
1470849477541:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1470849477545:}
1470849477557:cat("\n\n")
1470849477562:print(head(postdata))
1470849477566:cat("\n")
1470849477571:}
1470849477579:postdatastore <- postdata
1470849477595:# Post Metrics to manually create
1470849477600:postmetrics <- c(postmetrics,"organic reach")
1470849477606:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1470849477615:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1470849477620:colnames(postdata)[1] = "organic reach"
1470849477630:# Final dataset formatting
1470849477636:#postdatastore <- postdata
1470849477641:#postdata <- postdatastore
1470849477652:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1470849477661:# reorder and null NA's for Excel
1470849477667:postdata2 <- postdata
1470849477671:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1470849477677:postdata2[is.na(postdata2)] <- ""
1470849477684:postdata2[postdata2 == 0] <- ""
1470849477701:# store final dataset
1470849477714:postdata <- as.data.frame(postdata2)
1470849477730:# Outputs -----------------------------------------------------------------
1470849477742:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1470849477748:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1470849477759:datafolder <- "Data"
1470849477771:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470849477782:# Rename columns for Excel readability
1470849477787:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1470849477791:# output Page dataset as final csv
1470849477797:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1470849477803:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470849477808:?wri
1470849477813:# Rename columns for Excel readability
1470849477820:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470849477824:# output Post dataset as final Excel
1470849477828:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470849477834:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470849477845:# Raw Data
1470849477853:# output dataset as raw csv
1470849477859:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470849477869:totalpagedata <- rbind(totalpagedata, pagedata)
1470849477876:totalpostdata <- rbind(totalpostdata, postdata)
1470849477884:}
1470849560577:metric
1470849561917:metrics
1470849564901:metric[metric]
1470849566238:metric[metrics]
1470849569757:metrics[metric]
1470849587281:pulllength
1470849592503:rownames(pull)
1470849593684:pull
1470849680177:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24")
1470849680183:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24")
1470849686115:# Start Data Acquisition Loop
1470849686116:for (metric in 1:length(metrics)) {
1470849686120:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1470849686121:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1470849686121:period = 'lifetime'
1470849686121:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1470849686122:period = 'day'
1470849686122:tempfloor = "2014-02-01"
1470849686122:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1470849686123:if (floor < tempfloor) {
1470849686123:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1470849686123:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1470849686124:weeks = tempweeks
1470849686125:} else {}
1470849686126:} else {
1470849686128:period = 'day'
1470849686129:weeks <- (nrow(pagedata)/5)-2
1470849686132:}
1470849686133:hold <- matrix(0, nrow=0, ncol=7)
1470849686136:for (week in 0:weeks) {
1470849686137:end <- pagedata$date[(week*5)+1]
1470849686140:start <- pagedata$date[((week+1)*5)+1]
1470849686141:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1470849686144:pull <- NULL
1470849686145:attempt <- 1
1470849686148:while(is.null(pull) && attempt <= 10) {
1470849686149:attempt <- attempt + 1
1470849686151:try(
1470849686152:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1470849686153:)
1470849686155:if (is.null(pull)) {
1470849686157:print("Empty Pull. Re-attempting.")
1470849686159:print(paste("Attempt", attempt))
1470849686160:} else {
1470849686163:pull$datetime <- format.facebook.date(pull$end_time)
1470849686164:pull$day <- format(pull$datetime, "%Y-%m-%d")
1470849686168:pull$datetime <- as.Date(pull$datetime)
1470849686169:#page$month <- as.Date(page$month)
1470849686170:pull$day <- as.Date(pull$day)
1470849686171:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1470849686174:print("Found Facebook data matching date range. Storing values.")
1470849686176:} else {
1470849686178:print("Did not find Facebook data matching dataset dates. Re-querying.")
1470849686179:print(paste("Attempt", attempt))
1470849686181:pull <- NULL}
1470849686182:if (attempt > 100) {
1470849686185:print('Too many attempts. Skipping.')
1470849686186:pull <- NULL
1470849686187:break
1470849686188:} else {}
1470849686189:}
1470849686193:pulllength <- ncol(pull)
1470849686196:rpull = pull[rev(rownames(pull)),]
1470849686199:hold <- rbind(hold,rpull)
1470849686200:rawhold <- hold
1470849686200:}
1470849686204:rhold = hold[rev(rownames(hold)),]
1470849686204:rhold$value = shift(rhold$value, 1)
1470849686207:hold = rhold[rev(rownames(rhold)),]
1470849686208:hold$value[1] = rawhold$value[1]
1470849686210:hours <- seq(0,23)
1470849686212:names(hours) <- paste("Hour", hours)
1470849686216:subtypes <- c('link','comment', 'like')
1470849686217:names(subtypes) <- c('Shares','Comments', 'Likes')
1470849686220:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24")
1470849686222:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24")
1470849686224:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1470849686228:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1470849686231:for (type in 1:length(subtypes)) {
1470849686232:typehold <- NA
1470849686235:typehold <- hold[hold$variable == subtypes[type],]
1470849686241:pagedata <- cbind(NA,pagedata)
1470849686243:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849686245:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1470849686248:metrics <- c(metrics,subtypes[type])
1470849686250:}
1470849686257:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1470849686262:for (demographic in 1:length(demographics)) {
1470849686265:print(names(demographics[demographic]))
1470849686269:typehold <- NA
1470849686271:typehold <- hold[hold$variable == demographics[demographic],]
1470849686273:typehold[typehold$value <= 10,] <- NA
1470849686276:pagedata <- cbind(NA,pagedata)
1470849686278:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849686280:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1470849686284:metrics <- c(metrics,demographics[demographic])
1470849686286:}
1470849686293:} else if ((metrics)[metric] == 'page_fans_online') {
1470849686297:for (hour in 1:length(hours)) {
1470849686301:typehold <- NA
1470849686303:typehold <- hold[hold$variable == hours[hour],]
1470849686307:pagedata <- cbind(NA,pagedata)
1470849686309:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849686311:colnames(pagedata)[1] = paste("hour",hours[hour])
1470849686314:metrics <- c(metrics,hours[hour])
1470849686316:}
1470849686319:} else {
1470849686324:pagedata <- cbind(NA,pagedata)
1470849686327:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1470849686329:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1470849686334:}
1470849686337:cat("\n\n")
1470849686341:print(head(pagedata))
1470849686345:cat("\n")
1470849686349:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1470849686351:break
1470849686353:} else {
1470849686358:}
1470849808945:# Page Metrics to automatically pull
1470849808948:# "page_fans_online" ,"page_fans_gender_age", "page_positive_feedback_by_type"
1470849808949:metrics = c("page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions") #c(
1470849808953:names(metrics) = c("Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions")
1470849808954:pagemetrics <- metrics
1470849808957:# Prep dataset by breaking into weeks
1470849808957:pagedata <- 0
1470849808960:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1470849808964:colnames(pagedata) = c("pageid", "page", "date")
1470849808965:pagedata$page = page$from_name[1]
1470849808967:pagedata$pageid = page$from_id[1]
1470849808969:divisor = 5
1470849808971:remainder = length(range)%%divisor;
1470849808971:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1470849808975:weeks <- (nrow(pagedata)/5)-2
1470849812966:# Start Data Acquisition Loop
1470849812966:for (metric in 1:length(metrics)) {
1470849812968:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1470849812969:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1470849812969:period = 'lifetime'
1470849812969:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1470849812970:period = 'day'
1470849812970:tempfloor = "2014-02-01"
1470849812970:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1470849812971:if (floor < tempfloor) {
1470849812971:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1470849812971:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1470849812972:weeks = tempweeks
1470849812972:} else {}
1470849812973:} else {
1470849812973:period = 'day'
1470849812974:weeks <- (nrow(pagedata)/5)-2
1470849812977:}
1470849812978:hold <- matrix(0, nrow=0, ncol=7)
1470849812982:for (week in 0:weeks) {
1470849812983:end <- pagedata$date[(week*5)+1]
1470849812985:start <- pagedata$date[((week+1)*5)+1]
1470849812986:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1470849812990:pull <- NULL
1470849812992:attempt <- 1
1470849812994:while(is.null(pull) && attempt <= 10) {
1470849812996:attempt <- attempt + 1
1470849812997:try(
1470849813000:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1470849813001:)
1470849813002:if (is.null(pull)) {
1470849813003:print("Empty Pull. Re-attempting.")
1470849813004:print(paste("Attempt", attempt))
1470849813004:} else {
1470849813006:pull$datetime <- format.facebook.date(pull$end_time)
1470849813007:pull$day <- format(pull$datetime, "%Y-%m-%d")
1470849813011:pull$datetime <- as.Date(pull$datetime)
1470849813012:#page$month <- as.Date(page$month)
1470849813015:pull$day <- as.Date(pull$day)
1470849813017:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1470849813018:print("Found Facebook data matching date range. Storing values.")
1470849813021:} else {
1470849813022:print("Did not find Facebook data matching dataset dates. Re-querying.")
1470849813024:print(paste("Attempt", attempt))
1470849813025:pull <- NULL}
1470849813029:if (attempt > 100) {
1470849813030:print('Too many attempts. Skipping.')
1470849813032:pull <- NULL
1470849813034:break
1470849813037:} else {}
1470849813040:}
1470849813042:pulllength <- ncol(pull)
1470849813045:rpull = pull[rev(rownames(pull)),]
1470849813047:hold <- rbind(hold,rpull)
1470849813048:rawhold <- hold
1470849813051:}
1470849813059:rhold = hold[rev(rownames(hold)),]
1470849813060:rhold$value = shift(rhold$value, 1)
1470849813062:hold = rhold[rev(rownames(rhold)),]
1470849813064:hold$value[1] = rawhold$value[1]
1470849813067:hours <- seq(0,23)
1470849813069:names(hours) <- paste("Hour", hours)
1470849813072:subtypes <- c('link','comment', 'like')
1470849813074:names(subtypes) <- c('Shares','Comments', 'Likes')
1470849813076:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24")
1470849813078:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24")
1470849813081:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1470849813085:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1470849813088:for (type in 1:length(subtypes)) {
1470849813092:typehold <- NA
1470849813095:typehold <- hold[hold$variable == subtypes[type],]
1470849813098:pagedata <- cbind(NA,pagedata)
1470849813099:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849813101:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1470849813105:metrics <- c(metrics,subtypes[type])
1470849813107:}
1470849813112:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1470849813116:for (demographic in 1:length(demographics)) {
1470849813120:print(names(demographics[demographic]))
1470849813124:typehold <- NA
1470849813125:typehold <- hold[hold$variable == demographics[demographic],]
1470849813128:typehold[typehold$value <= 10,] <- NA
1470849813133:pagedata <- cbind(NA,pagedata)
1470849813135:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849813137:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1470849813141:metrics <- c(metrics,demographics[demographic])
1470849813142:}
1470849813146:} else if ((metrics)[metric] == 'page_fans_online') {
1470849813150:for (hour in 1:length(hours)) {
1470849813154:typehold <- NA
1470849813156:typehold <- hold[hold$variable == hours[hour],]
1470849813160:pagedata <- cbind(NA,pagedata)
1470849813163:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849813165:colnames(pagedata)[1] = paste("hour",hours[hour])
1470849813170:metrics <- c(metrics,hours[hour])
1470849813172:}
1470849813174:} else {
1470849813177:pagedata <- cbind(NA,pagedata)
1470849813180:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1470849813182:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1470849813186:}
1470849813191:cat("\n\n")
1470849813193:print(head(pagedata))
1470849813195:cat("\n")
1470849813203:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1470849813206:break
1470849813209:} else {
1470849813211:}
1470849882050:## Facebook Query Injector #####
1470849882050:## Mirum Agency ################
1470849882053:## By Vivek Menon ##############
1470849882053:## v.1.5.0 #####################
1470849882054:# Summary -----------------------------------------------------------------
1470849882054:# Todo --------------------------------------------------------------------
1470849882055:# - Run script for all major brands
1470849882055:# - Create 'participation rate' function
1470849882055:# - Incorporate Twitter
1470849882055:# Setup -------------------------------------------------------------------
1470849882055:# Load and install all necessary packages for the script
1470849882056:# Required Packages for dataframes, forecasting, graphical visualization, and development
1470849882056:# Use 'install.packages()' if unavailable.
1470849882056:#library(zoo)
1470849882056:#library(forecast)
1470849882057:library(ggplot2)
1470849882057:#library(scales)
1470849882057:library(devtools)
1470849882058:library(compare)
1470849882058:library(xlsx)
1470849882058:require(httr)
1470849882059:require(rjson)
1470849882060:require(RCurl)
1470849882061:# Pull most up to date Github repositories for relevant packages
1470849882063:# Not frequently updated; does not need to be run every time.
1470849882064:#install_github("pablobarbera/Rfacebook/Rfacebook")
1470849882067:#install_github("pablobarbera/instaR/instaR")
1470849882068:# Required packags for plugging into Facebook API
1470849882068:#library(twitteR)
1470849882072:library(Rfacebook)
1470849882075:#library(instaR)
1470849882076:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1470849882080:# https://instagram.com/developer/authentication/?hl=en
1470849882082:#setwd("~/Desktop/TWE/Monthly Reports/June 2015")
1470849882083:setwd("~/")
1470849882086:getwd()
1470849882087:# Functions ---------------------------------------------------------------
1470849882090:# User Functions
1470849882090:# Function to convert Facebook date format to R date format
1470849882094:format.facebook.date <- function(datestring) {
1470849882100:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470849882100:}
1470849882103:# Shift a vector up by an amount
1470849882103:shift <- function(x, n){
1470849882106:c(x[-(seq(n))], rep(NA, n))
1470849882106:}
1470849882110:# Get gcd from vector
1470849882110:gcd <- function(x,y) {
1470849882113:r <- x%%y;
1470849882116:return(ifelse(r, gcd(y, r), y))
1470849882116:}
1470849882122:# Inputs ------------------------------------------------------------------
1470849882122:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1470849882125:# Define data range for data (2012 is out of bounds for some metrics)
1470849882125:# http://thinktostart.com/analyzing-facebook-with-r/
1470849882128:fb_oauth <- fbOAuth(app_id="955460364539237", app_secret="0a3e6943c90510dc158fc7683e560f7d",extended_permissions = FALSE)
1470849884481:posts <- 2000
1470849884481:roof = Sys.Date() #"2015-12-31"
1470849884483:floor = "2016-05-15" #"2015-05-01"
1470849884483:range = seq(as.Date(floor), as.Date(roof), by="days")
1470849884484:## Access ftoken
1470849884485:# Use token from Facebook Graph API
1470849884485:# token generated here: https://developers.facebook.com/tools/explorer
1470849884485:# Lasts two hours, and must be changed depending on page and permissions
1470849884486:ftokens <- c(
1470849884486:#Sledgehammer Wine
1470849884486:#"CAACEdEose0cBAAaqv8JuC9FYYF2JZBzCDyJSrZB5aXhCMHeZAYjdcRkoOyZBHAqNdsSAVnmf63EyT3ZB6pcBZAIcPxcDCQCAXFE1ER62zJDC9tMF6AC5IvTXczksCjh9HocfSBYA1qjER8wsoFvPUF1B9f4mMhNrnAPWRZADbliPBRDTh0D2qF72LAPwZCsfw3UZD"
1470849884486:#Chateau Saint Jean
1470849884487:#"EAACEdEose0cBAOwwfrVCmYxjRlHVlMDJAjtEJkfMZBkWVsQbDGv0eXi50MZCc4F2i33vbhmJ6823oIzAbhezsZAkqchpPpYaiB8XzcfZBKS2jSXE22EY1e855OvkfgFyjKPiOPOjOZAQIbDiJg1tHCMMLVjUlwPcoKGBEexWbGQZDZD"
1470849884487:#19 Crimes
1470849884487:#,"EAACEdEose0cBANCXTZAFtviL9VEUq4DhkEwMyzqdmWgZBh68EReZAIEOVBYlTSiS52swRACvjhybfPQGFqEOmJp0OjTSPQ9ZC01R6nxViJ5xDHXPlDCwnnXOBObHYwZAXhQzy52kL3FZA3WcHNrGNIqfJZC9MZCJPkkfXHpVsx3PHQZDZD"
1470849884487:#Beringer Vneyards
1470849884488:#,"EAACEdEose0cBAAfj1KkrLbPzVw0v5gul87LeUeoXUHnN6rlxrVRklAgg214vFGLkQTKeLHEUWDGg9ZBVeTDRQdOietA25FLcAaQCGiKvmLFv3ZAYnMpLg9YKnpNpazKjXKwWpkXZBdjuKB7Ql6JKu4Q8pNOZCk97LWSwW4U8vgZDZD"
1470849884488:#100% Canadian Milk
1470849884488:#"EAACEdEose0cBAK7Hbibie8kWBzeZBqevx9FEVIgUecHAXLLMZAyR974zvJIf2I3LgxiR05o4gZCm7PkRfvSvVCLhtR98AeVBjSZB9A8Ym6KeJSXhmetOFzjaaFxjVJBZBaVxvNQaTQZCxCgfIZCBl7AZCuSx0tSV1b9ZCUGdBj7OUZAAZDZD"
1470849884488:#Lait 100% Canadien
1470849884489:#,"EAACEdEose0cBAMZB9OeGbItotQXru0sp1vggahZCvZCDQvZAQeskIsZC2713k83AAE5fwZBV5UPAoYgk1NIAi64MgHjSLb362JomROuLuBZB2i9OJoPZC0664EuZBpjSMJEDqtdcvJfvlZAFX9TWPeItEEPdR81KfzSGJJ2l8MeDL1pwZDZD"
1470849884489:#Recharge with Milk
1470849884489:#,"CAACEdEose0cBAJ9NPmffbszUQ1HYObOGqdht5XWBoU7zABLhgZB6L53eyqVrt0CPxkZAXQpI0fGW7FHucQ0LgGtmRRlWP6eAQgZBSa6oaRibk9qZAp0xVGZCr4B6AdysmfVlbZCFjoZBYZCJ3sxN1yMdL5jz6yCWOZAAbAv00nXq5wURrgCUe3dXZAZBF2COnBm9YxXk5vFoWWJkQZDZD"
1470849884490:#BaronSamedi
1470849884490:"EAANkZCHOgFWUBAHaWKdF0oFQrEW1ncmqdZBH064po1PJfWbJZAzIDhJ0z7n2ma06aogrSuA6QUZClnQ4sCRH6YX0O00AuQzEFgvMXYZAD25qZBhDiCp4LW59qZApQZAd6SQlf0sP3ZATCyOM3ToFCxFiMXZCG6AKbHDrqPBxFRxmFFDQZDZD"
1470849884491:)
1470849884492:totalpagedata <- data.frame()
1470849884492:totalpostdata <- data.frame()
1470849884499:for (brand in 1:length(ftokens)) {
1470849884499:ftoken <- ftokens[brand]
1470849884502:## User Id
1470849884503:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1470849884505:userid = "10153046308598756"
1470849884506:# Access public personal data; basically a ftoken test
1470849884506:me <- getUsers("me", token=ftoken)
1470849884507:print(me$name)
1470849884508:## Page Id
1470849884508:# Define which page will be used for the data collection. Change id's as necessary.
1470849884509:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1470849884509:pageid = me$id
1470849884511:# Acquisition -------------------------------------------------------------
1470849884511:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1470849884512:page <- getPage(pageid, ftoken, n = posts)
1470849884512:page.store <- page
1470849884513:# Create new vectors in dataset with datetime, month, and day formattiong
1470849884514:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470849884514:page$datetime <- format.facebook.date(page$created_time)
1470849884514:page$month <- format(page$datetime, "%Y-%m")
1470849884515:page$day <- format(page$datetime, "%Y-%m-%d")
1470849884516:page$datetime <- as.Date(page$datetime)
1470849884516:#page$month <- as.Date(page$month)
1470849884519:page$day <- as.Date(page$day)
1470849884520:} else {
1470849884520:print("Date fields already exist.")
1470849884521:}
1470849884522:# Processing --------------------------------------------------------------
1470849884522:# Process data to clean dataset and augment it with more data than default fields.
1470849884525:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1470849884528:## Cleaning =================================
1470849884531:# Page and Post Datasets
1470849884532:# Split dataset into two for pages and post data
1470849884535:# Create initial null sets
1470849884535:pagedata <- 0
1470849884536:postdata <- 0
1470849884537:## Appending =================================
1470849884538:### Page Metrics #############################
1470849884541:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1470849884542:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1470849884543:# Page Metrics to automatically pull
1470849884543:# "page_fans_online" ,"page_fans_gender_age", "page_positive_feedback_by_type"
1470849884546:metrics = c("page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions") #c(
1470849884547:names(metrics) = c("Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions")
1470849884551:pagemetrics <- metrics
1470849884553:# Prep dataset by breaking into weeks
1470849884553:pagedata <- 0
1470849884554:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1470849884556:colnames(pagedata) = c("pageid", "page", "date")
1470849884558:pagedata$page = page$from_name[1]
1470849884559:pagedata$pageid = page$from_id[1]
1470849884570:divisor = 5
1470849884571:remainder = length(range)%%divisor;
1470849884574:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1470849884575:weeks <- (nrow(pagedata)/5)-2
1470849884579:# Start Data Acquisition Loop
1470849884579:for (metric in 1:length(metrics)) {
1470849884583:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1470849884584:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1470849884586:period = 'lifetime'
1470849884587:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1470849884587:period = 'day'
1470849884588:tempfloor = "2014-02-01"
1470849884589:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1470849884590:if (floor < tempfloor) {
1470849884592:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1470849884593:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1470849884596:weeks = tempweeks
1470849884598:} else {}
1470849884600:} else {
1470849884602:period = 'day'
1470849884603:weeks <- (nrow(pagedata)/5)-2
1470849884607:}
1470849884610:hold <- matrix(0, nrow=0, ncol=7)
1470849884612:for (week in 0:weeks) {
1470849884613:end <- pagedata$date[(week*5)+1]
1470849884615:start <- pagedata$date[((week+1)*5)+1]
1470849884619:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1470849884621:pull <- NULL
1470849884623:attempt <- 1
1470849884625:while(is.null(pull) && attempt <= 10) {
1470849884628:attempt <- attempt + 1
1470849884629:try(
1470849884633:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1470849884634:)
1470849884636:if (is.null(pull)) {
1470849884638:print("Empty Pull. Re-attempting.")
1470849884639:print(paste("Attempt", attempt))
1470849884643:} else {
1470849884644:pull$datetime <- format.facebook.date(pull$end_time)
1470849884646:pull$day <- format(pull$datetime, "%Y-%m-%d")
1470849884649:pull$datetime <- as.Date(pull$datetime)
1470849884650:#page$month <- as.Date(page$month)
1470849884653:pull$day <- as.Date(pull$day)
1470849884656:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1470849884657:print("Found Facebook data matching date range. Storing values.")
1470849884658:} else {
1470849884662:print("Did not find Facebook data matching dataset dates. Re-querying.")
1470849884663:print(paste("Attempt", attempt))
1470849884667:pull <- NULL}
1470849884669:if (attempt > 100) {
1470849884671:print('Too many attempts. Skipping.')
1470849884672:pull <- NULL
1470849884675:break
1470849884677:} else {}
1470849884679:}
1470849884681:pulllength <- ncol(pull)
1470849884683:rpull = pull[rev(rownames(pull)),]
1470849884685:hold <- rbind(hold,rpull)
1470849884686:rawhold <- hold
1470849884689:}
1470849884695:rhold = hold[rev(rownames(hold)),]
1470849884696:rhold$value = shift(rhold$value, 1)
1470849884700:hold = rhold[rev(rownames(rhold)),]
1470849884702:hold$value[1] = rawhold$value[1]
1470849884704:hours <- seq(0,23)
1470849884705:names(hours) <- paste("Hour", hours)
1470849884708:subtypes <- c('link','comment', 'like')
1470849884709:names(subtypes) <- c('Shares','Comments', 'Likes')
1470849884714:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24")
1470849884716:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24")
1470849884718:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1470849884721:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1470849884724:for (type in 1:length(subtypes)) {
1470849884727:typehold <- NA
1470849884729:typehold <- hold[hold$variable == subtypes[type],]
1470849884731:pagedata <- cbind(NA,pagedata)
1470849884734:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849884736:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1470849884739:metrics <- c(metrics,subtypes[type])
1470849884741:}
1470849884747:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1470849884750:for (demographic in 1:length(demographics)) {
1470849884753:print(names(demographics[demographic]))
1470849884756:typehold <- NA
1470849884757:typehold <- hold[hold$variable == demographics[demographic],]
1470849884762:typehold[typehold$value <= 10,] <- NA
1470849884766:pagedata <- cbind(NA,pagedata)
1470849884767:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849884770:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1470849884773:metrics <- c(metrics,demographics[demographic])
1470849884774:}
1470849884777:} else if ((metrics)[metric] == 'page_fans_online') {
1470849884782:for (hour in 1:length(hours)) {
1470849884786:typehold <- NA
1470849884788:typehold <- hold[hold$variable == hours[hour],]
1470849884790:pagedata <- cbind(NA,pagedata)
1470849884793:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470849884796:colnames(pagedata)[1] = paste("hour",hours[hour])
1470849884799:metrics <- c(metrics,hours[hour])
1470849884801:}
1470849884803:} else {
1470849884805:pagedata <- cbind(NA,pagedata)
1470849884807:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1470849884809:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1470849884813:}
1470849884817:cat("\n\n")
1470849884821:print(head(pagedata))
1470849884823:cat("\n")
1470849884826:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1470849884839:break
1470849884842:} else {
1470849884848:}
1470849884865:pagedata.tempstore <- pagedata
1470849884872:#Page Metrics to remove because they have subtypes
1470849884875:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1470849884888:# Page Metrics to manually create
1470849884890:metrics <- c(metrics,"organic reach")
1470849884894:names(metrics)[length(metrics)] <- c("Organic Reach")
1470849884905:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1470849884933:colnames(pagedata)[1] = "organic reach"
1470849884938:# Final dataset formatting
1470849884940:pagedatastore <- pagedata
1470849884955:#pagedata <- pagedatastore
1470849884963:pagedata2 <- pagedata
1470849884980:# reorder and null NA's for excel
1470849884987:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1470849884990:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1470849884997:#pagedata2[is.na(pagedata2)] <- ""
1470849885004:#pagedata2[pagedata2 == 0] <- ""
1470849885007:# store final dataset
1470849885012:pagedata <- pagedata2
1470849885019:### Post Metrics #############################
1470849885021:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1470849885023:# Most are automated, and will continue to retry through errors until a value is found.
1470849885027:# Manual modifications are run after initial data acquisition.
1470849885033:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1470849885036:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1470849885041:# Populate sets with values from pull
1470849885047:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470849885049:page$datetime <- format.facebook.date(page$created_time)
1470849885051:page$month <- format(page$datetime, "%Y-%m")
1470849885055:page$day <- format(page$datetime, "%Y-%m-%d")
1470849885058:page$datetime <- as.Date(page$datetime)
1470849885064:#page$month <- as.Date(page$month)
1470849885068:page$day <- as.Date(page$day)
1470849885069:} else {
1470849885071:print("Date fields already exist for Post Data.")
1470849885074:}
1470849885087:postdata <- 0
1470849885090:postdata <- page[page$day > floor,]
1470849885095:postdata <- postdata[postdata$day < roof,]
1470849885106:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1470849885121:# Name column for usability
1470849885126:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1470849885137:rows <- nrow(postdata)
1470849885139:lpostmetrics <- postmetrics
1470849885144:testlength <- 2
1470849885147:#length(postmetrics) instead of testlength; swapped out for hotfixes
1470849885160:for (pmetric in 1:length(postmetrics)) {
1470849885166:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1470849885176:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1470849885180:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1470849885185:names(phold) <- c("id","name","period","title","description","value","variable")
1470849885187:} else {
1470849885192:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1470849885195:names(phold) <- c("id","name","period","title","description","value")
1470849885197:}
1470849885211:for (post in 1:nrow(postdata)) {
1470849885220:period <- "lifetime"
1470849885301:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1470849885313:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1470849885318:print('Not a Facebook Video.')
1470849885322:phold <- rbind(phold, NA)
1470849885330:next()
1470849885335:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1470849885345:} else {
1470849885352:}
1470849885370:postpull <- NULL
1470849885373:attempt <- 1
1470849885384:while( is.null(postpull) && attempt <= 100) {
1470849885388:attempt <- attempt + 1
1470849885391:try(
1470849885397:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1470849885401:,silent=TRUE
1470849885403:)
1470849885406:if (attempt > 10) {
1470849885408:print('Too many attempts. Skipping.')
1470849885413:postpull <- NULL
1470849885415:break
1470849885417:} else {
1470849885420:}
1470849885429:colnames(phold) <- names(postpull)
1470849885431:phold <- rbind(phold, postpull)
1470849885437:}
1470849885440:pholdstore <- phold
1470849885446:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1470849885449:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1470849885456:phold <- phold[-1,]
1470849885464:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1470849885469:postmetrics <- postmetrics[-pmetric]
1470849885472:pmetric <- pmetric + 1
1470849885476:for (ptype in (1:length(psubtypes))) {
1470849885481:ptyphehold <- NA
1470849885483:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1470849885488:postdata <- cbind(NA,postdata)
1470849885491:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1470849885498:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1470849885503:postmetrics <- c(postmetrics,psubtypes[ptype])
1470849885506:}
1470849885514:} else {
1470849885521:postdata <- cbind(NA,postdata)
1470849885528:postdata[1:length(phold$value),1] <- phold$value
1470849885537:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1470849885540:}
1470849885552:cat("\n\n")
1470849885557:print(head(postdata))
1470849885563:cat("\n")
1470849885583:}
1470849885603:postdatastore <- postdata
1470849885646:# Post Metrics to manually create
1470849885675:postmetrics <- c(postmetrics,"organic reach")
1470849885688:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1470849885707:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1470849885723:colnames(postdata)[1] = "organic reach"
1470849885741:# Final dataset formatting
1470849885749:#postdatastore <- postdata
1470849885769:#postdata <- postdatastore
1470849885792:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1470849885807:# reorder and null NA's for Excel
1470849885813:postdata2 <- postdata
1470849885816:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1470849885824:postdata2[is.na(postdata2)] <- ""
1470849885835:postdata2[postdata2 == 0] <- ""
1470849885842:# store final dataset
1470849885851:postdata <- as.data.frame(postdata2)
1470849885863:# Outputs -----------------------------------------------------------------
1470849885881:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1470849885884:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1470849885891:datafolder <- "Data"
1470849885900:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470849885909:# Rename columns for Excel readability
1470849885915:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1470849885917:# output Page dataset as final csv
1470849885921:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1470849885925:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470849885932:?wri
1470849885938:# Rename columns for Excel readability
1470849885949:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470849885957:# output Post dataset as final Excel
1470849885967:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470849885970:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470849885977:# Raw Data
1470849885984:# output dataset as raw csv
1470849885990:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470849886014:totalpagedata <- rbind(totalpagedata, pagedata)
1470849886018:totalpostdata <- rbind(totalpostdata, postdata)
1470849886030:}
1470849911312:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470849911349:# Rename columns for Excel readability
1470849911350:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470849911350:# output Post dataset as final Excel
1470849911351:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470849911351:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470849911384:# Images
1470849911386:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1470849911387:#for (picture in (1:nrow(postdata))) {
1470849911394:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1470849911401:#
1470849911401:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1470849911404:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1470849911405:#
1470849911406:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1470849911412:# Edit the core program and change feedback loop.
1470849911413:#
1470849911413:#}
1470849950212:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1470849950213:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1470849950215:# Populate sets with values from pull
1470849950215:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470849950218:page$datetime <- format.facebook.date(page$created_time)
1470849950220:page$month <- format(page$datetime, "%Y-%m")
1470849950222:page$day <- format(page$datetime, "%Y-%m-%d")
1470849950223:page$datetime <- as.Date(page$datetime)
1470849950226:#page$month <- as.Date(page$month)
1470849950227:page$day <- as.Date(page$day)
1470849950230:} else {
1470849950230:print("Date fields already exist for Post Data.")
1470849950234:}
1470849950235:postdata <- 0
1470849950237:postdata <- page[page$day > floor,]
1470849950238:postdata <- postdata[postdata$day < roof,]
1470849950239:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1470849950242:# Name column for usability
1470849950242:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1470849950246:rows <- nrow(postdata)
1470849950246:lpostmetrics <- postmetrics
1470849950250:testlength <- 2
1470849950251:#length(postmetrics) instead of testlength; swapped out for hotfixes
1470849953860:for (pmetric in 1:length(postmetrics)) {
1470849953860:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1470849953862:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1470849953863:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1470849953863:names(phold) <- c("id","name","period","title","description","value","variable")
1470849953863:} else {
1470849953863:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1470849953864:names(phold) <- c("id","name","period","title","description","value")
1470849953864:}
1470849953865:for (post in 1:nrow(postdata)) {
1470849953865:period <- "lifetime"
1470849953869:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1470849953870:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1470849953872:print('Not a Facebook Video.')
1470849953873:phold <- rbind(phold, NA)
1470849953877:next()
1470849953879:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1470849953880:} else {
1470849953881:}
1470849953885:postpull <- NULL
1470849953886:attempt <- 1
1470849953889:while( is.null(postpull) && attempt <= 100) {
1470849953891:attempt <- attempt + 1
1470849953892:try(
1470849953893:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1470849953894:,silent=TRUE
1470849953895:)
1470849953898:if (attempt > 10) {
1470849953899:print('Too many attempts. Skipping.')
1470849953902:postpull <- NULL
1470849953903:break
1470849953912:} else {
1470849953914:}
1470849953917:colnames(phold) <- names(postpull)
1470849953919:phold <- rbind(phold, postpull)
1470849953922:}
1470849953923:pholdstore <- phold
1470849953927:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1470849953928:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1470849953930:phold <- phold[-1,]
1470849953933:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1470849953943:postmetrics <- postmetrics[-pmetric]
1470849953945:pmetric <- pmetric + 1
1470849953948:for (ptype in (1:length(psubtypes))) {
1470849953949:ptyphehold <- NA
1470849953954:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1470849953956:postdata <- cbind(NA,postdata)
1470849953958:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1470849953962:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1470849953964:postmetrics <- c(postmetrics,psubtypes[ptype])
1470849953966:}
1470849953970:} else {
1470849953972:postdata <- cbind(NA,postdata)
1470849953974:postdata[1:length(phold$value),1] <- phold$value
1470849953975:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1470849953978:}
1470849953982:cat("\n\n")
1470849953983:print(head(postdata))
1470849953986:cat("\n")
1470849953988:}
1470849954365:postdatastore <- postdata
1470849968889:phold
1470849975033:pmetric
1470849979335:(postmetrics)postmetrics)
1470849981279:postmetrics
1470849984113:postmetrics[pmetric]
1470849998900:tInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1470850001052:gettInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1470850004186:getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1470850015658:(Sys.Date() - since_date > 365 * 2)
1470850035462:install.packages('Rfacebook')
1470850044899:install.packages("Rfacebook")
1470850055535:install.packages('Rfacebook')
1470850086284:library(Rfacebook)
1470850091991:.com/developer/authentication/?hl=en
1470850091992:#setwd("~/Desktop/TWE/Monthly Reports/June 2015")
1470850091994:setwd("~/")
1470850091994:getwd()
1470850091994:# Functions ---------------------------------------------------------------
1470850091995:# User Functions
1470850091998:# Function to convert Facebook date format to R date format
1470850091998:format.facebook.date <- function(datestring) {
1470850091998:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470850091999:}
1470850092000:# Shift a vector up by an amount
1470850092003:shift <- function(x, n){
1470850092003:c(x[-(seq(n))], rep(NA, n))
1470850092004:}
1470850092005:# Get gcd from vector
1470850092008:gcd <- function(x,y) {
1470850092008:r <- x%%y;
1470850092011:return(ifelse(r, gcd(y, r), y))
1470850092011:}
1470850092012:# Inputs ------------------------------------------------------------------
1470850092012:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1470850092016:# Define data range for data (2012 is out of bounds for some metrics)
1470850092016:# http://thinktostart.com/analyzing-facebook-with-r/
1470850092019:fb_oauth <- fbOAuth(app_id="955460364539237", app_secret="0a3e6943c90510dc158fc7683e560f7d",extended_permissions = FALSE)
1470850100242:posts <- 2000
1470850100242:roof = Sys.Date() #"2015-12-31"
1470850100244:floor = "2016-05-15" #"2015-05-01"
1470850100244:range = seq(as.Date(floor), as.Date(roof), by="days")
1470850100249:## Access ftoken
1470850100249:# Use token from Facebook Graph API
1470850100251:# token generated here: https://developers.facebook.com/tools/explorer
1470850100252:# Lasts two hours, and must be changed depending on page and permissions
1470850100252:ftokens <- c(
1470850100252:#Sledgehammer Wine
1470850100253:#"CAACEdEose0cBAAaqv8JuC9FYYF2JZBzCDyJSrZB5aXhCMHeZAYjdcRkoOyZBHAqNdsSAVnmf63EyT3ZB6pcBZAIcPxcDCQCAXFE1ER62zJDC9tMF6AC5IvTXczksCjh9HocfSBYA1qjER8wsoFvPUF1B9f4mMhNrnAPWRZADbliPBRDTh0D2qF72LAPwZCsfw3UZD"
1470850100254:#Chateau Saint Jean
1470850100254:#"EAACEdEose0cBAOwwfrVCmYxjRlHVlMDJAjtEJkfMZBkWVsQbDGv0eXi50MZCc4F2i33vbhmJ6823oIzAbhezsZAkqchpPpYaiB8XzcfZBKS2jSXE22EY1e855OvkfgFyjKPiOPOjOZAQIbDiJg1tHCMMLVjUlwPcoKGBEexWbGQZDZD"
1470850100257:#19 Crimes
1470850100257:#,"EAACEdEose0cBANCXTZAFtviL9VEUq4DhkEwMyzqdmWgZBh68EReZAIEOVBYlTSiS52swRACvjhybfPQGFqEOmJp0OjTSPQ9ZC01R6nxViJ5xDHXPlDCwnnXOBObHYwZAXhQzy52kL3FZA3WcHNrGNIqfJZC9MZCJPkkfXHpVsx3PHQZDZD"
1470850100258:#Beringer Vneyards
1470850100258:#,"EAACEdEose0cBAAfj1KkrLbPzVw0v5gul87LeUeoXUHnN6rlxrVRklAgg214vFGLkQTKeLHEUWDGg9ZBVeTDRQdOietA25FLcAaQCGiKvmLFv3ZAYnMpLg9YKnpNpazKjXKwWpkXZBdjuKB7Ql6JKu4Q8pNOZCk97LWSwW4U8vgZDZD"
1470850100259:#100% Canadian Milk
1470850100260:#"EAACEdEose0cBAK7Hbibie8kWBzeZBqevx9FEVIgUecHAXLLMZAyR974zvJIf2I3LgxiR05o4gZCm7PkRfvSvVCLhtR98AeVBjSZB9A8Ym6KeJSXhmetOFzjaaFxjVJBZBaVxvNQaTQZCxCgfIZCBl7AZCuSx0tSV1b9ZCUGdBj7OUZAAZDZD"
1470850100261:#Lait 100% Canadien
1470850100264:#,"EAACEdEose0cBAMZB9OeGbItotQXru0sp1vggahZCvZCDQvZAQeskIsZC2713k83AAE5fwZBV5UPAoYgk1NIAi64MgHjSLb362JomROuLuBZB2i9OJoPZC0664EuZBpjSMJEDqtdcvJfvlZAFX9TWPeItEEPdR81KfzSGJJ2l8MeDL1pwZDZD"
1470850100264:#Recharge with Milk
1470850100267:#,"CAACEdEose0cBAJ9NPmffbszUQ1HYObOGqdht5XWBoU7zABLhgZB6L53eyqVrt0CPxkZAXQpI0fGW7FHucQ0LgGtmRRlWP6eAQgZBSa6oaRibk9qZAp0xVGZCr4B6AdysmfVlbZCFjoZBYZCJ3sxN1yMdL5jz6yCWOZAAbAv00nXq5wURrgCUe3dXZAZBF2COnBm9YxXk5vFoWWJkQZDZD"
1470850100268:#BaronSamedi
1470850100271:"EAANkZCHOgFWUBAHaWKdF0oFQrEW1ncmqdZBH064po1PJfWbJZAzIDhJ0z7n2ma06aogrSuA6QUZClnQ4sCRH6YX0O00AuQzEFgvMXYZAD25qZBhDiCp4LW59qZApQZAd6SQlf0sP3ZATCyOM3ToFCxFiMXZCG6AKbHDrqPBxFRxmFFDQZDZD"
1470850100272:)
1470850100279:totalpagedata <- data.frame()
1470850100281:totalpostdata <- data.frame()
1470850106608:for (brand in 1:length(ftokens)) {
1470850106608:ftoken <- ftokens[brand]
1470850106612:## User Id
1470850106613:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1470850106614:userid = "10153046308598756"
1470850106615:# Access public personal data; basically a ftoken test
1470850106615:me <- getUsers("me", token=ftoken)
1470850106620:print(me$name)
1470850106623:## Page Id
1470850106624:# Define which page will be used for the data collection. Change id's as necessary.
1470850106626:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1470850106627:pageid = me$id
1470850106628:# Acquisition -------------------------------------------------------------
1470850106630:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1470850106631:page <- getPage(pageid, ftoken, n = posts)
1470850106636:page.store <- page
1470850106638:# Create new vectors in dataset with datetime, month, and day formattiong
1470850106639:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470850106642:page$datetime <- format.facebook.date(page$created_time)
1470850106642:page$month <- format(page$datetime, "%Y-%m")
1470850106647:page$day <- format(page$datetime, "%Y-%m-%d")
1470850106649:page$datetime <- as.Date(page$datetime)
1470850106650:#page$month <- as.Date(page$month)
1470850106653:page$day <- as.Date(page$day)
1470850106653:} else {
1470850106656:print("Date fields already exist.")
1470850106656:}
1470850106657:# Processing --------------------------------------------------------------
1470850106658:# Process data to clean dataset and augment it with more data than default fields.
1470850106661:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1470850106662:## Cleaning =================================
1470850106665:# Page and Post Datasets
1470850106666:# Split dataset into two for pages and post data
1470850106669:# Create initial null sets
1470850106672:pagedata <- 0
1470850106672:postdata <- 0
1470850106677:## Appending =================================
1470850106678:### Page Metrics #############################
1470850106680:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1470850106686:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1470850106691:# Page Metrics to automatically pull
1470850106691:# "page_fans_online" ,"page_fans_gender_age", "page_positive_feedback_by_type"
1470850106695:metrics = c("page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions") #c(
1470850106696:names(metrics) = c("Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions")
1470850106700:pagemetrics <- metrics
1470850106704:# Prep dataset by breaking into weeks
1470850106705:pagedata <- 0
1470850106706:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1470850106708:colnames(pagedata) = c("pageid", "page", "date")
1470850106709:pagedata$page = page$from_name[1]
1470850106712:pagedata$pageid = page$from_id[1]
1470850106714:divisor = 5
1470850106716:remainder = length(range)%%divisor;
1470850106718:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1470850106721:weeks <- (nrow(pagedata)/5)-2
1470850106723:# Start Data Acquisition Loop
1470850106724:for (metric in 1:length(metrics)) {
1470850106728:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1470850106730:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1470850106731:period = 'lifetime'
1470850106733:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1470850106738:period = 'day'
1470850106740:tempfloor = "2014-02-01"
1470850106743:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1470850106746:if (floor < tempfloor) {
1470850106748:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1470850106749:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1470850106751:weeks = tempweeks
1470850106754:} else {}
1470850106756:} else {
1470850106757:period = 'day'
1470850106760:weeks <- (nrow(pagedata)/5)-2
1470850106761:}
1470850106768:hold <- matrix(0, nrow=0, ncol=7)
1470850106770:for (week in 0:weeks) {
1470850106773:end <- pagedata$date[(week*5)+1]
1470850106774:start <- pagedata$date[((week+1)*5)+1]
1470850106778:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1470850106781:pull <- NULL
1470850106784:attempt <- 1
1470850106786:while(is.null(pull) && attempt <= 10) {
1470850106788:attempt <- attempt + 1
1470850106789:try(
1470850106790:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1470850106790:)
1470850106792:if (is.null(pull)) {
1470850106797:print("Empty Pull. Re-attempting.")
1470850106799:print(paste("Attempt", attempt))
1470850106801:} else {
1470850106802:pull$datetime <- format.facebook.date(pull$end_time)
1470850106808:pull$day <- format(pull$datetime, "%Y-%m-%d")
1470850106812:pull$datetime <- as.Date(pull$datetime)
1470850106814:#page$month <- as.Date(page$month)
1470850106816:pull$day <- as.Date(pull$day)
1470850106821:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1470850106822:print("Found Facebook data matching date range. Storing values.")
1470850106826:} else {
1470850106831:print("Did not find Facebook data matching dataset dates. Re-querying.")
1470850106836:print(paste("Attempt", attempt))
1470850106838:pull <- NULL}
1470850106841:if (attempt > 100) {
1470850106844:print('Too many attempts. Skipping.')
1470850106847:pull <- NULL
1470850106851:break
1470850106854:} else {}
1470850106858:}
1470850106863:pulllength <- ncol(pull)
1470850106869:rpull = pull[rev(rownames(pull)),]
1470850106874:hold <- rbind(hold,rpull)
1470850106878:rawhold <- hold
1470850106881:}
1470850106894:rhold = hold[rev(rownames(hold)),]
1470850106897:rhold$value = shift(rhold$value, 1)
1470850106904:hold = rhold[rev(rownames(rhold)),]
1470850106907:hold$value[1] = rawhold$value[1]
1470850106918:hours <- seq(0,23)
1470850106922:names(hours) <- paste("Hour", hours)
1470850106929:subtypes <- c('link','comment', 'like')
1470850106937:names(subtypes) <- c('Shares','Comments', 'Likes')
1470850106943:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24")
1470850106945:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24")
1470850106952:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1470850106959:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1470850106974:for (type in 1:length(subtypes)) {
1470850106978:typehold <- NA
1470850106980:typehold <- hold[hold$variable == subtypes[type],]
1470850106989:pagedata <- cbind(NA,pagedata)
1470850106992:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470850106994:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1470850107004:metrics <- c(metrics,subtypes[type])
1470850107007:}
1470850107014:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1470850107020:for (demographic in 1:length(demographics)) {
1470850107025:print(names(demographics[demographic]))
1470850107030:typehold <- NA
1470850107034:typehold <- hold[hold$variable == demographics[demographic],]
1470850107037:typehold[typehold$value <= 10,] <- NA
1470850107047:pagedata <- cbind(NA,pagedata)
1470850107056:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470850107059:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1470850107072:metrics <- c(metrics,demographics[demographic])
1470850107077:}
1470850107083:} else if ((metrics)[metric] == 'page_fans_online') {
1470850107091:for (hour in 1:length(hours)) {
1470850107096:typehold <- NA
1470850107098:typehold <- hold[hold$variable == hours[hour],]
1470850107102:pagedata <- cbind(NA,pagedata)
1470850107105:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470850107108:colnames(pagedata)[1] = paste("hour",hours[hour])
1470850107114:metrics <- c(metrics,hours[hour])
1470850107117:}
1470850107120:} else {
1470850107123:pagedata <- cbind(NA,pagedata)
1470850107124:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1470850107129:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1470850107135:}
1470850107140:cat("\n\n")
1470850107142:print(head(pagedata))
1470850107144:cat("\n")
1470850107148:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1470850107153:break
1470850107156:} else {
1470850107158:}
1470850107169:pagedata.tempstore <- pagedata
1470850107176:#Page Metrics to remove because they have subtypes
1470850107178:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1470850107186:# Page Metrics to manually create
1470850107187:metrics <- c(metrics,"organic reach")
1470850107189:names(metrics)[length(metrics)] <- c("Organic Reach")
1470850107192:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1470850107194:colnames(pagedata)[1] = "organic reach"
1470850107201:# Final dataset formatting
1470850107203:pagedatastore <- pagedata
1470850107204:#pagedata <- pagedatastore
1470850107206:pagedata2 <- pagedata
1470850107212:# reorder and null NA's for excel
1470850107217:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1470850107222:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1470850107225:#pagedata2[is.na(pagedata2)] <- ""
1470850107229:#pagedata2[pagedata2 == 0] <- ""
1470850107236:# store final dataset
1470850107240:pagedata <- pagedata2
1470850107245:### Post Metrics #############################
1470850107247:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1470850107250:# Most are automated, and will continue to retry through errors until a value is found.
1470850107254:# Manual modifications are run after initial data acquisition.
1470850107258:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1470850107260:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1470850107263:# Populate sets with values from pull
1470850107290:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470850107292:page$datetime <- format.facebook.date(page$created_time)
1470850107295:page$month <- format(page$datetime, "%Y-%m")
1470850107297:page$day <- format(page$datetime, "%Y-%m-%d")
1470850107304:page$datetime <- as.Date(page$datetime)
1470850107306:#page$month <- as.Date(page$month)
1470850107316:page$day <- as.Date(page$day)
1470850107320:} else {
1470850107324:print("Date fields already exist for Post Data.")
1470850107326:}
1470850107335:postdata <- 0
1470850107338:postdata <- page[page$day > floor,]
1470850107342:postdata <- postdata[postdata$day < roof,]
1470850107346:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1470850107355:# Name column for usability
1470850107357:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1470850107360:rows <- nrow(postdata)
1470850107362:lpostmetrics <- postmetrics
1470850107369:testlength <- 2
1470850107372:#length(postmetrics) instead of testlength; swapped out for hotfixes
1470850107385:for (pmetric in 1:length(postmetrics)) {
1470850107388:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1470850107392:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1470850107394:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1470850107399:names(phold) <- c("id","name","period","title","description","value","variable")
1470850107402:} else {
1470850107404:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1470850107406:names(phold) <- c("id","name","period","title","description","value")
1470850107410:}
1470850107417:for (post in 1:nrow(postdata)) {
1470850107422:period <- "lifetime"
1470850107429:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1470850107435:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1470850107437:print('Not a Facebook Video.')
1470850107439:phold <- rbind(phold, NA)
1470850107443:next()
1470850107445:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1470850107447:} else {
1470850107451:}
1470850107458:postpull <- NULL
1470850107463:attempt <- 1
1470850107471:while( is.null(postpull) && attempt <= 100) {
1470850107473:attempt <- attempt + 1
1470850107476:try(
1470850107478:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1470850107481:,silent=TRUE
1470850107485:)
1470850107488:if (attempt > 10) {
1470850107490:print('Too many attempts. Skipping.')
1470850107492:postpull <- NULL
1470850107495:break
1470850107499:} else {
1470850107503:}
1470850107516:colnames(phold) <- names(postpull)
1470850107519:phold <- rbind(phold, postpull)
1470850107522:}
1470850107525:pholdstore <- phold
1470850107531:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1470850107535:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1470850107539:phold <- phold[-1,]
1470850107546:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1470850107552:postmetrics <- postmetrics[-pmetric]
1470850107554:pmetric <- pmetric + 1
1470850107560:for (ptype in (1:length(psubtypes))) {
1470850107563:ptyphehold <- NA
1470850107566:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1470850107573:postdata <- cbind(NA,postdata)
1470850107577:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1470850107584:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1470850107589:postmetrics <- c(postmetrics,psubtypes[ptype])
1470850107595:}
1470850107611:} else {
1470850107616:postdata <- cbind(NA,postdata)
1470850107621:postdata[1:length(phold$value),1] <- phold$value
1470850107630:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1470850107636:}
1470850107652:cat("\n\n")
1470850107657:print(head(postdata))
1470850107663:cat("\n")
1470850107673:}
1470850107683:postdatastore <- postdata
1470850107703:# Post Metrics to manually create
1470850107709:postmetrics <- c(postmetrics,"organic reach")
1470850107713:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1470850107726:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1470850107729:colnames(postdata)[1] = "organic reach"
1470850107743:# Final dataset formatting
1470850107746:#postdatastore <- postdata
1470850107749:#postdata <- postdatastore
1470850107757:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1470850107762:# reorder and null NA's for Excel
1470850107766:postdata2 <- postdata
1470850107770:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1470850107773:postdata2[is.na(postdata2)] <- ""
1470850107777:postdata2[postdata2 == 0] <- ""
1470850107792:# store final dataset
1470850107797:postdata <- as.data.frame(postdata2)
1470850107805:# Outputs -----------------------------------------------------------------
1470850107811:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1470850107814:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1470850107822:datafolder <- "Data"
1470850107828:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470850107838:# Rename columns for Excel readability
1470850107841:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1470850107847:# output Page dataset as final csv
1470850107852:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1470850107855:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470850107858:?wri
1470850107861:# Rename columns for Excel readability
1470850107866:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470850107869:# output Post dataset as final Excel
1470850107873:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470850107876:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470850107888:# Raw Data
1470850107893:# output dataset as raw csv
1470850107896:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470850107904:totalpagedata <- rbind(totalpagedata, pagedata)
1470850107907:totalpostdata <- rbind(totalpostdata, postdata)
1470850107914:}
1470850172673:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470850172676:# Rename columns for Excel readability
1470850172676:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470850172677:# output Post dataset as final Excel
1470850172677:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470850172677:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470850172678:# Images
1470850172679:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1470850172682:#for (picture in (1:nrow(postdata))) {
1470850172682:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1470850172685:#
1470850172686:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1470850172686:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1470850172686:#
1470850172687:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1470850172687:# Edit the core program and change feedback loop.
1470850172688:#
1470850181830:# - Run script for all major brands
1470850181831:# - Create 'participation rate' function
1470850181833:# - Incorporate Twitter
1470850181833:# Setup -------------------------------------------------------------------
1470850181833:# Load and install all necessary packages for the script
1470850181834:# Required Packages for dataframes, forecasting, graphical visualization, and development
1470850181834:# Use 'install.packages()' if unavailable.
1470850181834:#library(zoo)
1470850181834:#library(forecast)
1470850181834:library(ggplot2)
1470850182247:#library(scales)
1470850182248:library(devtools)
1470850182450:library(compare)
1470850182532:library(xlsx)
1470850185701:require(httr)
1470850185701:require(rjson)
1470850185703:require(RCurl)
1470850188553:## Facebook Query Injector #####
1470850188553:## Mirum Agency ################
1470850188555:## By Vivek Menon ##############
1470850188556:## v.1.5.0 #####################
1470850188556:# Summary -----------------------------------------------------------------
1470850188557:# Todo --------------------------------------------------------------------
1470850188560:# - Run script for all major brands
1470850188561:# - Create 'participation rate' function
1470850188564:# - Incorporate Twitter
1470850188564:# Setup -------------------------------------------------------------------
1470850188565:# Load and install all necessary packages for the script
1470850188565:# Required Packages for dataframes, forecasting, graphical visualization, and development
1470850188566:# Use 'install.packages()' if unavailable.
1470850188566:#library(zoo)
1470850188566:#library(forecast)
1470850188566:library(ggplot2)
1470850188567:#library(scales)
1470850188567:library(devtools)
1470850188571:library(compare)
1470850188571:library(xlsx)
1470850188571:require(httr)
1470850188572:require(rjson)
1470850188572:require(RCurl)
1470850188572:# Pull most up to date Github repositories for relevant packages
1470850188573:# Not frequently updated; does not need to be run every time.
1470850188573:#install_github("pablobarbera/Rfacebook/Rfacebook")
1470850188573:#install_github("pablobarbera/instaR/instaR")
1470850188573:# Required packags for plugging into Facebook API
1470850188574:#library(twitteR)
1470850188574:#install.packages('Rfacebook')
1470850188574:library(Rfacebook)
1470850188575:#library(instaR)
1470850188576:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1470850188576:# https://instagram.com/developer/authentication/?hl=en
1470850188576:#setwd("~/Desktop/TWE/Monthly Reports/June 2015")
1470850188577:setwd("~/")
1470850188578:getwd()
1470850188579:# Functions ---------------------------------------------------------------
1470850188582:# User Functions
1470850188582:# Function to convert Facebook date format to R date format
1470850188583:format.facebook.date <- function(datestring) {
1470850188584:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470850188585:}
1470850188585:# Shift a vector up by an amount
1470850188585:shift <- function(x, n){
1470850188586:c(x[-(seq(n))], rep(NA, n))
1470850188586:}
1470850188586:# Get gcd from vector
1470850188587:gcd <- function(x,y) {
1470850188587:r <- x%%y;
1470850188587:return(ifelse(r, gcd(y, r), y))
1470850188587:}
1470850188588:# Inputs ------------------------------------------------------------------
1470850188589:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1470850188592:# Define data range for data (2012 is out of bounds for some metrics)
1470850188592:# http://thinktostart.com/analyzing-facebook-with-r/
1470850188592:fb_oauth <- fbOAuth(app_id="955460364539237", app_secret="0a3e6943c90510dc158fc7683e560f7d",extended_permissions = FALSE)
1470850194436:posts <- 2000
1470850194437:roof = Sys.Date() #"2015-12-31"
1470850194438:floor = "2016-05-15" #"2015-05-01"
1470850194438:range = seq(as.Date(floor), as.Date(roof), by="days")
1470850194440:## Access ftoken
1470850194440:# Use token from Facebook Graph API
1470850194441:# token generated here: https://developers.facebook.com/tools/explorer
1470850194441:# Lasts two hours, and must be changed depending on page and permissions
1470850194442:ftokens <- c(
1470850194443:#Sledgehammer Wine
1470850194443:#"CAACEdEose0cBAAaqv8JuC9FYYF2JZBzCDyJSrZB5aXhCMHeZAYjdcRkoOyZBHAqNdsSAVnmf63EyT3ZB6pcBZAIcPxcDCQCAXFE1ER62zJDC9tMF6AC5IvTXczksCjh9HocfSBYA1qjER8wsoFvPUF1B9f4mMhNrnAPWRZADbliPBRDTh0D2qF72LAPwZCsfw3UZD"
1470850194443:#Chateau Saint Jean
1470850194444:#"EAACEdEose0cBAOwwfrVCmYxjRlHVlMDJAjtEJkfMZBkWVsQbDGv0eXi50MZCc4F2i33vbhmJ6823oIzAbhezsZAkqchpPpYaiB8XzcfZBKS2jSXE22EY1e855OvkfgFyjKPiOPOjOZAQIbDiJg1tHCMMLVjUlwPcoKGBEexWbGQZDZD"
1470850194445:#19 Crimes
1470850194445:#,"EAACEdEose0cBANCXTZAFtviL9VEUq4DhkEwMyzqdmWgZBh68EReZAIEOVBYlTSiS52swRACvjhybfPQGFqEOmJp0OjTSPQ9ZC01R6nxViJ5xDHXPlDCwnnXOBObHYwZAXhQzy52kL3FZA3WcHNrGNIqfJZC9MZCJPkkfXHpVsx3PHQZDZD"
1470850194445:#Beringer Vneyards
1470850194446:#,"EAACEdEose0cBAAfj1KkrLbPzVw0v5gul87LeUeoXUHnN6rlxrVRklAgg214vFGLkQTKeLHEUWDGg9ZBVeTDRQdOietA25FLcAaQCGiKvmLFv3ZAYnMpLg9YKnpNpazKjXKwWpkXZBdjuKB7Ql6JKu4Q8pNOZCk97LWSwW4U8vgZDZD"
1470850194446:#100% Canadian Milk
1470850194446:#"EAACEdEose0cBAK7Hbibie8kWBzeZBqevx9FEVIgUecHAXLLMZAyR974zvJIf2I3LgxiR05o4gZCm7PkRfvSvVCLhtR98AeVBjSZB9A8Ym6KeJSXhmetOFzjaaFxjVJBZBaVxvNQaTQZCxCgfIZCBl7AZCuSx0tSV1b9ZCUGdBj7OUZAAZDZD"
1470850194447:#Lait 100% Canadien
1470850194448:#,"EAACEdEose0cBAMZB9OeGbItotQXru0sp1vggahZCvZCDQvZAQeskIsZC2713k83AAE5fwZBV5UPAoYgk1NIAi64MgHjSLb362JomROuLuBZB2i9OJoPZC0664EuZBpjSMJEDqtdcvJfvlZAFX9TWPeItEEPdR81KfzSGJJ2l8MeDL1pwZDZD"
1470850194449:#Recharge with Milk
1470850194451:#,"CAACEdEose0cBAJ9NPmffbszUQ1HYObOGqdht5XWBoU7zABLhgZB6L53eyqVrt0CPxkZAXQpI0fGW7FHucQ0LgGtmRRlWP6eAQgZBSa6oaRibk9qZAp0xVGZCr4B6AdysmfVlbZCFjoZBYZCJ3sxN1yMdL5jz6yCWOZAAbAv00nXq5wURrgCUe3dXZAZBF2COnBm9YxXk5vFoWWJkQZDZD"
1470850194451:#BaronSamedi
1470850194452:"EAANkZCHOgFWUBAHaWKdF0oFQrEW1ncmqdZBH064po1PJfWbJZAzIDhJ0z7n2ma06aogrSuA6QUZClnQ4sCRH6YX0O00AuQzEFgvMXYZAD25qZBhDiCp4LW59qZApQZAd6SQlf0sP3ZATCyOM3ToFCxFiMXZCG6AKbHDrqPBxFRxmFFDQZDZD"
1470850194452:)
1470850194452:totalpagedata <- data.frame()
1470850194453:totalpostdata <- data.frame()
1470850194454:for (brand in 1:length(ftokens)) {
1470850194457:ftoken <- ftokens[brand]
1470850194458:## User Id
1470850194462:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1470850194463:userid = "10153046308598756"
1470850194464:# Access public personal data; basically a ftoken test
1470850194465:me <- getUsers("me", token=ftoken)
1470850194468:print(me$name)
1470850194469:## Page Id
1470850194469:# Define which page will be used for the data collection. Change id's as necessary.
1470850194472:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1470850194474:pageid = me$id
1470850194475:# Acquisition -------------------------------------------------------------
1470850194477:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1470850194478:page <- getPage(pageid, ftoken, n = posts)
1470850194479:page.store <- page
1470850194481:# Create new vectors in dataset with datetime, month, and day formattiong
1470850194482:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470850194483:page$datetime <- format.facebook.date(page$created_time)
1470850194485:page$month <- format(page$datetime, "%Y-%m")
1470850194488:page$day <- format(page$datetime, "%Y-%m-%d")
1470850194492:page$datetime <- as.Date(page$datetime)
1470850194493:#page$month <- as.Date(page$month)
1470850194495:page$day <- as.Date(page$day)
1470850194528:} else {
1470850194528:print("Date fields already exist.")
1470850194530:}
1470850194532:# Processing --------------------------------------------------------------
1470850194533:# Process data to clean dataset and augment it with more data than default fields.
1470850194534:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1470850194538:## Cleaning =================================
1470850194540:# Page and Post Datasets
1470850194544:# Split dataset into two for pages and post data
1470850194544:# Create initial null sets
1470850194547:pagedata <- 0
1470850194548:postdata <- 0
1470850194551:## Appending =================================
1470850194552:### Page Metrics #############################
1470850194557:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1470850194559:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1470850194561:# Page Metrics to automatically pull
1470850194562:# "page_fans_online" ,"page_fans_gender_age", "page_positive_feedback_by_type"
1470850194564:metrics = c("page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions") #c(
1470850194565:names(metrics) = c("Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions")
1470850194572:pagemetrics <- metrics
1470850194574:# Prep dataset by breaking into weeks
1470850194576:pagedata <- 0
1470850194577:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1470850194587:colnames(pagedata) = c("pageid", "page", "date")
1470850194589:pagedata$page = page$from_name[1]
1470850194590:pagedata$pageid = page$from_id[1]
1470850194593:divisor = 5
1470850194594:remainder = length(range)%%divisor;
1470850194597:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1470850194605:weeks <- (nrow(pagedata)/5)-2
1470850194607:# Start Data Acquisition Loop
1470850194609:for (metric in 1:length(metrics)) {
1470850194611:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1470850194614:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1470850194616:period = 'lifetime'
1470850194617:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1470850194625:period = 'day'
1470850194630:tempfloor = "2014-02-01"
1470850194631:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1470850194635:if (floor < tempfloor) {
1470850194638:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1470850194639:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1470850194641:weeks = tempweeks
1470850194646:} else {}
1470850194655:} else {
1470850194659:period = 'day'
1470850194661:weeks <- (nrow(pagedata)/5)-2
1470850194663:}
1470850194667:hold <- matrix(0, nrow=0, ncol=7)
1470850194674:for (week in 0:weeks) {
1470850194677:end <- pagedata$date[(week*5)+1]
1470850194678:start <- pagedata$date[((week+1)*5)+1]
1470850194681:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1470850194687:pull <- NULL
1470850194689:attempt <- 1
1470850194693:while(is.null(pull) && attempt <= 10) {
1470850194694:attempt <- attempt + 1
1470850194697:try(
1470850194702:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1470850194704:)
1470850194708:if (is.null(pull)) {
1470850194710:print("Empty Pull. Re-attempting.")
1470850194712:print(paste("Attempt", attempt))
1470850194718:} else {
1470850194720:pull$datetime <- format.facebook.date(pull$end_time)
1470850194723:pull$day <- format(pull$datetime, "%Y-%m-%d")
1470850194727:pull$datetime <- as.Date(pull$datetime)
1470850194729:#page$month <- as.Date(page$month)
1470850194739:pull$day <- as.Date(pull$day)
1470850194743:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1470850194763:print("Found Facebook data matching date range. Storing values.")
1470850194771:} else {
1470850194774:print("Did not find Facebook data matching dataset dates. Re-querying.")
1470850194824:print(paste("Attempt", attempt))
1470850194826:pull <- NULL}
1470850194830:if (attempt > 100) {
1470850194833:print('Too many attempts. Skipping.')
1470850194835:pull <- NULL
1470850194838:break
1470850194840:} else {}
1470850194843:}
1470850194847:pulllength <- ncol(pull)
1470850194850:rpull = pull[rev(rownames(pull)),]
1470850194852:hold <- rbind(hold,rpull)
1470850194853:rawhold <- hold
1470850194854:}
1470850194861:rhold = hold[rev(rownames(hold)),]
1470850194863:rhold$value = shift(rhold$value, 1)
1470850194865:hold = rhold[rev(rownames(rhold)),]
1470850194866:hold$value[1] = rawhold$value[1]
1470850194869:hours <- seq(0,23)
1470850194870:names(hours) <- paste("Hour", hours)
1470850194873:subtypes <- c('link','comment', 'like')
1470850194878:names(subtypes) <- c('Shares','Comments', 'Likes')
1470850194883:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24")
1470850194895:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24")
1470850194900:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1470850194905:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1470850194909:for (type in 1:length(subtypes)) {
1470850194911:typehold <- NA
1470850194912:typehold <- hold[hold$variable == subtypes[type],]
1470850194917:pagedata <- cbind(NA,pagedata)
1470850194918:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470850194920:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1470850194925:metrics <- c(metrics,subtypes[type])
1470850194926:}
1470850194931:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1470850194934:for (demographic in 1:length(demographics)) {
1470850194938:print(names(demographics[demographic]))
1470850194942:typehold <- NA
1470850194943:typehold <- hold[hold$variable == demographics[demographic],]
1470850194947:typehold[typehold$value <= 10,] <- NA
1470850194950:pagedata <- cbind(NA,pagedata)
1470850194953:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470850194956:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1470850194959:metrics <- c(metrics,demographics[demographic])
1470850194961:}
1470850194970:} else if ((metrics)[metric] == 'page_fans_online') {
1470850194975:for (hour in 1:length(hours)) {
1470850194981:typehold <- NA
1470850194994:typehold <- hold[hold$variable == hours[hour],]
1470850195003:pagedata <- cbind(NA,pagedata)
1470850195005:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470850195010:colnames(pagedata)[1] = paste("hour",hours[hour])
1470850195014:metrics <- c(metrics,hours[hour])
1470850195018:}
1470850195021:} else {
1470850195023:pagedata <- cbind(NA,pagedata)
1470850195025:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1470850195027:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1470850195032:}
1470850195037:cat("\n\n")
1470850195039:print(head(pagedata))
1470850195043:cat("\n")
1470850195050:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1470850195052:break
1470850195061:} else {
1470850195064:}
1470850195079:pagedata.tempstore <- pagedata
1470850195087:#Page Metrics to remove because they have subtypes
1470850195092:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1470850195099:# Page Metrics to manually create
1470850195103:metrics <- c(metrics,"organic reach")
1470850195107:names(metrics)[length(metrics)] <- c("Organic Reach")
1470850195110:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1470850195113:colnames(pagedata)[1] = "organic reach"
1470850195119:# Final dataset formatting
1470850195123:pagedatastore <- pagedata
1470850195126:#pagedata <- pagedatastore
1470850195131:pagedata2 <- pagedata
1470850195135:# reorder and null NA's for excel
1470850195137:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1470850195140:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1470850195142:#pagedata2[is.na(pagedata2)] <- ""
1470850195147:#pagedata2[pagedata2 == 0] <- ""
1470850195154:# store final dataset
1470850195158:pagedata <- pagedata2
1470850195164:### Post Metrics #############################
1470850195168:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1470850195172:# Most are automated, and will continue to retry through errors until a value is found.
1470850195176:# Manual modifications are run after initial data acquisition.
1470850195184:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1470850195188:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1470850195195:# Populate sets with values from pull
1470850195201:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470850195203:page$datetime <- format.facebook.date(page$created_time)
1470850195207:page$month <- format(page$datetime, "%Y-%m")
1470850195212:page$day <- format(page$datetime, "%Y-%m-%d")
1470850195221:page$datetime <- as.Date(page$datetime)
1470850195224:#page$month <- as.Date(page$month)
1470850195226:page$day <- as.Date(page$day)
1470850195228:} else {
1470850195230:print("Date fields already exist for Post Data.")
1470850195236:}
1470850195240:postdata <- 0
1470850195241:postdata <- page[page$day > floor,]
1470850195246:postdata <- postdata[postdata$day < roof,]
1470850195252:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1470850195293:# Name column for usability
1470850195298:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1470850195306:rows <- nrow(postdata)
1470850195311:lpostmetrics <- postmetrics
1470850195325:testlength <- 2
1470850195327:#length(postmetrics) instead of testlength; swapped out for hotfixes
1470850195335:for (pmetric in 1:length(postmetrics)) {
1470850195338:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1470850195344:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1470850195347:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1470850195349:names(phold) <- c("id","name","period","title","description","value","variable")
1470850195353:} else {
1470850195355:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1470850195358:names(phold) <- c("id","name","period","title","description","value")
1470850195360:}
1470850195367:for (post in 1:nrow(postdata)) {
1470850195372:period <- "lifetime"
1470850195381:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1470850195387:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1470850195389:print('Not a Facebook Video.')
1470850195391:phold <- rbind(phold, NA)
1470850195395:next()
1470850195398:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1470850195400:} else {
1470850195403:}
1470850195411:postpull <- NULL
1470850195413:attempt <- 1
1470850195419:while( is.null(postpull) && attempt <= 100) {
1470850195423:attempt <- attempt + 1
1470850195432:try(
1470850195438:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1470850195442:,silent=TRUE
1470850195447:)
1470850195450:if (attempt > 10) {
1470850195454:print('Too many attempts. Skipping.')
1470850195532:postpull <- NULL
1470850195573:break
1470850195578:} else {
1470850195583:}
1470850195599:colnames(phold) <- names(postpull)
1470850195616:phold <- rbind(phold, postpull)
1470850195623:}
1470850195640:pholdstore <- phold
1470850195660:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1470850195665:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1470850195704:phold <- phold[-1,]
1470850195729:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1470850195742:postmetrics <- postmetrics[-pmetric]
1470850195748:pmetric <- pmetric + 1
1470850195758:for (ptype in (1:length(psubtypes))) {
1470850195763:ptyphehold <- NA
1470850195768:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1470850195779:postdata <- cbind(NA,postdata)
1470850195797:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1470850195816:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1470850195821:postmetrics <- c(postmetrics,psubtypes[ptype])
1470850195846:}
1470850195856:} else {
1470850195862:postdata <- cbind(NA,postdata)
1470850195869:postdata[1:length(phold$value),1] <- phold$value
1470850195894:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1470850195915:}
1470850195933:cat("\n\n")
1470850195938:print(head(postdata))
1470850195943:cat("\n")
1470850195950:}
1470850195964:postdatastore <- postdata
1470850196004:# Post Metrics to manually create
1470850196010:postmetrics <- c(postmetrics,"organic reach")
1470850196017:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1470850196031:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1470850196038:colnames(postdata)[1] = "organic reach"
1470850196047:# Final dataset formatting
1470850196051:#postdatastore <- postdata
1470850196053:#postdata <- postdatastore
1470850196063:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1470850196082:# reorder and null NA's for Excel
1470850196089:postdata2 <- postdata
1470850196097:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1470850196103:postdata2[is.na(postdata2)] <- ""
1470850196107:postdata2[postdata2 == 0] <- ""
1470850196115:# store final dataset
1470850196121:postdata <- as.data.frame(postdata2)
1470850196133:# Outputs -----------------------------------------------------------------
1470850196150:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1470850196156:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1470850196173:datafolder <- "Data"
1470850196181:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470850196191:# Rename columns for Excel readability
1470850196199:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1470850196202:# output Page dataset as final csv
1470850196205:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1470850196209:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470850196217:?wri
1470850196220:# Rename columns for Excel readability
1470850196223:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470850196231:# output Post dataset as final Excel
1470850196239:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470850196242:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470850196250:# Raw Data
1470850196254:# output dataset as raw csv
1470850196259:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470850196326:totalpagedata <- rbind(totalpagedata, pagedata)
1470850196331:totalpostdata <- rbind(totalpostdata, postdata)
1470850196347:}
1470850289965:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470850291150:# Rename columns for Excel readability
1470850291151:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470850291151:# output Post dataset as final Excel
1470850291151:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470850291152:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470850292065:# Images
1470850292066:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1470850292067:#for (picture in (1:nrow(postdata))) {
1470850292067:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1470850292067:#
1470850292069:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1470850292069:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1470850292070:#
1470850292071:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1470850292072:# Edit the core program and change feedback loop.
1470850292072:#
1470850292073:#}
1470850399654:## Facebook Query Injector #####
1470850399657:## Mirum Agency ################
1470850399657:## By Vivek Menon ##############
1470850399658:## v.1.5.0 #####################
1470850399660:# Summary -----------------------------------------------------------------
1470850399661:# Todo --------------------------------------------------------------------
1470850399665:# - Run script for all major brands
1470850399666:# - Create 'participation rate' function
1470850399666:# - Incorporate Twitter
1470850399667:# Setup -------------------------------------------------------------------
1470850399667:# Load and install all necessary packages for the script
1470850399668:# Required Packages for dataframes, forecasting, graphical visualization, and development
1470850399668:# Use 'install.packages()' if unavailable.
1470850399671:#library(zoo)
1470850399672:#library(forecast)
1470850399675:library(ggplot2)
1470850399677:#library(scales)
1470850399683:library(devtools)
1470850399684:library(compare)
1470850399687:library(xlsx)
1470850399688:require(httr)
1470850399688:require(rjson)
1470850399692:require(RCurl)
1470850399693:# Pull most up to date Github repositories for relevant packages
1470850399695:# Not frequently updated; does not need to be run every time.
1470850399696:#install_github("pablobarbera/Rfacebook/Rfacebook")
1470850399699:#install_github("pablobarbera/instaR/instaR")
1470850399699:# Required packags for plugging into Facebook API
1470850399703:#library(twitteR)
1470850399703:#install.packages('Rfacebook')
1470850399706:library(Rfacebook)
1470850399708:#library(instaR)
1470850399710:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1470850399711:# https://instagram.com/developer/authentication/?hl=en
1470850399714:#setwd("~/Desktop/TWE/Monthly Reports/June 2015")
1470850399715:setwd("~/")
1470850399718:getwd()
1470850399721:# Functions ---------------------------------------------------------------
1470850399722:# User Functions
1470850399722:# Function to convert Facebook date format to R date format
1470850399726:format.facebook.date <- function(datestring) {
1470850399727:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470850399729:}
1470850399730:# Shift a vector up by an amount
1470850399730:shift <- function(x, n){
1470850399733:c(x[-(seq(n))], rep(NA, n))
1470850399734:}
1470850399734:# Get gcd from vector
1470850399735:gcd <- function(x,y) {
1470850399738:r <- x%%y;
1470850399738:return(ifelse(r, gcd(y, r), y))
1470850399739:}
1470850399740:# Inputs ------------------------------------------------------------------
1470850399740:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1470850399743:# Define data range for data (2012 is out of bounds for some metrics)
1470850399744:# http://thinktostart.com/analyzing-facebook-with-r/
1470850399747:fb_oauth <- fbOAuth(app_id="955460364539237", app_secret="0a3e6943c90510dc158fc7683e560f7d",extended_permissions = FALSE)
1470850405365:posts <- 2000
1470850405366:roof = Sys.Date() #"2015-12-31"
1470850405369:floor = "2016-04-19" #"2015-05-01"
1470850405369:range = seq(as.Date(floor), as.Date(roof), by="days")
1470850405371:## Access ftoken
1470850405371:# Use token from Facebook Graph API
1470850405374:# token generated here: https://developers.facebook.com/tools/explorer
1470850405374:# Lasts two hours, and must be changed depending on page and permissions
1470850405375:ftokens <- c(
1470850405375:#Sledgehammer Wine
1470850405376:#"CAACEdEose0cBAAaqv8JuC9FYYF2JZBzCDyJSrZB5aXhCMHeZAYjdcRkoOyZBHAqNdsSAVnmf63EyT3ZB6pcBZAIcPxcDCQCAXFE1ER62zJDC9tMF6AC5IvTXczksCjh9HocfSBYA1qjER8wsoFvPUF1B9f4mMhNrnAPWRZADbliPBRDTh0D2qF72LAPwZCsfw3UZD"
1470850405376:#Chateau Saint Jean
1470850405376:#"EAACEdEose0cBAOwwfrVCmYxjRlHVlMDJAjtEJkfMZBkWVsQbDGv0eXi50MZCc4F2i33vbhmJ6823oIzAbhezsZAkqchpPpYaiB8XzcfZBKS2jSXE22EY1e855OvkfgFyjKPiOPOjOZAQIbDiJg1tHCMMLVjUlwPcoKGBEexWbGQZDZD"
1470850405377:#19 Crimes
1470850405377:#,"EAACEdEose0cBANCXTZAFtviL9VEUq4DhkEwMyzqdmWgZBh68EReZAIEOVBYlTSiS52swRACvjhybfPQGFqEOmJp0OjTSPQ9ZC01R6nxViJ5xDHXPlDCwnnXOBObHYwZAXhQzy52kL3FZA3WcHNrGNIqfJZC9MZCJPkkfXHpVsx3PHQZDZD"
1470850405377:#Beringer Vneyards
1470850405377:#,"EAACEdEose0cBAAfj1KkrLbPzVw0v5gul87LeUeoXUHnN6rlxrVRklAgg214vFGLkQTKeLHEUWDGg9ZBVeTDRQdOietA25FLcAaQCGiKvmLFv3ZAYnMpLg9YKnpNpazKjXKwWpkXZBdjuKB7Ql6JKu4Q8pNOZCk97LWSwW4U8vgZDZD"
1470850405378:#100% Canadian Milk
1470850405378:#"EAACEdEose0cBAK7Hbibie8kWBzeZBqevx9FEVIgUecHAXLLMZAyR974zvJIf2I3LgxiR05o4gZCm7PkRfvSvVCLhtR98AeVBjSZB9A8Ym6KeJSXhmetOFzjaaFxjVJBZBaVxvNQaTQZCxCgfIZCBl7AZCuSx0tSV1b9ZCUGdBj7OUZAAZDZD"
1470850405379:#Lait 100% Canadien
1470850405379:#,"EAACEdEose0cBAMZB9OeGbItotQXru0sp1vggahZCvZCDQvZAQeskIsZC2713k83AAE5fwZBV5UPAoYgk1NIAi64MgHjSLb362JomROuLuBZB2i9OJoPZC0664EuZBpjSMJEDqtdcvJfvlZAFX9TWPeItEEPdR81KfzSGJJ2l8MeDL1pwZDZD"
1470850405379:#Recharge with Milk
1470850405380:#,"CAACEdEose0cBAJ9NPmffbszUQ1HYObOGqdht5XWBoU7zABLhgZB6L53eyqVrt0CPxkZAXQpI0fGW7FHucQ0LgGtmRRlWP6eAQgZBSa6oaRibk9qZAp0xVGZCr4B6AdysmfVlbZCFjoZBYZCJ3sxN1yMdL5jz6yCWOZAAbAv00nXq5wURrgCUe3dXZAZBF2COnBm9YxXk5vFoWWJkQZDZD"
1470850405380:#BaronSamedi
1470850405383:"EAANkZCHOgFWUBAHaWKdF0oFQrEW1ncmqdZBH064po1PJfWbJZAzIDhJ0z7n2ma06aogrSuA6QUZClnQ4sCRH6YX0O00AuQzEFgvMXYZAD25qZBhDiCp4LW59qZApQZAd6SQlf0sP3ZATCyOM3ToFCxFiMXZCG6AKbHDrqPBxFRxmFFDQZDZD"
1470850405384:)
1470850405385:totalpagedata <- data.frame()
1470850405385:totalpostdata <- data.frame()
1470850405389:for (brand in 1:length(ftokens)) {
1470850405389:ftoken <- ftokens[brand]
1470850405392:## User Id
1470850405393:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1470850405393:userid = "10153046308598756"
1470850405393:# Access public personal data; basically a ftoken test
1470850405394:me <- getUsers("me", token=ftoken)
1470850405394:print(me$name)
1470850405395:## Page Id
1470850405395:# Define which page will be used for the data collection. Change id's as necessary.
1470850405396:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1470850405396:pageid = me$id
1470850405397:# Acquisition -------------------------------------------------------------
1470850405400:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1470850405401:page <- getPage(pageid, ftoken, n = posts)
1470850405401:page.store <- page
1470850405402:# Create new vectors in dataset with datetime, month, and day formattiong
1470850405403:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470850405406:page$datetime <- format.facebook.date(page$created_time)
1470850405406:page$month <- format(page$datetime, "%Y-%m")
1470850405407:page$day <- format(page$datetime, "%Y-%m-%d")
1470850405408:page$datetime <- as.Date(page$datetime)
1470850405408:#page$month <- as.Date(page$month)
1470850405409:page$day <- as.Date(page$day)
1470850405409:} else {
1470850405410:print("Date fields already exist.")
1470850405411:}
1470850405412:# Processing --------------------------------------------------------------
1470850405413:# Process data to clean dataset and augment it with more data than default fields.
1470850405415:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1470850405417:## Cleaning =================================
1470850405420:# Page and Post Datasets
1470850405420:# Split dataset into two for pages and post data
1470850405421:# Create initial null sets
1470850405422:pagedata <- 0
1470850405425:postdata <- 0
1470850405426:## Appending =================================
1470850405429:### Page Metrics #############################
1470850405429:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1470850405430:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1470850405431:# Page Metrics to automatically pull
1470850405431:# "page_fans_online" ,"page_fans_gender_age", "page_positive_feedback_by_type"
1470850405432:metrics = c("page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions") #c(
1470850405433:names(metrics) = c("Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions")
1470850405434:pagemetrics <- metrics
1470850405436:# Prep dataset by breaking into weeks
1470850405438:pagedata <- 0
1470850405439:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1470850405441:colnames(pagedata) = c("pageid", "page", "date")
1470850405444:pagedata$page = page$from_name[1]
1470850405444:pagedata$pageid = page$from_id[1]
1470850405447:divisor = 5
1470850405448:remainder = length(range)%%divisor;
1470850405451:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1470850405453:weeks <- (nrow(pagedata)/5)-2
1470850405454:# Start Data Acquisition Loop
1470850405456:for (metric in 1:length(metrics)) {
1470850405457:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1470850405458:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1470850405461:period = 'lifetime'
1470850405462:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1470850405465:period = 'day'
1470850405468:tempfloor = "2014-02-01"
1470850405469:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1470850405473:if (floor < tempfloor) {
1470850405477:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1470850405478:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1470850405480:weeks = tempweeks
1470850405482:} else {}
1470850405484:} else {
1470850405486:period = 'day'
1470850405488:weeks <- (nrow(pagedata)/5)-2
1470850405490:}
1470850405493:hold <- matrix(0, nrow=0, ncol=7)
1470850405495:for (week in 0:weeks) {
1470850405498:end <- pagedata$date[(week*5)+1]
1470850405499:start <- pagedata$date[((week+1)*5)+1]
1470850405502:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1470850405504:pull <- NULL
1470850405506:attempt <- 1
1470850405510:while(is.null(pull) && attempt <= 10) {
1470850405511:attempt <- attempt + 1
1470850405512:try(
1470850405513:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1470850405514:)
1470850405519:if (is.null(pull)) {
1470850405521:print("Empty Pull. Re-attempting.")
1470850405523:print(paste("Attempt", attempt))
1470850405525:} else {
1470850405527:pull$datetime <- format.facebook.date(pull$end_time)
1470850405529:pull$day <- format(pull$datetime, "%Y-%m-%d")
1470850405532:pull$datetime <- as.Date(pull$datetime)
1470850405534:#page$month <- as.Date(page$month)
1470850405535:pull$day <- as.Date(pull$day)
1470850405538:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1470850405540:print("Found Facebook data matching date range. Storing values.")
1470850405542:} else {
1470850405545:print("Did not find Facebook data matching dataset dates. Re-querying.")
1470850405546:print(paste("Attempt", attempt))
1470850405549:pull <- NULL}
1470850405553:if (attempt > 100) {
1470850405555:print('Too many attempts. Skipping.')
1470850405558:pull <- NULL
1470850405560:break
1470850405562:} else {}
1470850405565:}
1470850405570:pulllength <- ncol(pull)
1470850405574:rpull = pull[rev(rownames(pull)),]
1470850405578:hold <- rbind(hold,rpull)
1470850405580:rawhold <- hold
1470850405582:}
1470850405590:rhold = hold[rev(rownames(hold)),]
1470850405593:rhold$value = shift(rhold$value, 1)
1470850405595:hold = rhold[rev(rownames(rhold)),]
1470850405597:hold$value[1] = rawhold$value[1]
1470850405602:hours <- seq(0,23)
1470850405604:names(hours) <- paste("Hour", hours)
1470850405609:subtypes <- c('link','comment', 'like')
1470850405611:names(subtypes) <- c('Shares','Comments', 'Likes')
1470850405615:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24")
1470850405618:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24")
1470850405624:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1470850405645:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1470850405657:for (type in 1:length(subtypes)) {
1470850405660:typehold <- NA
1470850405662:typehold <- hold[hold$variable == subtypes[type],]
1470850405667:pagedata <- cbind(NA,pagedata)
1470850405671:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470850405673:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1470850405679:metrics <- c(metrics,subtypes[type])
1470850405690:}
1470850405701:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1470850405709:for (demographic in 1:length(demographics)) {
1470850405715:print(names(demographics[demographic]))
1470850405723:typehold <- NA
1470850405725:typehold <- hold[hold$variable == demographics[demographic],]
1470850405728:typehold[typehold$value <= 10,] <- NA
1470850405732:pagedata <- cbind(NA,pagedata)
1470850405734:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470850405736:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1470850405742:metrics <- c(metrics,demographics[demographic])
1470850405744:}
1470850405748:} else if ((metrics)[metric] == 'page_fans_online') {
1470850405754:for (hour in 1:length(hours)) {
1470850405761:typehold <- NA
1470850405764:typehold <- hold[hold$variable == hours[hour],]
1470850405771:pagedata <- cbind(NA,pagedata)
1470850405777:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1470850405780:colnames(pagedata)[1] = paste("hour",hours[hour])
1470850405784:metrics <- c(metrics,hours[hour])
1470850405786:}
1470850405788:} else {
1470850405792:pagedata <- cbind(NA,pagedata)
1470850405795:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1470850405796:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1470850405800:}
1470850405806:cat("\n\n")
1470850405809:print(head(pagedata))
1470850405815:cat("\n")
1470850405819:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1470850405821:break
1470850405822:} else {
1470850405824:}
1470850405836:pagedata.tempstore <- pagedata
1470850405839:#Page Metrics to remove because they have subtypes
1470850405843:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1470850405854:# Page Metrics to manually create
1470850405855:metrics <- c(metrics,"organic reach")
1470850405857:names(metrics)[length(metrics)] <- c("Organic Reach")
1470850405863:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1470850405865:colnames(pagedata)[1] = "organic reach"
1470850405871:# Final dataset formatting
1470850405874:pagedatastore <- pagedata
1470850405876:#pagedata <- pagedatastore
1470850405877:pagedata2 <- pagedata
1470850405882:# reorder and null NA's for excel
1470850405884:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1470850405886:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1470850405891:#pagedata2[is.na(pagedata2)] <- ""
1470850405895:#pagedata2[pagedata2 == 0] <- ""
1470850405901:# store final dataset
1470850405903:pagedata <- pagedata2
1470850405907:### Post Metrics #############################
1470850405909:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1470850405911:# Most are automated, and will continue to retry through errors until a value is found.
1470850405914:# Manual modifications are run after initial data acquisition.
1470850405919:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1470850405922:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1470850405925:# Populate sets with values from pull
1470850405929:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1470850405950:page$datetime <- format.facebook.date(page$created_time)
1470850405960:page$month <- format(page$datetime, "%Y-%m")
1470850405972:page$day <- format(page$datetime, "%Y-%m-%d")
1470850405996:page$datetime <- as.Date(page$datetime)
1470850406000:#page$month <- as.Date(page$month)
1470850406003:page$day <- as.Date(page$day)
1470850406012:} else {
1470850406016:print("Date fields already exist for Post Data.")
1470850406021:}
1470850406031:postdata <- 0
1470850406034:postdata <- page[page$day > floor,]
1470850406035:postdata <- postdata[postdata$day < roof,]
1470850406045:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1470850406055:# Name column for usability
1470850406063:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1470850406085:rows <- nrow(postdata)
1470850406091:lpostmetrics <- postmetrics
1470850406103:testlength <- 2
1470850406107:#length(postmetrics) instead of testlength; swapped out for hotfixes
1470850406127:for (pmetric in 1:length(postmetrics)) {
1470850406131:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1470850406138:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1470850406142:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1470850406149:names(phold) <- c("id","name","period","title","description","value","variable")
1470850406153:} else {
1470850406158:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1470850406162:names(phold) <- c("id","name","period","title","description","value")
1470850406166:}
1470850406179:for (post in 1:nrow(postdata)) {
1470850406197:period <- "lifetime"
1470850406209:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1470850406216:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1470850406222:print('Not a Facebook Video.')
1470850406228:phold <- rbind(phold, NA)
1470850406231:next()
1470850406237:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1470850406240:} else {
1470850406245:}
1470850406260:postpull <- NULL
1470850406289:attempt <- 1
1470850406303:while( is.null(postpull) && attempt <= 100) {
1470850406305:attempt <- attempt + 1
1470850406310:try(
1470850406318:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1470850406321:,silent=TRUE
1470850406325:)
1470850406327:if (attempt > 10) {
1470850406330:print('Too many attempts. Skipping.')
1470850406332:postpull <- NULL
1470850406335:break
1470850406339:} else {
1470850406343:}
1470850406350:colnames(phold) <- names(postpull)
1470850406358:phold <- rbind(phold, postpull)
1470850406361:}
1470850406363:pholdstore <- phold
1470850406383:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1470850406389:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1470850406399:phold <- phold[-1,]
1470850406403:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1470850406408:postmetrics <- postmetrics[-pmetric]
1470850406412:pmetric <- pmetric + 1
1470850406420:for (ptype in (1:length(psubtypes))) {
1470850406423:ptyphehold <- NA
1470850406430:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1470850406450:postdata <- cbind(NA,postdata)
1470850406453:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1470850406464:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1470850406467:postmetrics <- c(postmetrics,psubtypes[ptype])
1470850406472:}
1470850406483:} else {
1470850406485:postdata <- cbind(NA,postdata)
1470850406491:postdata[1:length(phold$value),1] <- phold$value
1470850406497:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1470850406502:}
1470850406516:cat("\n\n")
1470850406519:print(head(postdata))
1470850406522:cat("\n")
1470850406524:}
1470850406531:postdatastore <- postdata
1470850406548:# Post Metrics to manually create
1470850406556:postmetrics <- c(postmetrics,"organic reach")
1470850406563:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1470850406572:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1470850406578:colnames(postdata)[1] = "organic reach"
1470850406587:# Final dataset formatting
1470850406593:#postdatastore <- postdata
1470850406597:#postdata <- postdatastore
1470850406605:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1470850406615:# reorder and null NA's for Excel
1470850406620:postdata2 <- postdata
1470850406622:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1470850406626:postdata2[is.na(postdata2)] <- ""
1470850406629:postdata2[postdata2 == 0] <- ""
1470850406640:# store final dataset
1470850406645:postdata <- as.data.frame(postdata2)
1470850406651:# Outputs -----------------------------------------------------------------
1470850406661:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1470850406665:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1470850406672:datafolder <- "Data"
1470850406683:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470850406689:# Rename columns for Excel readability
1470850406694:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1470850406698:# output Page dataset as final csv
1470850406700:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1470850406703:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470850406706:?wri
1470850406710:# Rename columns for Excel readability
1470850406724:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470850406739:# output Post dataset as final Excel
1470850406745:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470850406751:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470850406762:# Raw Data
1470850406769:# output dataset as raw csv
1470850406778:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470850406787:totalpagedata <- rbind(totalpagedata, pagedata)
1470850406810:totalpostdata <- rbind(totalpostdata, postdata)
1470850406818:}
1470850494907:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470850495588:# Rename columns for Excel readability
1470850495588:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1470850495590:# output Post dataset as final Excel
1470850495591:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1470850495591:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470850496103:# Images
1470850496104:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1470850496104:#for (picture in (1:nrow(postdata))) {
1470850496104:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1470850496105:#
1470850496105:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1470850496105:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1470850496105:#
1470850496106:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1470850496106:# Edit the core program and change feedback loop.
1470850496107:#
1470850496107:#}
1470850562686:install.packages('instaR')
1470850565451:#update.packages("instaR")
1470850565452:library("instaR")
1470850574898:# User Functions
1470850574899:# Function to convert Facebook date format to R date format
1470850574901:format.facebook.date <- function(datestring) {
1470850574902:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470850574905:}
1470850597224:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="public_content")
1470850974517:#update.packages("instaR")
1470850974519:library("instaR")
1470850974724:# User Functions
1470850974725:# Function to convert Facebook date format to R date format
1470850974728:format.facebook.date <- function(datestring) {
1470850974730:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470850974731:}
1470850974732:#folder <- "19c"
1470850981619:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="public_content")
1470850996899:accounts <- c("thebaronsamedi")
1470850996902:roof= Sys.Date()+1
1470850997183:floor = "2016-04-01"
1470850999615:username=accounts[account]
1470850999966:posts <- getUserMedia(username=accounts[account],token=my_oauth, n=500)
1470851008737:for (account in 1:length(accounts)) {
1470851008738:username=accounts[account]
1470851008739:posts <- getUserMedia(username=accounts[account],token=my_oauth, n=500)
1470851008740:#,n = 1)#, n=200, verbose = TRUE)
1470851008740:#user <- getUser(accounts[account], token=my_oauth)
1470851008740:#df <- getFollowers('womenchampions', token=my_oauth)
1470851008741:df <- posts
1470851008741:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1470851008742:df$datetime <- format.facebook.date(df$created_time)
1470851008742:df$month <- format(df$datetime, "%Y-%m")
1470851008745:df$day <- format(df$datetime, "%Y-%m-%d")
1470851008746:} else {
1470851008750:print("Date fields already exist.")
1470851008753:}
1470851008754:#roof = "2016-05-30"
1470851008756:#floor = "2016-05-01"
1470851008757:df <- df[df$day > floor,]
1470851008758:df <- df[df$day < roof,]
1470851008758:#posts <- posts[posts$created_time > floor,]
1470851008759:#posts <- posts[posts$created_time < roof,]
1470851008762:#posts <- df
1470851008763:follows <- NULL
1470851008765:impressions <- NULL
1470851008766:impressionusers <- NULL
1470851008767:count <- 0
1470851008767:jump <- 1 # Loop paramater
1470851008768:weight <- 0.1 # 10%
1470851008772:for (post in 1:nrow(df)) {
1470851008773:try(impressionusers <- c(
1470851008776:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1470851008777:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1470851008780:)
1470851008782:,silent = TRUE)
1470851008784:impression <- 0
1470851008785:if (is.null(impressionusers) == TRUE){
1470851008787:impressions[post] <- 0
1470851008790:} else {
1470851008791:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1470851008794:for (user in 1:length(impressionusers)){
1470851008795:#print(user)
1470851008798:#print(impression)
1470851008799:userdata <- NULL
1470851008802:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1470851008803:if (is.null(userdata)) {
1470851008805:newimpression <- 0
1470851008806:impression <- as.numeric(newimpression) + as.numeric(impression)
1470851008810:next
1470851008811:} else {
1470851008813:newimpression <- + userdata$follows + userdata$followed_by
1470851008814:impression <- as.numeric(impression) + as.numeric(newimpression)
1470851008818:}
1470851008822:# Scale down to simulate organic
1470851008823:impression = ceiling(weight * impression)
1470851008827:impressions[post] <- impression
1470851008829:}
1470851008830:print(impressions[post])
1470851008831:count = count + 1
1470851008834:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1470851008836:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1470851008839:}
1470851008841:impressions.store <- impressions
1470851008847:#impressions <- round(impressions/5,0)
1470851008849:df <- cbind(df, impressions)
1470851008854:df.store <- df
1470851008856:df[is.na(df)] <- ""
1470851008858:name <- paste(df$user_fullname[1],"Instagram", Sys.Date())
1470851008860:datafolder <- "/Data"
1470851008862:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470851008864:write.csv(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".csv")))#, row.names=FALSE)
1470851008867:}
1470851032574:#write.xlsx(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".xlsx")), row.names=FALSE)
1470851045080:poist
1470851045735:post
1470851047754:nrow(df)
1470851048346:df
1470851059963:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username
1470851079683:getComments(df$id[post], token=my_oauth)
1470851084700:?getComments
1470851111538:getComments(df$id[2], token=my_oauth)
1470851117898:getComments(df$id[3], token=my_oauth)
1470851179193:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="basic+likes+public_content")
1470851202252:Q
1470851205340:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="basic,likes,public_content")
1470851224548:?my_oauth
1470851229802:?instaOAuth
1470851256190:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="basic+public_content")
1470851278488:Q
1470851282091:instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="basic")
1470851291532:accounts <- c("thebaronsamedi")
1470851291533:roof= Sys.Date()+1
1470851291534:floor = "2016-04-01"
1470851296426:for (account in 1:length(accounts)) {
1470851296427:username=accounts[account]
1470851296429:posts <- getUserMedia(username=accounts[account],token=my_oauth, n=500)
1470851296429:#,n = 1)#, n=200, verbose = TRUE)
1470851296433:#user <- getUser(accounts[account], token=my_oauth)
1470851296436:#df <- getFollowers('womenchampions', token=my_oauth)
1470851296436:df <- posts
1470851296437:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1470851296440:df$datetime <- format.facebook.date(df$created_time)
1470851296441:df$month <- format(df$datetime, "%Y-%m")
1470851296444:df$day <- format(df$datetime, "%Y-%m-%d")
1470851296444:} else {
1470851296444:print("Date fields already exist.")
1470851296445:}
1470851296445:#roof = "2016-05-30"
1470851296446:#floor = "2016-05-01"
1470851296449:df <- df[df$day > floor,]
1470851296450:df <- df[df$day < roof,]
1470851296453:#posts <- posts[posts$created_time > floor,]
1470851296453:#posts <- posts[posts$created_time < roof,]
1470851296457:#posts <- df
1470851296457:follows <- NULL
1470851296460:impressions <- NULL
1470851296461:impressionusers <- NULL
1470851296464:count <- 0
1470851296465:jump <- 1 # Loop paramater
1470851296468:weight <- 0.1 # 10%
1470851296469:for (post in 1:nrow(df)) {
1470851296472:try(impressionusers <- c(
1470851296473:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1470851296475:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1470851296476:)
1470851296480:,silent = TRUE)
1470851296481:impression <- 0
1470851296485:if (is.null(impressionusers) == TRUE){
1470851296486:impressions[post] <- 0
1470851296488:} else {
1470851296489:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1470851296492:for (user in 1:length(impressionusers)){
1470851296493:#print(user)
1470851296496:#print(impression)
1470851296497:userdata <- NULL
1470851296500:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1470851296501:if (is.null(userdata)) {
1470851296504:newimpression <- 0
1470851296504:impression <- as.numeric(newimpression) + as.numeric(impression)
1470851296507:next
1470851296508:} else {
1470851296512:newimpression <- + userdata$follows + userdata$followed_by
1470851296513:impression <- as.numeric(impression) + as.numeric(newimpression)
1470851296516:}
1470851296519:# Scale down to simulate organic
1470851296520:impression = ceiling(weight * impression)
1470851296522:impressions[post] <- impression
1470851296524:}
1470851296525:print(impressions[post])
1470851296527:count = count + 1
1470851296528:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1470851296529:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1470851296531:}
1470851296534:impressions.store <- impressions
1470851296535:#impressions <- round(impressions/5,0)
1470851296537:df <- cbind(df, impressions)
1470851296539:df.store <- df
1470851296542:df[is.na(df)] <- ""
1470851296545:name <- paste(df$user_fullname[1],"Instagram", Sys.Date())
1470851296549:datafolder <- "/Data"
1470851296552:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470851296554:write.csv(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".csv")))#, row.names=FALSE)
1470851296556:}
1470851320991:#write.xlsx(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".xlsx")), row.names=FALSE)
1470851331432:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="public_content basic")
1470851360914:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="public_content basic follower_list")
1470851384698:q
1470851391402:Q
1470851394099:my_oauth
1470851398705:accounts <- c("thebaronsamedi")
1470851398706:roof= Sys.Date()+1
1470851398708:floor = "2016-04-01"
1470851398708:for (account in 1:length(accounts)) {
1470851398712:username=accounts[account]
1470851398715:posts <- getUserMedia(username=accounts[account],token=my_oauth, n=500)
1470851398716:#,n = 1)#, n=200, verbose = TRUE)
1470851398718:#user <- getUser(accounts[account], token=my_oauth)
1470851398719:#df <- getFollowers('womenchampions', token=my_oauth)
1470851398719:df <- posts
1470851398720:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1470851398724:df$datetime <- format.facebook.date(df$created_time)
1470851398727:df$month <- format(df$datetime, "%Y-%m")
1470851398727:df$day <- format(df$datetime, "%Y-%m-%d")
1470851398730:} else {
1470851398731:print("Date fields already exist.")
1470851398734:}
1470851398736:#roof = "2016-05-30"
1470851398738:#floor = "2016-05-01"
1470851398739:df <- df[df$day > floor,]
1470851398739:df <- df[df$day < roof,]
1470851398743:#posts <- posts[posts$created_time > floor,]
1470851398744:#posts <- posts[posts$created_time < roof,]
1470851398747:#posts <- df
1470851398748:follows <- NULL
1470851398752:impressions <- NULL
1470851398754:impressionusers <- NULL
1470851398755:count <- 0
1470851398758:jump <- 1 # Loop paramater
1470851398759:weight <- 0.1 # 10%
1470851398762:for (post in 1:nrow(df)) {
1470851398764:try(impressionusers <- c(
1470851398766:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1470851398766:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1470851398769:)
1470851398770:,silent = TRUE)
1470851398774:impression <- 0
1470851398775:if (is.null(impressionusers) == TRUE){
1470851398777:impressions[post] <- 0
1470851398778:} else {
1470851398781:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1470851398782:for (user in 1:length(impressionusers)){
1470851398785:#print(user)
1470851398786:#print(impression)
1470851398789:userdata <- NULL
1470851398791:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1470851398793:if (is.null(userdata)) {
1470851398794:newimpression <- 0
1470851398797:impression <- as.numeric(newimpression) + as.numeric(impression)
1470851398798:next
1470851398800:} else {
1470851398802:newimpression <- + userdata$follows + userdata$followed_by
1470851398804:impression <- as.numeric(impression) + as.numeric(newimpression)
1470851398805:}
1470851398811:# Scale down to simulate organic
1470851398812:impression = ceiling(weight * impression)
1470851398815:impressions[post] <- impression
1470851398816:}
1470851398818:print(impressions[post])
1470851398819:count = count + 1
1470851398820:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1470851398823:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1470851398824:}
1470851398827:impressions.store <- impressions
1470851398828:#impressions <- round(impressions/5,0)
1470851398831:df <- cbind(df, impressions)
1470851398834:df.store <- df
1470851398836:df[is.na(df)] <- ""
1470851398839:name <- paste(df$user_fullname[1],"Instagram", Sys.Date())
1470851398842:datafolder <- "/Data"
1470851398845:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470851398847:write.csv(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".csv")))#, row.names=FALSE)
1470851398848:}
1470851431497:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="follower_list")
1470851446653:Q
1470851470127:#devtools::install_github("pablobarbera/instaR/instaR")
1470851470129:#install_github("pablobarbera/instaR/instaR")
1470851470129:install.packages('instaR')
1470851477403:#update.packages("instaR")
1470851477404:library("instaR")
1470851477660:# User Functions
1470851477660:# Function to convert Facebook date format to R date format
1470851477662:format.facebook.date <- function(datestring) {
1470851477663:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470851477663:}
1470851477664:#folder <- "19c"
1470851477664:#df <- searchInstagram(tag="beringervyds", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1470851477665:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1470851477668:#floor = "2015-12-31" #"2015-05-01"
1470851477676:#df <- df[df$created_time > floor,]
1470851477676:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1470851477677:#"19crimeswine", "19crimeswine,thebaronsamedi
1470851477677:# scope = public_content basic
1470851477678:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="basic follower_list")
1470851481405:accounts <- c("thebaronsamedi")
1470851489254:Q
1470851495601:roof= Sys.Date()+1
1470851495602:floor = "2016-04-01"
1470851495604:for (account in 1:length(accounts)) {
1470851495604:username=accounts[account]
1470851495608:posts <- getUserMedia(username=accounts[account],token=my_oauth, n=500)
1470851495609:#,n = 1)#, n=200, verbose = TRUE)
1470851495611:#user <- getUser(accounts[account], token=my_oauth)
1470851495612:#df <- getFollowers('womenchampions', token=my_oauth)
1470851495613:df <- posts
1470851495613:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1470851495614:df$datetime <- format.facebook.date(df$created_time)
1470851495614:df$month <- format(df$datetime, "%Y-%m")
1470851495615:df$day <- format(df$datetime, "%Y-%m-%d")
1470851495616:} else {
1470851495619:print("Date fields already exist.")
1470851495619:}
1470851495620:#roof = "2016-05-30"
1470851495620:#floor = "2016-05-01"
1470851495624:df <- df[df$day > floor,]
1470851495625:df <- df[df$day < roof,]
1470851495628:#posts <- posts[posts$created_time > floor,]
1470851495628:#posts <- posts[posts$created_time < roof,]
1470851495631:#posts <- df
1470851495632:follows <- NULL
1470851495636:impressions <- NULL
1470851495639:impressionusers <- NULL
1470851495639:count <- 0
1470851495639:jump <- 1 # Loop paramater
1470851495640:weight <- 0.1 # 10%
1470851495641:for (post in 1:nrow(df)) {
1470851495641:try(impressionusers <- c(
1470851495641:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1470851495642:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1470851495642:)
1470851495643:,silent = TRUE)
1470851495643:impression <- 0
1470851495644:if (is.null(impressionusers) == TRUE){
1470851495644:impressions[post] <- 0
1470851495645:} else {
1470851495645:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1470851495646:for (user in 1:length(impressionusers)){
1470851495646:#print(user)
1470851495650:#print(impression)
1470851495650:userdata <- NULL
1470851495653:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1470851495654:if (is.null(userdata)) {
1470851495657:newimpression <- 0
1470851495657:impression <- as.numeric(newimpression) + as.numeric(impression)
1470851495661:next
1470851495661:} else {
1470851495665:newimpression <- + userdata$follows + userdata$followed_by
1470851495666:impression <- as.numeric(impression) + as.numeric(newimpression)
1470851495669:}
1470851495671:# Scale down to simulate organic
1470851495673:impression = ceiling(weight * impression)
1470851495675:impressions[post] <- impression
1470851495677:}
1470851495678:print(impressions[post])
1470851495681:count = count + 1
1470851495681:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1470851495684:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1470851495685:}
1470851495687:impressions.store <- impressions
1470851495688:#impressions <- round(impressions/5,0)
1470851495691:df <- cbind(df, impressions)
1470851495693:df.store <- df
1470851495696:df[is.na(df)] <- ""
1470851495698:name <- paste(df$user_fullname[1],"Instagram", Sys.Date())
1470851495699:datafolder <- "/Data"
1470851495701:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470851495703:write.csv(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".csv")))#, row.names=FALSE)
1470851495704:}
1470851518089:#write.xlsx(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".xlsx")), row.names=FALSE)
1470851521226:df
1470851535811:getwd()
1470851541015:datafolder
1470851548152:name
1470851591875:instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="basic public_content follower_list")
1470851598527:q
1470851604738:devtools::install_github("pablobarbera/instaR/instaR")
1470851613008:library("instaR")
1470851618378:# User Functions
1470851618378:# Function to convert Facebook date format to R date format
1470851618379:format.facebook.date <- function(datestring) {
1470851618379:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470851618380:}
1470851618381:#folder <- "19c"
1470851618381:#df <- searchInstagram(tag="beringervyds", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1470851618386:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1470851618387:#floor = "2015-12-31" #"2015-05-01"
1470851618389:#df <- df[df$created_time > floor,]
1470851618390:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1470851618391:#"19crimeswine", "19crimeswine,thebaronsamedi
1470851618394:# scope = public_content basic
1470851618394:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="basic public_content follower_list")
1470851693009:library('httpuv')
1470851704267:# User Functions
1470851704268:# Function to convert Facebook date format to R date format
1470851704270:format.facebook.date <- function(datestring) {
1470851704274:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470851704274:}
1470851704278:#folder <- "19c"
1470851704279:#df <- searchInstagram(tag="beringervyds", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1470851704282:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1470851704282:#floor = "2015-12-31" #"2015-05-01"
1470851704285:#df <- df[df$created_time > floor,]
1470851704286:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1470851704290:#"19crimeswine", "19crimeswine,thebaronsamedi
1470851704290:# scope = public_content basic
1470851704293:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="basic public_content follower_list")
1470851719957:c
1470851723182:accounts <- c("thebaronsamedi")
1470851723183:roof= Sys.Date()+1
1470851723184:floor = "2016-04-01"
1470851723185:for (account in 1:length(accounts)) {
1470851723185:username=accounts[account]
1470851723186:posts <- getUserMedia(username=accounts[account],token=my_oauth, n=500)
1470851723186:#,n = 1)#, n=200, verbose = TRUE)
1470851723186:#user <- getUser(accounts[account], token=my_oauth)
1470851723186:#df <- getFollowers('womenchampions', token=my_oauth)
1470851723187:df <- posts
1470851723187:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1470851723187:df$datetime <- format.facebook.date(df$created_time)
1470851723188:df$month <- format(df$datetime, "%Y-%m")
1470851723188:df$day <- format(df$datetime, "%Y-%m-%d")
1470851723188:} else {
1470851723189:print("Date fields already exist.")
1470851723189:}
1470851723191:#roof = "2016-05-30"
1470851723192:#floor = "2016-05-01"
1470851723200:df <- df[df$day > floor,]
1470851723200:df <- df[df$day < roof,]
1470851723204:#posts <- posts[posts$created_time > floor,]
1470851723205:#posts <- posts[posts$created_time < roof,]
1470851723208:#posts <- df
1470851723209:follows <- NULL
1470851723216:impressions <- NULL
1470851723218:impressionusers <- NULL
1470851723218:count <- 0
1470851723222:jump <- 1 # Loop paramater
1470851723222:weight <- 0.1 # 10%
1470851723226:for (post in 1:nrow(df)) {
1470851723227:try(impressionusers <- c(
1470851723229:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1470851723230:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1470851723233:)
1470851723234:,silent = TRUE)
1470851723237:impression <- 0
1470851723239:if (is.null(impressionusers) == TRUE){
1470851723242:impressions[post] <- 0
1470851723245:} else {
1470851723245:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1470851723249:for (user in 1:length(impressionusers)){
1470851723250:#print(user)
1470851723252:#print(impression)
1470851723255:userdata <- NULL
1470851723258:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1470851723260:if (is.null(userdata)) {
1470851723261:newimpression <- 0
1470851723264:impression <- as.numeric(newimpression) + as.numeric(impression)
1470851723265:next
1470851723268:} else {
1470851723269:newimpression <- + userdata$follows + userdata$followed_by
1470851723272:impression <- as.numeric(impression) + as.numeric(newimpression)
1470851723277:}
1470851723283:# Scale down to simulate organic
1470851723284:impression = ceiling(weight * impression)
1470851723287:impressions[post] <- impression
1470851723288:}
1470851723291:print(impressions[post])
1470851723292:count = count + 1
1470851723294:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1470851723295:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1470851723296:}
1470851723300:impressions.store <- impressions
1470851723302:#impressions <- round(impressions/5,0)
1470851723305:df <- cbind(df, impressions)
1470851723308:df.store <- df
1470851723310:df[is.na(df)] <- ""
1470851723313:name <- paste(df$user_fullname[1],"Instagram", Sys.Date())
1470851723317:datafolder <- "/Data"
1470851723320:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470851723325:write.csv(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".csv")))#, row.names=FALSE)
1470851723327:}
1470851733020:df
1470851737988:getUserMedia(username=accounts[account],token=my_oauth, n=500)
1470851743877:my_oauth
1470851759726:install.packages('instaR')
1470851767952:install.packages("instaR")
1470851779557:#update.packages("instaR")
1470851779557:library("instaR")
1470851779742:library('httpuv')
1470851785893:# User Functions
1470851785893:# Function to convert Facebook date format to R date format
1470851785895:format.facebook.date <- function(datestring) {
1470851785895:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470851785896:}
1470851785897:#folder <- "19c"
1470851785898:#df <- searchInstagram(tag="beringervyds", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1470851785901:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1470851785901:#floor = "2015-12-31" #"2015-05-01"
1470851785903:#df <- df[df$created_time > floor,]
1470851785903:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1470851785904:#"19crimeswine", "19crimeswine,thebaronsamedi
1470851785905:# scope = public_content basic
1470851785905:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="public_content")
1470851788425:accounts <- c("thebaronsamedi")
1470851788426:roof= Sys.Date()+1
1470851788428:floor = "2016-04-01"
1470851798103:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="basic public_content")
1470851809435:Q
1470851821493:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="basic public_content follower_list")
1470851833180:accounts <- c("thebaronsamedi")
1470851833181:roof= Sys.Date()+1
1470851833183:floor = "2016-04-01"
1470851836524:or = "2016-04-01"
1470851836525:for (account in 1:length(accounts)) {
1470851836527:username=accounts[account]
1470851836528:posts <- getUserMedia(username=accounts[account],token=my_oauth, n=500)
1470851836531:#,n = 1)#, n=200, verbose = TRUE)
1470851836532:#user <- getUser(accounts[account], token=my_oauth)
1470851836535:#df <- getFollowers('womenchampions', token=my_oauth)
1470851836536:df <- posts
1470851836539:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1470851836539:df$datetime <- format.facebook.date(df$created_time)
1470851836542:df$month <- format(df$datetime, "%Y-%m")
1470851836543:df$day <- format(df$datetime, "%Y-%m-%d")
1470851836546:} else {
1470851836546:print("Date fields already exist.")
1470851836548:}
1470851836550:#roof = "2016-05-30"
1470851836551:#floor = "2016-05-01"
1470851836554:df <- df[df$day > floor,]
1470851836555:df <- df[df$day < roof,]
1470851836556:#posts <- posts[posts$created_time > floor,]
1470851836556:#posts <- posts[posts$created_time < roof,]
1470851836557:#posts <- df
1470851836558:follows <- NULL
1470851836558:impressions <- NULL
1470851836559:impressionusers <- NULL
1470851836559:count <- 0
1470851836560:jump <- 1 # Loop paramater
1470851836563:weight <- 0.1 # 10%
1470851836564:for (post in 1:nrow(df)) {
1470851836568:try(impressionusers <- c(
1470851836568:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1470851836571:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1470851836571:)
1470851836575:,silent = TRUE)
1470851836575:impression <- 0
1470851836577:if (is.null(impressionusers) == TRUE){
1470851836579:impressions[post] <- 0
1470851836580:} else {
1470851836583:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1470851836584:for (user in 1:length(impressionusers)){
1470851836587:#print(user)
1470851836588:#print(impression)
1470851836590:userdata <- NULL
1470851836592:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1470851836595:if (is.null(userdata)) {
1470851836595:newimpression <- 0
1470851836598:impression <- as.numeric(newimpression) + as.numeric(impression)
1470851836599:next
1470851836600:} else {
1470851836601:newimpression <- + userdata$follows + userdata$followed_by
1470851836604:impression <- as.numeric(impression) + as.numeric(newimpression)
1470851836605:}
1470851836611:# Scale down to simulate organic
1470851836613:impression = ceiling(weight * impression)
1470851836616:impressions[post] <- impression
1470851836617:}
1470851836620:print(impressions[post])
1470851836621:count = count + 1
1470851836623:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1470851836625:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1470851836627:}
1470851836629:impressions.store <- impressions
1470851836631:#impressions <- round(impressions/5,0)
1470851836633:df <- cbind(df, impressions)
1470851836635:df.store <- df
1470851836636:df[is.na(df)] <- ""
1470851836640:name <- paste(df$user_fullname[1],"Instagram", Sys.Date())
1470851836642:datafolder <- "/Data"
1470851836644:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470851836648:write.csv(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".csv")))#, row.names=FALSE)
1470851836650:}
1470851858641:#write.xlsx(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".xlsx")), row.names=FALSE)
1470946204049:articipation rate' function
1470946204050:# - Incorporate Twitter
1470946204050:# Setup -------------------------------------------------------------------
1470946204050:# Load and install all necessary packages for the script
1470946204051:# Required Packages for dataframes, forecasting, graphical visualization, and development
1470946204051:# Use 'install.packages()' if unavailable.
1470946204051:#library(zoo)
1470946204051:#library(forecast)
1470946204052:library(ggplot2)
1470946204605:#library(scales)
1470946204605:library(devtools)
1470946204883:library(compare)
1470946204955:library(xlsx)
1470946208576:require(httr)
1470946208610:require(rjson)
1470946208686:require(RCurl)
1470946209076:# Pull most up to date Github repositories for relevant packages
1470946209076:# Not frequently updated; does not need to be run every time.
1470946209078:#install_github("pablobarbera/Rfacebook/Rfacebook")
1470946209079:#install_github("pablobarbera/instaR/instaR")
1470946209079:# Required packags for plugging into Facebook API
1470946209079:#library(twitteR)
1470946209080:#install.packages('Rfacebook')
1470946209080:library(Rfacebook)
1470946209348:#library(instaR)
1470946209348:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1470946209351:# https://instagram.com/developer/authentication/?hl=en
1470946209354:#setwd("~/Desktop/TWE/Monthly Reports/June 2015")
1470946209357:setwd("~/")
1470946209358:getwd()
1470946209363:# Functions ---------------------------------------------------------------
1470946209364:# User Functions
1470946209366:# Function to convert Facebook date format to R date format
1470946209366:format.facebook.date <- function(datestring) {
1470946209370:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470946209371:}
1470946209375:# Shift a vector up by an amount
1470946209376:shift <- function(x, n){
1470946209378:c(x[-(seq(n))], rep(NA, n))
1470946209378:}
1470946209383:# Get gcd from vector
1470946209383:gcd <- function(x,y) {
1470946209385:r <- x%%y;
1470946209390:return(ifelse(r, gcd(y, r), y))
1470946209390:}
1470946209394:# Inputs ------------------------------------------------------------------
1470946209396:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1470946209397:# Define data range for data (2012 is out of bounds for some metrics)
1470946209397:# http://thinktostart.com/analyzing-facebook-with-r/
1470946209398:fb_oauth <- fbOAuth(app_id="955460364539237", app_secret="0a3e6943c90510dc158fc7683e560f7d",extended_permissions = FALSE)
1470946212059:posts <- 2000
1470946236366:ftokens <- c(
1470946236366:#Sledgehammer Wine
1470946236367:"EAANkZCHOgFWUBAGww2YaNmoGgMCGVZAL0lbcxz9alh5ZAh3bzAHcnfxtjPnM9cAVmJmgFYDXZB0JUZB3WHZBKqd5m0JZAT3JKPHUURZC29Uuf3qwZAZAy2ESfHT5ZCWKDoVvJtpa3GOm6GiiInNgaN2i0hh83tnzZCfgtJYsopt4YFHedgZDZD"
1470946236367:#Chateau Saint Jean
1470946236368:#"EAACEdEose0cBAOwwfrVCmYxjRlHVlMDJAjtEJkfMZBkWVsQbDGv0eXi50MZCc4F2i33vbhmJ6823oIzAbhezsZAkqchpPpYaiB8XzcfZBKS2jSXE22EY1e855OvkfgFyjKPiOPOjOZAQIbDiJg1tHCMMLVjUlwPcoKGBEexWbGQZDZD"
1470946236368:#19 Crimes
1470946236368:#,"EAACEdEose0cBANCXTZAFtviL9VEUq4DhkEwMyzqdmWgZBh68EReZAIEOVBYlTSiS52swRACvjhybfPQGFqEOmJp0OjTSPQ9ZC01R6nxViJ5xDHXPlDCwnnXOBObHYwZAXhQzy52kL3FZA3WcHNrGNIqfJZC9MZCJPkkfXHpVsx3PHQZDZD"
1470946236369:#Beringer Vneyards
1470946236369:#,"EAACEdEose0cBAAfj1KkrLbPzVw0v5gul87LeUeoXUHnN6rlxrVRklAgg214vFGLkQTKeLHEUWDGg9ZBVeTDRQdOietA25FLcAaQCGiKvmLFv3ZAYnMpLg9YKnpNpazKjXKwWpkXZBdjuKB7Ql6JKu4Q8pNOZCk97LWSwW4U8vgZDZD"
1470946236369:#100% Canadian Milk
1470946236370:#"EAACEdEose0cBAK7Hbibie8kWBzeZBqevx9FEVIgUecHAXLLMZAyR974zvJIf2I3LgxiR05o4gZCm7PkRfvSvVCLhtR98AeVBjSZB9A8Ym6KeJSXhmetOFzjaaFxjVJBZBaVxvNQaTQZCxCgfIZCBl7AZCuSx0tSV1b9ZCUGdBj7OUZAAZDZD"
1470946236371:#Lait 100% Canadien
1470946236371:#,"EAACEdEose0cBAMZB9OeGbItotQXru0sp1vggahZCvZCDQvZAQeskIsZC2713k83AAE5fwZBV5UPAoYgk1NIAi64MgHjSLb362JomROuLuBZB2i9OJoPZC0664EuZBpjSMJEDqtdcvJfvlZAFX9TWPeItEEPdR81KfzSGJJ2l8MeDL1pwZDZD"
1470946236372:#Recharge with Milk
1470946236372:#,"CAACEdEose0cBAJ9NPmffbszUQ1HYObOGqdht5XWBoU7zABLhgZB6L53eyqVrt0CPxkZAXQpI0fGW7FHucQ0LgGtmRRlWP6eAQgZBSa6oaRibk9qZAp0xVGZCr4B6AdysmfVlbZCFjoZBYZCJ3sxN1yMdL5jz6yCWOZAAbAv00nXq5wURrgCUe3dXZAZBF2COnBm9YxXk5vFoWWJkQZDZD"
1470946236372:#BaronSamedi
1470946236372:#"EAANkZCHOgFWUBAHaWKdF0oFQrEW1ncmqdZBH064po1PJfWbJZAzIDhJ0z7n2ma06aogrSuA6QUZClnQ4sCRH6YX0O00AuQzEFgvMXYZAD25qZBhDiCp4LW59qZApQZAd6SQlf0sP3ZATCyOM3ToFCxFiMXZCG6AKbHDrqPBxFRxmFFDQZDZD"
1470946236373:)
1470946239131:totalpagedata <- data.frame()
1470946239132:totalpostdata <- data.frame()
1470946258116:#.Options - Check current factory options.
1470946258117:#options(stringsAsFactors = FALSE)
1470946258118:library(httr)
1470946258119:library(RJSONIO)
1470946258227:library(RCurl)
1470946258228:library(devtools)
1470946258230:library(xlsx)
1470946258231:# Install and use Rfacebook; deprecated for direct API call approach.
1470946258233:#install_github("pablobarbera/Rfacebook/Rfacebook")
1470946258234:#library(Rfacebook)
1470946258238:#install.packages("Rfacebook")
1470946258242:#library(Rfacebook)
1470946258245:#Using 'rFacebook' from Github
1470946258248:#fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1470946258248:#callAPI("https://graph.facebook.com/v2.6/act_693722000711682/adgroups?fields=name&limit=1000", fboauth)
1470946258249:# bug fixes, date_preset for v2.6 set to 30 by default, reset to lifetime
1470946258249:# set to more rigorous method that pulls all ads at addaccount_id level, instead of consistent queries
1470946258250:# Functions ---------------------------------------------------------------
1470946258251:# User Functions
1470946258251:# Function to convert Facebook date format to R date format
1470946258252:format.facebook.date <- function(datestring) {
1470946258252:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1470946258252:}
1470946258253:# Inputs ------------------------------------------------------------------
1470946258256:#Turn stringsAsFactors off so rbind works properly.
1470946258257:options(stringsAsFactors = FALSE)
1470946258259:# Find OAuth settings for facebook:
1470946258259:#http://developers.facebook.com/docs/authentication/server-side/
1470946258271:facebook <- oauth_endpoints("facebook")
1470946258273:#facebook <- oauth_endpoint(
1470946258274:#  authorize = "https://www.facebook.com/dialog/oauth",
1470946258277:#  access = "https://graph.facebook.com/oauth/access_token",
1470946258277:#  base = "https://localhost:1410")
1470946258278:# Register an application at https://developers.facebook.com/apps/
1470946258278:#Insert your values below - if secret is omitted, it will look it up in
1470946258282:#the FACEBOOK_CONSUMER_SECRET environmental variable.
1470946258282:app_name <- "r_access"
1470946258285:app_id <- "955460364539237"
1470946258286:app_secret <- "0a3e6943c90510dc158fc7683e560f7d"
1470946258289:scope = "ads_management,manage_pages,publish_actions"
1470946258291:## Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
1470946258293:full_url <- oauth_callback()
1470946258293:full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
1470946258294:message <- paste("Copy and paste into Site URL on Facebook App Settings:",
1470946258297:full_url, "\nWhen done, press any key to continue...")
1470946258298:## Reminder to add callback into the app page.
1470946258302:invisible(readline(message))
1470946258302:myapp <- oauth_app(app_name, app_id, app_secret)
1470946258308:## current httr version, to test which oauth protocol to use. [Required to set global port variables; won't work otherwise.]
1470946258310:if (packageVersion('httr') > "0.6.1"){
1470946258313:Sys.setenv("HTTR_SERVER_PORT" = "1410/")
1470946258313:fb_oauth <- oauth2.0_token(facebook, myapp,
1470946258316:scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
1470946258317:if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
1470946258321:message("Authentication successful.")
1470946258324:}
1470946260400:# Test 1: Facebook Profile Information
1470946260400:req <- GET("https://graph.facebook.com/v2.6/me?fields=id,name", config(token = fb_oauth))
1470946260606:stop_for_status(req)
1470946260607:str(content(req))
1470946260674:# Test 2: Ad Account Information
1470946260674:accountreq <- GET("https://graph.facebook.com/v2.6/act_693722000711682?fields=name", config(token = fb_oauth))
1470946260885:adaccountname <- content(accountreq)[1]$name
1470946260900:adaccountid <- content(accountreq)[2]$id
1470946260905:# Inputs ------------------------------------------------------------------
1470946260906:# /insights is the new /stats; gets ad data at the account and id level
1470946260907:# /keywordstats = interests in ad manager UI
1470946260907:## Variables
1470946260908:# Number of Ads to Pull
1470946260908:ads = 2000 #So far, only 167 in the account.
1470946260909:#try(
1470946260910:#  adreq <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=",")), config(token = fb_oauth))
1470946260912:#)
1470946260913:#stop_for_status(adreq)
1470946260913:#adcontent <- content(adreq)
1470946260913:#adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1470946260914:## Facebook:
1470946260914:#[1] All valid values are: date_start, date_stop, account_id, account_name, adgroup_id, adgroup_name, campaign_group_id, campaign_group_name, campaign_id, campaign_name, action_carousel_card_id, action_carousel_card_name, actions, unique_actions, total_actions, total_unique_actions, action_values, total_action_value, impressions, social_impressions, clicks, social_clicks, unique_impressions, unique_social_impressions, unique_clicks, unique_social_clicks, spend, frequency, social_spend, deeplink_clicks, app_store_clicks, website_clicks, call_to_action_clicks, newsfeed_avg_position, newsfeed_impressions, newsfeed_clicks, reach, social_reach, ctr, unique_ctr, cpc, cpm, cpp, cost_per_total_action, cost_per_action_type, cost_per_unique_click, cost_per_10_sec_video_view, relevance_score, website_ctr, video_avg_sec_watched_actions, video_avg_pct_watched_actions, video_p25_watched_actions, video_p50_watched_actions, video_p75_watched_actions, video_p95_watched_actions, video_p100_watched_actions, video_complete_watched_actions, video_10_sec_watched_actions, video_15_sec_watched_actions, video_30_sec_watched_actions"w
1470946260917:# Processing --------------------------------------------------------------
1470946260918:### Intial Batch Ad Pull
1470946260918:# Dataframe and query result holder
1470946260918:initialcontent <- NULL
1470946260918:after <- NULL
1470946260919:# Pull all ad ids and names, batch mode
1470946260919:#initialreq <- GET(paste0("https://graph.facebook.com/v2.6/act_693722000711682/adcampaigns?fields=name&limit=",ads), config(token = fb_oauth))
1470946260923:initialreq <- 400
1470946260924:count <- 0
1470946260927:while (warn_for_status(initialreq) != TRUE) {
1470946260928:count <- count + 1
1470946260931:print(paste('Query Attempt', count))
1470946260931:initialreq <- GET(paste0("https://graph.facebook.com/v2.6/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
1470946260932:}
1470946261406:initialreq <- GET(paste0("https://graph.facebook.com/v2.6/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
1470946261918:str(content(initialreq))
1470946262446:initialcontent <- content(initialreq)
1470946262458:# List of 154; don't need to paginate yet
1470946262459:#after <- initialcontent$paging$cursors$after
1470946262462:## Loop 1, Organize all ads into dataset
1470946262462:print(paste("Pulling All Ad Campaigns for",paste0(adaccountname,".")))
1470946262466:adlist <- data.frame(NULL, stringsAsFactors = FALSE)
1470946262469:ad <- 0
1470946264250:for (ad in (1:(length(initialcontent$data)))) {
1470946264251:#print(i)
1470946264253:adlist[ad,c("ad.campaign.id")] <- initialcontent$data[[ad]]$id
1470946264253:adlist[ad,c("ad.campaign.name")] <- initialcontent$data[[ad]]$name
1470946264256:adlist[ad,c("objective")] <- initialcontent$data[[ad]]$objective
1470946264257:#adlist[ad,c("status")] <- initialcontent$data[[ad]]$campaign_group_status
1470946264257:adlist[ad,c("created.time")] <- substr(initialcontent$data[[ad]]$created_time, 1, 10)
1470946264258:#adlist[ad,c("campaign id")] <- initialcontent$data[[ad]]$campaign_id
1470946264259:#adlist[ad,c("campaign name")] <- initialcontent$data[[ad]]$campaign_name
1470946264260:# Use this loop to populate with admetrics, and augment initial dataset; will not affect following loops.
1470946264262:completion <- (ad/(length(initialcontent$data))*100)
1470946264264:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1470946264264:}
1470946264570:adlist_store <- adlist
1470946264571:# slice list
1470946268183:adlist
1470946318723:# Metrics to examine
1470946318726:admetrics <- c("frequency,newsfeed_avg_position,ctr,unique_ctr,spend,reach,social_reach,unique_clicks,social_clicks,cost_per_unique_click,total_actions,cost_per_total_action,actions,video_avg_pct_watched_actions,video_avg_sec_watched_actions") #"cost_per_action_type"
1470946318726:# Test Pull for Loop 2
1470946318726:#testreq <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[89,1],"/insights?fields=",paste(admetrics,collapse=",")), config(token = fb_oauth))
1470946318727:#warn_for_status(testreq)
1470946318727:#content(testreq)
1470946318727:# Metrics framed
1470946318728:overalladmetricsreturned <- c("date_start","date_stop","spend","reach","social_reach","frequency","page_engagement","post_engagement","unique_clicks","social_clicks","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view","video_avg_sec_watched_video_view","video_avg_sec_watched_page_engagement","video_avg_sec_watched_post_engagement","video_avg_pct_watched_video_view","video_avg_pct_watched_page_engagement","video_avg_pct_watched_post_engagement")
1470946318729:#number of columns = length(c(names(header),overalladmetricsreturned))
1470946318729:#adstart <- ad
1470946325342:paste0("https://graph.facebook.com/v2.6/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&date_preset=lifetime&time_increment=1"
1470946327154:)
1470946419382:?grep
1470946454997:grep("(BER|CSJ|SLE|19C)",adlist$ad.campaign.name)
1470946459182:adlist[grep("(BER|CSJ|SLE|19C)",adlist$ad.campaign.name)]
1470946462387:adlist[grep("(BER|CSJ|SLE|19C)",adlist$ad.campaign.name),]
1470946470140:adlist
1470946535826:adlist[grep("(!BAR)",adlist$ad.campaign.name),]
1470946581697:adlist
1470946744662:subset(adlist, created.time > "2016-04-26")
1470946749512:adlist <- subset(adlist, created.time > "2016-04-26")
1470946753129:adoveralldata <- data.frame(stringsAsFactors = FALSE)
1470946758257:for (ad in 1:nrow(adlist)) {
1470946758258:print(paste0('Querying Ad ',ad,": ", adlist$ad.campaign.name[ad]))
1470946758258:adreq$status_code = 400
1470946758263:count <- 0
1470946758263:try(adreq <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&date_preset=lifetime&time_increment=1"), config(token = fb_oauth)))
1470946758266:if(adreq$status_code == 400) {
1470946758266:while(adreq$status_code == 400) {
1470946758269:try(adreq <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&date_preset=lifetime&time_increment=1"), config(token = fb_oauth)))
1470946758270:count <- count + 1
1470946758271:print(adreq)
1470946758274:print(paste('Limit Reached. Waiting 30 seconds.'))
1470946758275:print(paste('Attempt:',count))
1470946758278:Sys.sleep(30) #5*60
1470946758279:}
1470946758282:} else {
1470946758282:print('Query successful.')
1470946758286:}
1470946758290:# Organize/clean data
1470946758291:adcontent <- content(adreq)
1470946758293:adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1470946758295:print(adcontentparsed)
1470946758299:nextpage <- adcontent$paging$`next`
1470946758301:while (is.null(nextpage) == FALSE) {
1470946758303:#print("Additional Days")
1470946758305:adreq.additional <- GET(adcontent$paging$`next`, config(token = fb_oauth))
1470946758307:adcontent.additional <- content(adreq.additional)
1470946758308:adcontent.additional.parsed <- unlist(adcontent.additional, use.names=TRUE, recursive=TRUE)
1470946758310:adcontentparsed <- c(adcontentparsed,adcontent.additional.parsed)
1470946758313:nextpage <- adcontent.additional$paging$`next`
1470946758314:}
1470946758317:#adcontent2 <- unlist(adcontent$data, use.names=FALSE, recursive=TRUE)
1470946758319:adcontentparsed.store <- adcontentparsed
1470946758323:#adcontentparsed <- adcontentparsed.store
1470946758326:names(adcontentparsed)[(names(adcontentparsed) == ("actions.value"))] <- adcontentparsed[(names(adcontentparsed) == ("actions.action_type"))]
1470946758328:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("actions.action_type")))]
1470946758331:if (length(which(names(adcontentparsed) %in% c("video_avg_pct_watched_actions.action_type","video_avg_sec_watched_actions.action_type"))) > 1) {
1470946758332:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_sec_watched_actions.value"))] <- paste0("video_avg_sec_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1470946758334:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_pct_watched_actions.value"))] <- paste0("video_avg_pct_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1470946758336:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("video_avg_pct_watched_actions.action_type")))]
1470946758339:}
1470946758340:# Frame data for inclusion
1470946758344:days = length((adcontentparsed[overalladmetricsreturned[1] == names(adcontentparsed)]))
1470946758347:header <- c(adlist[ad,c("ad.campaign.id","ad.campaign.name","objective","created.time")])
1470946758348:footer <- data.frame()
1470946758352:if (is.null(adcontentparsed)==TRUE) {
1470946758353:footer <- rep(0,length(overalladmetricsreturned))
1470946758356:names(footer) <- overalladmetricsreturned
1470946758357:adoverallset <- c(unlist(header),footer)
1470946758359:} else {
1470946758361:for (day in 1:days) {
1470946758364:for (metric in 1:length(overalladmetricsreturned)) {
1470946758366:if (is.na(adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]) == TRUE) {
1470946758368:footer[day,metric] <- 0
1470946758371:} else {
1470946758373:footer[day,metric] <- adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]
1470946758375:}
1470946758480:colnames(footer) <- overalladmetricsreturned
1470946758509:adoverallset <- cbind(header,footer)
1470946758516:}
1470946758523:adoveralldata <- rbind(adoveralldata,adoverallset)
1470946758527:colnames(adoveralldata) <- c(names(header),overalladmetricsreturned)
1470946758532:# Print processing stats
1470946758536:#completion <- (ad/(nrow(adlist))*100)
1470946758539:#print(ad)
1470946758541:#print(nrow(adoveralldata))
1470946758544:#print(paste0("Finding Facebook Data for Ad Set ",ad,": ",adlist[ad,2]))
1470946758547:print(paste0('Primary dataset appended: ',nrow(adoveralldata),' rows retrieved from Facebook.'))
1470946758550:#print(paste(paste0(round(completion, digits = 0),"%"), "of Ads Processed."))
1470946758554:}
1470947915098:#names(adoveralldata) <- overalladmetricsreturned
1470947915099:print(adoveralldata)
1470948804889:#names(adoveralldata) <- overalladmetricsreturned
1470948804890:print(adoveralldata)
1470948805089:# Exporting ---------------------------------------------------------------
1470948805089:adoveralldatastore <- adoveralldata
1470948805092:#adoveralldata <- adoveralldatastore
1470948805092:adoveralldata[is.na(adoveralldata)] <- ""
1470948805099:#adoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)
1470948805100:#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1470948805101:#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1470948805101:setwd("/Users/vivek.menon")
1470948805102:datafolder <- "Data"
1470948805102:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1470948805103:# Rename columns for Excel readability
1470948805103:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1470948805106:# output Page dataset as final csv
1470948805106:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1470948805107:#write.xlsx(adoveralldata, paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1470948805107:write.csv(adoveralldata, file = paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".csv"), row.names=FALSE)
1472563468040:library(httr)
1472563468076:library(RJSONIO)
1472563468137:library(RCurl)
1472563468308:library(devtools)
1472563468363:library(xlsx)
1472563469406:# Install and use Rfacebook; deprecated for direct API call approach.
1472563469406:#install_github("pablobarbera/Rfacebook/Rfacebook")
1472563469408:#library(Rfacebook)
1472563469409:#install.packages("Rfacebook")
1472563469409:#library(Rfacebook)
1472563469409:#Using 'rFacebook' from Github
1472563469410:#fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1472563469410:#callAPI("https://graph.facebook.com/v2.6/act_693722000711682/adgroups?fields=name&limit=1000", fboauth)
1472563469411:# bug fixes, date_preset for v2.6 set to 30 by default, reset to lifetime
1472563469411:# set to more rigorous method that pulls all ads at addaccount_id level, instead of consistent queries
1472751940738:library(httr)
1472751940776:library(RJSONIO)
1472751940840:library(RCurl)
1472751941036:library(devtools)
1472751941104:library(xlsx)
1472751952907:# Setup -------------------------------------------------------------------
1472751952908:#.Options - Check current factory options.
1472751952909:#options(stringsAsFactors = FALSE)
1472751952910:library(httr)
1472751952948:library(RJSONIO)
1472751953030:library(RCurl)
1472751953252:library(devtools)
1472751953326:library(xlsx)
1472752482127:# Setup -------------------------------------------------------------------
1472752482131:#.Options - Check current factory options.
1472752482131:#options(stringsAsFactors = FALSE)
1472752482134:library(httr)
1472752482168:library(RJSONIO)
1472752482268:library(RCurl)
1472752482625:library(devtools)
1472752482724:library(xlsx)
1472752485972:# Install and use Rfacebook; deprecated for direct API call approach.
1472752485974:#install_github("pablobarbera/Rfacebook/Rfacebook")
1472752485975:#library(Rfacebook)
1472752485979:#install.packages("Rfacebook")
1472752485980:#library(Rfacebook)
1472752485983:#Using 'rFacebook' from Github
1472752485990:#fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1472752485995:#callAPI("https://graph.facebook.com/v2.6/act_693722000711682/adgroups?fields=name&limit=1000", fboauth)
1472752485996:# bug fixes, date_preset for v2.6 set to 30 by default, reset to lifetime
1472752486008:# set to more rigorous method that pulls all ads at addaccount_id level, instead of consistent queries
1472752486011:# Functions ---------------------------------------------------------------
1472752486013:# User Functions
1472752486015:# Function to convert Facebook date format to R date format
1472752486015:format.facebook.date <- function(datestring) {
1472752486018:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1472752486019:}
1472752486020:# Inputs ------------------------------------------------------------------
1472752486021:#Turn stringsAsFactors off so rbind works properly.
1472752486025:options(stringsAsFactors = FALSE)
1472752486026:# Find OAuth settings for facebook:
1472752486028:#http://developers.facebook.com/docs/authentication/server-side/
1472752486028:facebook <- oauth_endpoints("facebook")
1472752486029:#facebook <- oauth_endpoint(
1472752486030:#  authorize = "https://www.facebook.com/dialog/oauth",
1472752486032:#  access = "https://graph.facebook.com/oauth/access_token",
1472752486033:#  base = "https://localhost:1410")
1472752486033:# Register an application at https://developers.facebook.com/apps/
1472752486034:#Insert your values below - if secret is omitted, it will look it up in
1472752486037:#the FACEBOOK_CONSUMER_SECRET environmental variable.
1472752486038:app_name <- "r_access"
1472752486038:app_id <- "955460364539237"
1472752486039:app_secret <- "0a3e6943c90510dc158fc7683e560f7d"
1472752486040:scope = "ads_management,manage_pages,publish_actions"
1472752486041:## Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
1472752486041:full_url <- oauth_callback()
1472752486042:full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
1472752486043:message <- paste("Copy and paste into Site URL on Facebook App Settings:",
1472752486044:full_url, "\nWhen done, press any key to continue...")
1472752486045:## Reminder to add callback into the app page.
1472752486048:invisible(readline(message))
1472752486050:myapp <- oauth_app(app_name, app_id, app_secret)
1472752486051:## current httr version, to test which oauth protocol to use. [Required to set global port variables; won't work otherwise.]
1472752486053:if (packageVersion('httr') > "0.6.1"){
1472752486053:Sys.setenv("HTTR_SERVER_PORT" = "1410/")
1472752486055:fb_oauth <- oauth2.0_token(facebook, myapp,
1472752486055:scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
1472752486056:if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
1472752486056:message("Authentication successful.")
1472752486057:}
1472752487611:# Test 1: Facebook Profile Information
1472752487612:req <- GET("https://graph.facebook.com/v2.6/me?fields=id,name", config(token = fb_oauth))
1472752488079:stop_for_status(req)
1472752488080:str(content(req))
1472752488158:# Test 2: Ad Account Information
1472752488158:accountreq <- GET("https://graph.facebook.com/v2.6/act_693722000711682?fields=name", config(token = fb_oauth))
1472752488410:adaccountname <- content(accountreq)[1]$name
1472752488417:adaccountid <- content(accountreq)[2]$id
1472752488422:# Inputs ------------------------------------------------------------------
1472752488422:# /insights is the new /stats; gets ad data at the account and id level
1472752488425:# /keywordstats = interests in ad manager UI
1472752488426:## Variables
1472752488429:# Number of Ads to Pull
1472752488429:ads = 2000 #So far, only 167 in the account.
1472752496253:# Processing --------------------------------------------------------------
1472752496256:### Intial Batch Ad Pull
1472752496256:# Dataframe and query result holder
1472752496260:initialcontent <- NULL
1472752496260:after <- NULL
1472752496265:# Pull all ad ids and names, batch mode
1472752496266:#initialreq <- GET(paste0("https://graph.facebook.com/v2.6/act_693722000711682/adcampaigns?fields=name&limit=",ads), config(token = fb_oauth))
1472752496267:initialreq <- 400
1472752496268:count <- 0
1472752496269:while (warn_for_status(initialreq) != TRUE) {
1472752496270:count <- count + 1
1472752496273:print(paste('Query Attempt', count))
1472752496273:initialreq <- GET(paste0("https://graph.facebook.com/v2.6/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
1472752496274:}
1472752496867:initialreq <- GET(paste0("https://graph.facebook.com/v2.6/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
1472752497560:str(content(initialreq))
1472752497968:initialcontent <- content(initialreq)
1472752497981:# List of 154; don't need to paginate yet
1472752497981:#after <- initialcontent$paging$cursors$after
1472752497983:## Loop 1, Organize all ads into dataset
1472752497984:print(paste("Pulling All Ad Campaigns for",paste0(adaccountname,".")))
1472752497987:adlist <- data.frame(NULL, stringsAsFactors = FALSE)
1472752497994:ad <- 0
1472752497995:for (ad in (1:(length(initialcontent$data)))) {
1472752497996:#print(i)
1472752497996:adlist[ad,c("ad.campaign.id")] <- initialcontent$data[[ad]]$id
1472752497996:adlist[ad,c("ad.campaign.name")] <- initialcontent$data[[ad]]$name
1472752497997:adlist[ad,c("objective")] <- initialcontent$data[[ad]]$objective
1472752497997:#adlist[ad,c("status")] <- initialcontent$data[[ad]]$campaign_group_status
1472752497997:adlist[ad,c("created.time")] <- substr(initialcontent$data[[ad]]$created_time, 1, 10)
1472752497998:#adlist[ad,c("campaign id")] <- initialcontent$data[[ad]]$campaign_id
1472752497998:#adlist[ad,c("campaign name")] <- initialcontent$data[[ad]]$campaign_name
1472752498001:# Use this loop to populate with admetrics, and augment initial dataset; will not affect following loops.
1472752498002:completion <- (ad/(length(initialcontent$data))*100)
1472752498002:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1472752498003:}
1472752498137:adlist_store <- adlist
1472752520877:adoveralldata <- data.frame(stringsAsFactors = FALSE)
1472752520878:# Baron
1472752520879:adlist <- adlist[grep("(baron",adlist$ad.campaign.name),]
1472752532403:adlist <- adlist[grep("baron",adlist$ad.campaign.name),]
1472752534239:adlist
1472752550681:ist_sliced <- adlist
1472752550683:# Metrics to examine
1472752550683:admetrics <- c("frequency,newsfeed_avg_position,ctr,unique_ctr,spend,reach,social_reach,unique_clicks,social_clicks,cost_per_unique_click,total_actions,cost_per_total_action,actions,video_avg_pct_watched_actions,video_avg_sec_watched_actions") #"cost_per_action_type"
1472752550687:# Test Pull for Loop 2
1472752550687:#testreq <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[89,1],"/insights?fields=",paste(admetrics,collapse=",")), config(token = fb_oauth))
1472752550690:#warn_for_status(testreq)
1472752550690:#content(testreq)
1472752552671:adlist
1472752554074:adlist_store
1472752556659:adlist <- adlist_store
1472752563311:t_sliced <- adlist
1472752563313:# Metrics to examine
1472752563314:admetrics <- c("frequency,newsfeed_avg_position,ctr,unique_ctr,spend,reach,social_reach,unique_clicks,social_clicks,cost_per_unique_click,total_actions,cost_per_total_action,actions,video_avg_pct_watched_actions,video_avg_sec_watched_actions") #"cost_per_action_type"
1472752563317:# Test Pull for Loop 2
1472752563317:#testreq <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[89,1],"/insights?fields=",paste(admetrics,collapse=",")), config(token = fb_oauth))
1472752563320:#warn_for_status(testreq)
1472752563321:#content(testreq)
1472752563321:# Metrics framed
1472752563322:overalladmetricsreturned <- c("date_start","date_stop","spend","reach","social_reach","frequency","page_engagement","post_engagement","unique_clicks","social_clicks","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view","video_avg_sec_watched_video_view","video_avg_sec_watched_page_engagement","video_avg_sec_watched_post_engagement","video_avg_pct_watched_video_view","video_avg_pct_watched_page_engagement","video_avg_pct_watched_post_engagement")
1472752563322:#number of columns = length(c(names(header),overalladmetricsreturned))
1472752563323:#adstart <- ad
1472752563326:#600 calls / 600 seconds rate limit
1472752568632:adoveralldata <- data.frame(stringsAsFactors = FALSE)
1472752599012:adlist[grep("baron",adlist$ad.campaign.name),]
1472752606444:adlist[grep("BAR",adlist$ad.campaign.name),]
1472752612385:adlist <- adlist[grep("BAR",adlist$ad.campaign.name),]
1472752620590:print(paste0('Querying Ad ',ad,": ", adlist$ad.campaign.name[ad]))
1472752620912:adreq$status_code = 400
1472752621271:count <- 0
1472752628704:paste0("https://graph.facebook.com/v2.6/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&date_preset=lifetime&time_increment=1
1472752630514:)
1472752635198:""
1472752636614:'asd'
1472752653746:paste0("https://graph.facebook.com/v2.6/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&date_preset=lifetime&time_increment=1")
1472752723512:adlist[ad,1]
1472752727840:adlist[1,1]
1473428277204:# Summary -----------------------------------------------------------------
1473428277205:# Query Facebook data (Page, Post, & Ad) using Facebook Acess Tokens.
1473428277205:# Setup -------------------------------------------------------------------
1473428277208:# Load and install all necessary packages for the script
1473428277209:# Required Packages for dataframes, forecasting, graphical visualization, and development
1473428277209:# Use 'install.packages()' if unavailable
1473428277215:#library(zoo)
1473428277222:#library(forecast)
1473428277222:library(devtools)
1473428277429:library(ggplot2)
1473428279550:#library(scales)
1473428279551:library(devtools)
1473428279552:library(compare)
1473428279710:library(xlsx)
1473428284450:library(httr)
1473428284526:library(rjson)
1473428284664:library(RCurl)
1473428285931:library(roxygen2)
1473428286225:# Pull most up to date Github repositories for relevant packages
1473428286225:# Not frequently updated; does not need to be run every time
1473428286226:#install_github("pablobarbera/Rfacebook/Rfacebook")
1473428286227:#install_github("pablobarbera/instaR/instaR")
1473428293914:ata (Page, Post, & Ad) using Facebook Acess Tokens.
1473428293919:# Setup -------------------------------------------------------------------
1473428293920:# Load and install all necessary packages for the script
1473428293920:# Required Packages for dataframes, forecasting, graphical visualization, and development
1473428293920:# Use 'install.packages()' if unavailable
1473428293921:#library(zoo)
1473428293921:#library(forecast)
1473428293922:library(devtools)
1473428293922:library(ggplot2)
1473428293923:#library(scales)
1473428293923:library(devtools)
1473428293924:library(compare)
1473428293924:library(xlsx)
1473428293925:library(httr)
1473428293926:library(rjson)
1473428293927:library(RCurl)
1473428293930:library(roxygen2)
1473428293931:# Pull most up to date Github repositories for relevant packages
1473428293931:# Not frequently updated; does not need to be run every time
1473428293935:#install_github("pablobarbera/Rfacebook/Rfacebook")
1473428293935:#install_github("pablobarbera/instaR/instaR")
1473428293935:library(Rfacebook)
1473428294237:# User Functions ----------------------------------------------------------
1473428294240:# Some built/discovered functions that help with data manipulation
1473428294243:# Convert Facebook date format to R date format
1473428294243:UnixDate <- function(datestring) {
1473428294258:return(as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT"))
1473428294259:}
1473428294260:# Convert retrieved dates to readable dates and append the dataset
1473428294267:FormatDate <- function (dataset) {
1473428294273:#return(names(dataset))
1473428294274:if ('created_time' %in% names(dataset)) {
1473428294276:if (c('day') %in% names(dataset) == FALSE) {
1473428294279:dataset[, 'datetime'] = UnixDate(dataset$created_time)
1473428294280:dataset[, 'day'] = format(dataset$datetime, "%Y-%m-%d")
1473428294288:dataset[, 'month'] = format(dataset$datetime, "%Y-%m")
1473428294288:} else {
1473428294290:print('Date fields already exist.')
1473428294291:continue
1473428294294:}
1473428294295:} else {
1473428294296:print('created_time field does not exist')
1473428294297:}
1473428294301:if (is.null(dataset$datetime[1]) == TRUE) {
1473428294302:df$datetime <- UnixDate(page$created_time)
1473428294304:dataset <- df
1473428294304:} else {
1473428294309:print("Date fields already exist.")
1473428294320:}
1473428294322:} & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1473428294323:df$month <- format( df$datetime, "%Y-%m")
1473428294324:df$day <- format( df$datetime, "%Y-%m-%d")
1473428294326:# Shift a vector up by an amount
1473428294354:shift <- function(x, n){
1473428294355:c(x[-(seq(n))], rep(NA, n))
1473428294360:}
1473428294362:# Get gcd from vector
1473428294362:gcd <- function(x,y) {
1473428294364:r <- x%%y;
1473428294365:return(ifelse(r, gcd(y, r), y))
1473428294372:}
1473428294410:#
1473428294411:# Inputs ------------------------------------------------------------------
1473428294413:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1473428294415:# Facebook App paramaters (Available at developer.facebook.com)
1473428294416:# Must be set up with localhost:1400 acess for verification
1473428294417:app_id = "955460364539237"
1473428294420:app_name = "r_access"
1473428294420:app_secret = "0a3e6943c90510dc158fc7683e560f7d"
1473428294425:scope = "ads_management,manage_pages,publish_actions"
1473428294427:# Set Desktop as working directory
1473428294427:setwd("~/")
1473428294428:getwd()
1473428294432:# Authorize with Facebook
1473428294433:#Using 'rFacebook' from Github
1473428294440:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1473428296841:# Define data range for data (2012 is out of bounds for some metrics)
1473428296842:# Facebook Functions ------------------------------------------------------
1473428296843:# A higher level wrap up of some Pablo's functions, in order to allow easy deployment
1473428296844:#FacebookAuth = function (app_id, app_secret, scope) {
1473428296846:#fbOAuth(app_id = app_id, app_secret,extended_permissions = scope)
1473428296848:#}
1473428296849:# Create looper for Ftokens
1473428428451:Sys.Date()
1473428431861:Sys.Date() - 60
1473428434878:Sys.Date() - 180
1473428437464:Sys.Date() - 270
1473428440397:Sys.Date() - 200
1473428442874:Sys.Date() - 250
1473428444636:Sys.Date() - 253
1473428446455:Sys.Date() - 252
1473428454308:## Facebook Query ##############
1473428454308:## By Vivek Menon ##############
1473428454310:## v2.0.0 #####################
1473428454311:# Summary -----------------------------------------------------------------
1473428454311:# Query Facebook data (Page, Post, & Ad) using Facebook Acess Tokens.
1473428454315:# Setup -------------------------------------------------------------------
1473428454316:# Load and install all necessary packages for the script
1473428454318:# Required Packages for dataframes, forecasting, graphical visualization, and development
1473428454318:# Use 'install.packages()' if unavailable
1473428454322:#library(zoo)
1473428454322:#library(forecast)
1473428454325:library(devtools)
1473428454326:library(ggplot2)
1473428454327:#library(scales)
1473428454330:library(devtools)
1473428454330:library(compare)
1473428454331:library(xlsx)
1473428454334:library(httr)
1473428454336:library(rjson)
1473428454339:library(RCurl)
1473428454342:library(roxygen2)
1473428454343:# Pull most up to date Github repositories for relevant packages
1473428454345:# Not frequently updated; does not need to be run every time
1473428454346:#install_github("pablobarbera/Rfacebook/Rfacebook")
1473428454346:#install_github("pablobarbera/instaR/instaR")
1473428454346:library(Rfacebook)
1473428454348:# User Functions ----------------------------------------------------------
1473428454349:# Some built/discovered functions that help with data manipulation
1473428454349:# Convert Facebook date format to R date format
1473428454349:UnixDate <- function(datestring) {
1473428454350:return(as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT"))
1473428454350:}
1473428454351:# Convert retrieved dates to readable dates and append the dataset
1473428454352:FormatDate <- function (dataset) {
1473428454356:#return(names(dataset))
1473428454358:if ('created_time' %in% names(dataset)) {
1473428454358:if (c('day') %in% names(dataset) == FALSE) {
1473428454359:dataset[, 'datetime'] = UnixDate(dataset$created_time)
1473428454359:dataset[, 'day'] = format(dataset$datetime, "%Y-%m-%d")
1473428454360:dataset[, 'month'] = format(dataset$datetime, "%Y-%m")
1473428454360:} else {
1473428454361:print('Date fields already exist.')
1473428454364:continue
1473428454365:}
1473428454368:} else {
1473428454369:print('created_time field does not exist')
1473428454372:}
1473428454373:if (is.null(dataset$datetime[1]) == TRUE) {
1473428454375:df$datetime <- UnixDate(page$created_time)
1473428454376:dataset <- df
1473428454379:} else {
1473428454379:print("Date fields already exist.")
1473428454383:}
1473428454384:} & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1473428454385:df$month <- format( df$datetime, "%Y-%m")
1473428454387:df$day <- format( df$datetime, "%Y-%m-%d")
1473428454389:# Shift a vector up by an amount
1473428454391:shift <- function(x, n){
1473428454391:c(x[-(seq(n))], rep(NA, n))
1473428454391:}
1473428454392:# Get gcd from vector
1473428454392:gcd <- function(x,y) {
1473428454396:r <- x%%y;
1473428454396:return(ifelse(r, gcd(y, r), y))
1473428454397:}
1473428454397:#
1473428454398:# Inputs ------------------------------------------------------------------
1473428454401:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1473428454404:# Facebook App paramaters (Available at developer.facebook.com)
1473428454406:# Must be set up with localhost:1400 acess for verification
1473428454407:app_id = "955460364539237"
1473428454410:app_name = "r_access"
1473428454410:app_secret = "0a3e6943c90510dc158fc7683e560f7d"
1473428454416:scope = "ads_management,manage_pages,publish_actions"
1473428454417:# Set Desktop as working directory
1473428454418:setwd("~/")
1473428454422:getwd()
1473428454424:# Authorize with Facebook
1473428454425:#Using 'rFacebook' from Github
1473428454426:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1473428456575:# Define data range for data (2012 is out of bounds for some metrics)
1473428456576:# Facebook Functions ------------------------------------------------------
1473428456578:# A higher level wrap up of some Pablo's functions, in order to allow easy deployment
1473428456578:#FacebookAuth = function (app_id, app_secret, scope) {
1473428456579:#fbOAuth(app_id = app_id, app_secret,extended_permissions = scope)
1473428456579:#}
1473428456586:# Create looper for Ftokens
1473428456587:ftokens <- c(
1473428456588:#Sledgehammer Wine
1473428456589:#"EAACEdEose0cBAEyF7hkNB6lPbRHGjf0vKqW9ZB8sZBSy3LUGTUelMy8ZBE4rTo1HWZAc6IbZBUDkE6p7lhQ7FeCtxb1P0nUvy9x3ltkZCmcP1CyxSaSDZAwlPsUwZBysAtvvTCuqjDxmqZCYv5X4t2GKsZAVENiMZAkcur64cU7qu71xgZDZD"
1473428456589:#Chateau Saint Jean
1473428456589:#,"EAACEdEose0cBAB6y1eZButlUqpuUt1IUau7lDlZChQxE4MiXWMZCuWkCLsI9yZCajIEnIQVxZCQrmR2XMJdsaufMRhh5QOkVrzwcMZAZCC4FctcBfZByjZCVsctpvMmPKJLGRWyyToWvMqxM4CBLi3rELZCipHbfI8QgCj04Py8ZCgVRAZDZD"
1473428456590:#19 Crimes
1473428456590:#,"EAACEdEose0cBAHIQiWkKO8TdkDpxnojS1lDoZATgRap3L8Sz3D0B7WUYilnpj1NvnltXTbOE12QSnEDvjO2KmUZAvMRy3dVrZCBHP9ZCNiGjbXRK5QCkwsA7Vn5cD9oW9BSOGHb92N3o0j9t3ZAlptZA9kGjTv3qymVOvlsg5b7QZDZD"
1473428456590:#Beringer Vneyards
1473428456591:#,"EAACEdEose0cBAP5NwqMtlIxi8HWYe4G6CP1hpHRatyK5AN1X6CDIVu1nDOfSZAI8ovTF4ibkwpkH1NMxEPwBdOgemK6nnbl8rsNF1mCoCYho4wMLrWdlYD5zJuJEOcMOJWJsECwKfFycVIdpymSoFZAq91ZBDZBUkz2DU3OZARgZDZD"
1473428456591:#100% Canadian Milk
1473428456591:"EAANkZCHOgFWUBAOGwJXadEtzVABsP020eEJsZAnJdbgiZBZCT1zi3k5H1lbpJ6HyTgG6mQerHRkxVbE8JTR3lbQEZCbiy1E0PpsvVOQrjECHNHwiqdioJlXN7tWqDLfQrFVmo4NzLZCEHjfyfD2jMbSIZBsaTN4PEQ9oTt6ZBHoyuwZDZD"
1473428456592:#Lait 100% Canadien
1473428456592:,"EAANkZCHOgFWUBAOU8yHMiQu4gZAifGhmZCSXjvKZBf5QnUZBBGxZCVio2oqKuko6qWjFRAp3XEVdZBhlPSKoNiRbHfEIJOYfl7vUs3fPTB60MKfrGDZCbqOAbb4Ga4sYKJHechNPB74WuZCLUfwP1s30n8ZCCcB1EOa3LBgnNh9Ti9zwZDZD"
1473428456592:#Recharge with Milk
1473428456593:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1473428456593:#Misc
1473428456593:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1473428456594:#Baron
1473428456594:#"EAACEdEose0cBAI2QgmxEZBqxE8mHcDzZCBCQLPbpUZCe2tu8PgqbVa9wqZA0g1QPivzf5bMIlZAE6nZAi7ME6cR4Qkm7HTZAWlNY8biAh4Mx2pgX01EResqM24YtVFzlK0krAKjlEPRsxthOEjsTLCyDN4kZBWV5tDAGZCKakPMJcAuvWEcsweror"
1473428456594:)
1473428456596:pagename <- ""
1473428456596:#Authorize using Facebook Token (using above list)
1473428456599:FacebookToken <- function (token) {
1473428456599:me <- getUsers("me", token=ftoken)
1473428456600:assign("ftoken", token, envir = .GlobalEnv)
1473428456600:assign("pageid", me$id, envir = .GlobalEnv)
1473428456604:assign("pagename", me$name, envir = .GlobalEnv) #not working, fuck everything
1473428456607:}
1473428456609:# Access public personal data; basically a ftoken test
1473428456611:me <- getUsers("me", token=ftoken)
1473428457113:print(me$name)
1473428457114:## Page Id
1473428457115:# Define which page will be used for the data collection. Change id's as necessary.
1473428457118:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1473428457118:pageid = me$id
1473428457119:}
1473428457123:ftoken = 'EAACEdEose0cBAJdwZCZB6roJzHZAVY0LWksSZC9LtaIIWbUZAZAORpxhER3CI8ZCirZAemu4SoLe4uuxkNJ032XifSwBCpH7MZCXcHLOYwx4k4T9DMbSaicGvybZCzdomThTQT4yyRZAYauGHq7b1zRqeKZBZCqZAQS8VgMpjjKBbIXbuZCeQZDZD'
1473428457124:posts = '5000'
1473428457125:start.date = Sys.Date() - 252
1473428457126:end.date = Sys.Date()
1473428515556:## Facebook Query ##############
1473428515559:## By Vivek Menon ##############
1473428515559:## v2.0.0 #####################
1473428515560:# Summary -----------------------------------------------------------------
1473428515560:# Query Facebook data (Page, Post, & Ad) using Facebook Acess Tokens.
1473428515562:# Setup -------------------------------------------------------------------
1473428515562:# Load and install all necessary packages for the script
1473428515563:# Required Packages for dataframes, forecasting, graphical visualization, and development
1473428515563:# Use 'install.packages()' if unavailable
1473428515564:#library(zoo)
1473428515564:#library(forecast)
1473428515565:library(devtools)
1473428515565:library(ggplot2)
1473428515566:#library(scales)
1473428515570:library(devtools)
1473428515571:library(compare)
1473428515573:library(xlsx)
1473428515574:library(httr)
1473428515577:library(rjson)
1473428515577:library(RCurl)
1473428515581:library(roxygen2)
1473428515581:# Pull most up to date Github repositories for relevant packages
1473428515584:# Not frequently updated; does not need to be run every time
1473428515585:#install_github("pablobarbera/Rfacebook/Rfacebook")
1473428515588:#install_github("pablobarbera/instaR/instaR")
1473428515589:library(Rfacebook)
1473428515590:# User Functions ----------------------------------------------------------
1473428515590:# Some built/discovered functions that help with data manipulation
1473428515593:# Convert Facebook date format to R date format
1473428515593:UnixDate <- function(datestring) {
1473428515597:return(as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT"))
1473428515598:}
1473428515601:# Convert retrieved dates to readable dates and append the dataset
1473428515604:FormatDate <- function (dataset) {
1473428515606:#return(names(dataset))
1473428515608:if ('created_time' %in% names(dataset)) {
1473428515609:if (c('day') %in% names(dataset) == FALSE) {
1473428515612:dataset[, 'datetime'] = UnixDate(dataset$created_time)
1473428515616:dataset[, 'day'] = format(dataset$datetime, "%Y-%m-%d")
1473428515618:dataset[, 'month'] = format(dataset$datetime, "%Y-%m")
1473428515620:} else {
1473428515621:print('Date fields already exist.')
1473428515623:continue
1473428515624:}
1473428515627:} else {
1473428515628:print('created_time field does not exist')
1473428515630:}
1473428515632:if (is.null(dataset$datetime[1]) == TRUE) {
1473428515634:df$datetime <- UnixDate(page$created_time)
1473428515634:dataset <- df
1473428515635:} else {
1473428515638:print("Date fields already exist.")
1473428515639:}
1473428515640:} & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1473428515641:df$month <- format( df$datetime, "%Y-%m")
1473428515644:df$day <- format( df$datetime, "%Y-%m-%d")
1473428515645:# Shift a vector up by an amount
1473428515647:shift <- function(x, n){
1473428515647:c(x[-(seq(n))], rep(NA, n))
1473428515647:}
1473428515649:# Get gcd from vector
1473428515649:gcd <- function(x,y) {
1473428515649:r <- x%%y;
1473428515650:return(ifelse(r, gcd(y, r), y))
1473428515650:}
1473428515656:#
1473428515656:# Inputs ------------------------------------------------------------------
1473428515659:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1473428515664:# Facebook App paramaters (Available at developer.facebook.com)
1473428515664:# Must be set up with localhost:1400 acess for verification
1473428515666:app_id = "955460364539237"
1473428515667:app_name = "r_access"
1473428515667:app_secret = "0a3e6943c90510dc158fc7683e560f7d"
1473428515668:scope = "ads_management,manage_pages,publish_actions"
1473428515669:# Set Desktop as working directory
1473428515673:setwd("~/")
1473428515674:getwd()
1473428515679:# Authorize with Facebook
1473428515681:#Using 'rFacebook' from Github
1473428515681:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1473428517699:# Define data range for data (2012 is out of bounds for some metrics)
1473428517700:# Facebook Functions ------------------------------------------------------
1473428517701:# A higher level wrap up of some Pablo's functions, in order to allow easy deployment
1473428517702:#FacebookAuth = function (app_id, app_secret, scope) {
1473428517702:#fbOAuth(app_id = app_id, app_secret,extended_permissions = scope)
1473428517702:#}
1473428517703:# Create looper for Ftokens
1473428517703:ftokens <- c(
1473428517704:#Sledgehammer Wine
1473428517707:#"EAACEdEose0cBAEyF7hkNB6lPbRHGjf0vKqW9ZB8sZBSy3LUGTUelMy8ZBE4rTo1HWZAc6IbZBUDkE6p7lhQ7FeCtxb1P0nUvy9x3ltkZCmcP1CyxSaSDZAwlPsUwZBysAtvvTCuqjDxmqZCYv5X4t2GKsZAVENiMZAkcur64cU7qu71xgZDZD"
1473428517707:#Chateau Saint Jean
1473428517708:#,"EAACEdEose0cBAB6y1eZButlUqpuUt1IUau7lDlZChQxE4MiXWMZCuWkCLsI9yZCajIEnIQVxZCQrmR2XMJdsaufMRhh5QOkVrzwcMZAZCC4FctcBfZByjZCVsctpvMmPKJLGRWyyToWvMqxM4CBLi3rELZCipHbfI8QgCj04Py8ZCgVRAZDZD"
1473428517708:#19 Crimes
1473428517708:#,"EAACEdEose0cBAHIQiWkKO8TdkDpxnojS1lDoZATgRap3L8Sz3D0B7WUYilnpj1NvnltXTbOE12QSnEDvjO2KmUZAvMRy3dVrZCBHP9ZCNiGjbXRK5QCkwsA7Vn5cD9oW9BSOGHb92N3o0j9t3ZAlptZA9kGjTv3qymVOvlsg5b7QZDZD"
1473428517709:#Beringer Vneyards
1473428517709:#,"EAACEdEose0cBAP5NwqMtlIxi8HWYe4G6CP1hpHRatyK5AN1X6CDIVu1nDOfSZAI8ovTF4ibkwpkH1NMxEPwBdOgemK6nnbl8rsNF1mCoCYho4wMLrWdlYD5zJuJEOcMOJWJsECwKfFycVIdpymSoFZAq91ZBDZBUkz2DU3OZARgZDZD"
1473428517709:#100% Canadian Milk
1473428517710:"EAANkZCHOgFWUBAOGwJXadEtzVABsP020eEJsZAnJdbgiZBZCT1zi3k5H1lbpJ6HyTgG6mQerHRkxVbE8JTR3lbQEZCbiy1E0PpsvVOQrjECHNHwiqdioJlXN7tWqDLfQrFVmo4NzLZCEHjfyfD2jMbSIZBsaTN4PEQ9oTt6ZBHoyuwZDZD"
1473428517710:#Lait 100% Canadien
1473428517710:,"EAANkZCHOgFWUBAOU8yHMiQu4gZAifGhmZCSXjvKZBf5QnUZBBGxZCVio2oqKuko6qWjFRAp3XEVdZBhlPSKoNiRbHfEIJOYfl7vUs3fPTB60MKfrGDZCbqOAbb4Ga4sYKJHechNPB74WuZCLUfwP1s30n8ZCCcB1EOa3LBgnNh9Ti9zwZDZD"
1473428517711:#Recharge with Milk
1473428517711:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1473428517711:#Misc
1473428517712:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1473428517712:#Baron
1473428517712:#"EAACEdEose0cBAI2QgmxEZBqxE8mHcDzZCBCQLPbpUZCe2tu8PgqbVa9wqZA0g1QPivzf5bMIlZAE6nZAi7ME6cR4Qkm7HTZAWlNY8biAh4Mx2pgX01EResqM24YtVFzlK0krAKjlEPRsxthOEjsTLCyDN4kZBWV5tDAGZCKakPMJcAuvWEcsweror"
1473428517713:)
1473428517714:pagename <- ""
1473428517714:#Authorize using Facebook Token (using above list)
1473428517717:FacebookToken <- function (token) {
1473428517717:me <- getUsers("me", token=ftoken)
1473428517718:assign("ftoken", token, envir = .GlobalEnv)
1473428517718:assign("pageid", me$id, envir = .GlobalEnv)
1473428517719:assign("pagename", me$name, envir = .GlobalEnv) #not working, fuck everything
1473428517719:}
1473428517720:# Access public personal data; basically a ftoken test
1473428517723:me <- getUsers("me", token=ftoken)
1473428518231:print(me$name)
1473428518232:## Page Id
1473428518233:# Define which page will be used for the data collection. Change id's as necessary.
1473428518233:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1473428518233:pageid = me$id
1473428518234:}
1473428518237:ftoken = 'EAACEdEose0cBAJdwZCZB6roJzHZAVY0LWksSZC9LtaIIWbUZAZAORpxhER3CI8ZCirZAemu4SoLe4uuxkNJ032XifSwBCpH7MZCXcHLOYwx4k4T9DMbSaicGvybZCzdomThTQT4yyRZAYauGHq7b1zRqeKZBZCqZAQS8VgMpjjKBbIXbuZCeQZDZD'
1473428518238:posts = '5000'
1473428518238:start.date = Sys.Date() - 252
1473428518239:end.date = Sys.Date()
1473428518240:# Page Metrics to automatically pull
1473428518242:dailymetrics = c("page_impressions_unique","page_impressions", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions")
1473428518243:lifetimemetrics = c('')
1473428518244:#c(
1473428518244:#names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1473428518245:FacebookPageData = function(ftoken, posts, start.date, end.date, metrics) {
1473428518245:unix.start.date = UnixDate(start.date)
1473428518245:unix.end.date = UnixDate(end.date)
1473428518246:# Setup date range
1473428518247:date.range = seq(as.Date(start.date), as.Date(end.date), by="days")
1473428518248:# Setup data frame to recieve data
1473428518248:#totalpagedata <- data.frame()
1473428518252:# Retrieve Page Posts from Start to End Date
1473428518252:page <- getPage(pageid, ftoken, n = posts, since = UnixDate(start.date), until = UnixDate(end.date))
1473428518256:## Appending Routine ---
1473428518256:# Add some date columns
1473428518259:page[, 'datetime'] = UnixDate(page$created_time)
1473428518260:page[, 'day'] = format(page$datetime, "%Y-%m-%d")
1473428518263:page[, 'month'] = format(page$datetime, "%Y-%m")
1473428518264:## Retrieval Routine ---
1473428518267:period = 'day'
1473428518268:pull <- getInsights(object_id=pageid, token=ftoken, metric=dailymetrics[1], period=period, parms=paste0('&since=',unix.start.date,'&until=',unix.end.date))
1473428518272:# Retrieve data for metrics
1473428518272:for (metric in 1:length(metrics)) {
1473428518275:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1473428518277:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1473428518278:period = 'lifetime'
1473428518279:# Lifetime Metric subroutine
1473428518282:} else {
1473428518283:# Daily Metric subroutine
1473428518286:period = 'day'
1473428518288:try(
1473428518290:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1473428518291:)
1473428518295:if (floor < tempfloor) {
1473428518297:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1473428518298:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1473428518299:weeks = tempweeks
1473428518303:} else {}
1473428518304:} else {
1473428518306:period = 'day'
1473428518306:weeks <- (nrow(pagedata)/5)-2
1473428518309:}
1473428518310:hold <- matrix(0, nrow=0, ncol=7)
1473428518310:for (week in 0:weeks) {
1473428518311:end <- pagedata$date[(week*5)+1]
1473428518314:start <- pagedata$date[((week+1)*5)+1]
1473428518315:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1473428518318:pull <- NULL
1473428518319:attempt <- 1
1473428518322:while(is.null(pull) && attempt <= 10) {
1473428518322:attempt <- attempt + 1
1473428518325:try(
1473428518326:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1473428518329:)
1473428518330:if (is.null(pull)) {
1473428518332:print("Empty Pull. Re-attempting.")
1473428518333:print(paste("Attempt", attempt))
1473428518333:} else {
1473428518334:pull$datetime <- format.facebook.date(pull$end_time)
1473428518334:pull$day <- format(pull$datetime, "%Y-%m-%d")
1473428518336:pull$datetime <- as.Date(pull$datetime)
1473428518339:#page$month <- as.Date(page$month)
1473428518340:pull$day <- as.Date(pull$day)
1473428518344:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1473428518344:print("Found Facebook data matching date range. Storing values.")
1473428518346:} else {
1473428518347:print("Did not find Facebook data matching dataset dates. Re-querying.")
1473428518350:print(paste("Attempt", attempt))
1473428518351:pull <- NULL}
1473428518354:if (attempt > 100) {
1473428518355:print('Too many attempts. Skipping.')
1473428518358:pull <- NULL
1473428518358:break
1473428518359:} else {}
1473428518361:}
1473428518362:pulllength <- ncol(pull)
1473428518364:rpull = pull[rev(rownames(pull)),]
1473428518366:hold <- rbind(hold,rpull)
1473428518366:rawhold <- hold
1473428518370:}
1473428562673:## Facebook Query ##############
1473428562676:## By Vivek Menon ##############
1473428562676:## v2.0.0 #####################
1473428562677:# Summary -----------------------------------------------------------------
1473428562677:# Query Facebook data (Page, Post, & Ad) using Facebook Acess Tokens.
1473428562681:# Setup -------------------------------------------------------------------
1473428562681:# Load and install all necessary packages for the script
1473428562684:# Required Packages for dataframes, forecasting, graphical visualization, and development
1473428562685:# Use 'install.packages()' if unavailable
1473428562686:#library(zoo)
1473428562686:#library(forecast)
1473428562686:library(devtools)
1473428562825:library(ggplot2)
1473428563249:#library(scales)
1473428563249:library(devtools)
1473428563251:library(compare)
1473428563314:library(xlsx)
1473428566210:library(httr)
1473428566282:library(rjson)
1473428566346:library(RCurl)
1473428566851:library(roxygen2)
1473428567058:# Pull most up to date Github repositories for relevant packages
1473428567058:# Not frequently updated; does not need to be run every time
1473428567060:#install_github("pablobarbera/Rfacebook/Rfacebook")
1473428567061:#install_github("pablobarbera/instaR/instaR")
1473428567065:library(Rfacebook)
1473428567249:# User Functions ----------------------------------------------------------
1473428567250:# Some built/discovered functions that help with data manipulation
1473428567252:# Convert Facebook date format to R date format
1473428567253:UnixDate <- function(datestring) {
1473428567255:return(as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT"))
1473428567256:}
1473428567257:# Convert retrieved dates to readable dates and append the dataset
1473428567257:FormatDate <- function (dataset) {
1473428567262:#return(names(dataset))
1473428567264:if ('created_time' %in% names(dataset)) {
1473428567264:if (c('day') %in% names(dataset) == FALSE) {
1473428567267:dataset[, 'datetime'] = UnixDate(dataset$created_time)
1473428567268:dataset[, 'day'] = format(dataset$datetime, "%Y-%m-%d")
1473428567269:dataset[, 'month'] = format(dataset$datetime, "%Y-%m")
1473428567272:} else {
1473428567272:print('Date fields already exist.')
1473428567273:continue
1473428567273:}
1473428567276:} else {
1473428567277:print('created_time field does not exist')
1473428567277:}
1473428567278:if (is.null(dataset$datetime[1]) == TRUE) {
1473428567278:df$datetime <- UnixDate(page$created_time)
1473428567281:dataset <- df
1473428567281:} else {
1473428567286:print("Date fields already exist.")
1473428567287:}
1473428567292:} & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1473428567292:df$month <- format( df$datetime, "%Y-%m")
1473428567296:df$day <- format( df$datetime, "%Y-%m-%d")
1473428567298:# Shift a vector up by an amount
1473428567299:shift <- function(x, n){
1473428567299:c(x[-(seq(n))], rep(NA, n))
1473428567299:}
1473428567300:# Get gcd from vector
1473428567300:gcd <- function(x,y) {
1473428567303:r <- x%%y;
1473428567304:return(ifelse(r, gcd(y, r), y))
1473428567304:}
1473428567305:#
1473428567305:# Inputs ------------------------------------------------------------------
1473428567309:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1473428567310:# Facebook App paramaters (Available at developer.facebook.com)
1473428567312:# Must be set up with localhost:1400 acess for verification
1473428567312:app_id = "955460364539237"
1473428567313:app_name = "r_access"
1473428567313:app_secret = "0a3e6943c90510dc158fc7683e560f7d"
1473428567313:scope = "ads_management,manage_pages,publish_actions"
1473428567314:# Set Desktop as working directory
1473428567315:setwd("~/")
1473428567316:getwd()
1473428567316:# Authorize with Facebook
1473428567317:#Using 'rFacebook' from Github
1473428567317:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1473428569834:# Define data range for data (2012 is out of bounds for some metrics)
1473428569834:# Facebook Functions ------------------------------------------------------
1473428569837:# A higher level wrap up of some Pablo's functions, in order to allow easy deployment
1473428569837:#FacebookAuth = function (app_id, app_secret, scope) {
1473428569838:#fbOAuth(app_id = app_id, app_secret,extended_permissions = scope)
1473428569841:#}
1473428569841:# Create looper for Ftokens
1473428569842:ftokens <- c(
1473428569843:#Sledgehammer Wine
1473428569846:#"EAACEdEose0cBAEyF7hkNB6lPbRHGjf0vKqW9ZB8sZBSy3LUGTUelMy8ZBE4rTo1HWZAc6IbZBUDkE6p7lhQ7FeCtxb1P0nUvy9x3ltkZCmcP1CyxSaSDZAwlPsUwZBysAtvvTCuqjDxmqZCYv5X4t2GKsZAVENiMZAkcur64cU7qu71xgZDZD"
1473428569846:#Chateau Saint Jean
1473428569847:#,"EAACEdEose0cBAB6y1eZButlUqpuUt1IUau7lDlZChQxE4MiXWMZCuWkCLsI9yZCajIEnIQVxZCQrmR2XMJdsaufMRhh5QOkVrzwcMZAZCC4FctcBfZByjZCVsctpvMmPKJLGRWyyToWvMqxM4CBLi3rELZCipHbfI8QgCj04Py8ZCgVRAZDZD"
1473428569847:#19 Crimes
1473428569847:#,"EAACEdEose0cBAHIQiWkKO8TdkDpxnojS1lDoZATgRap3L8Sz3D0B7WUYilnpj1NvnltXTbOE12QSnEDvjO2KmUZAvMRy3dVrZCBHP9ZCNiGjbXRK5QCkwsA7Vn5cD9oW9BSOGHb92N3o0j9t3ZAlptZA9kGjTv3qymVOvlsg5b7QZDZD"
1473428569848:#Beringer Vneyards
1473428569848:#,"EAACEdEose0cBAP5NwqMtlIxi8HWYe4G6CP1hpHRatyK5AN1X6CDIVu1nDOfSZAI8ovTF4ibkwpkH1NMxEPwBdOgemK6nnbl8rsNF1mCoCYho4wMLrWdlYD5zJuJEOcMOJWJsECwKfFycVIdpymSoFZAq91ZBDZBUkz2DU3OZARgZDZD"
1473428569848:#100% Canadian Milk
1473428569849:"EAANkZCHOgFWUBAEmrJ2GBsINYbyetoAGRrBKU2tZCPWOWlodmBS9gknNFH3zBfvXCtTYnRsgRVzZAr5LOdAnZBVLj8zX3Xuv7oVxbmmcNfiNZCTTpQfbdWmHb2W1yZAtakecO9yeCPjPljAxRZAagdxsH82IA9wdk56xdi2KUZB28AZDZD"
1473428569849:#Lait 100% Canadien
1473428569850:,"EAANkZCHOgFWUBAOoOsD3RKLwZC1VGegdIoBB9etcfOL6ToGEpNtzxQkrdsen3VKzwZAQ5ozZCsmDU3KYZBeA4Fg1uJPS6PjW5UlWH2LweqsQq2C4j057ARFvAvSJ5pRKkvsy9nxgaBX68y9vXwTysxTTSIGcYczADujwgOjr1kQZDZD"
1473428569850:#Recharge with Milk
1473428569850:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1473428569851:#Misc
1473428569851:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1473428569852:#Baron
1473428569855:#"EAACEdEose0cBAI2QgmxEZBqxE8mHcDzZCBCQLPbpUZCe2tu8PgqbVa9wqZA0g1QPivzf5bMIlZAE6nZAi7ME6cR4Qkm7HTZAWlNY8biAh4Mx2pgX01EResqM24YtVFzlK0krAKjlEPRsxthOEjsTLCyDN4kZBWV5tDAGZCKakPMJcAuvWEcsweror"
1473428569855:)
1473428569856:pagename <- ""
1473428569857:#Authorize using Facebook Token (using above list)
1473428569860:FacebookToken <- function (token) {
1473428569860:me <- getUsers("me", token=ftoken)
1473428569861:assign("ftoken", token, envir = .GlobalEnv)
1473428569861:assign("pageid", me$id, envir = .GlobalEnv)
1473428569865:assign("pagename", me$name, envir = .GlobalEnv) #not working, fuck everything
1473428569868:}
1473428569869:# Access public personal data; basically a ftoken test
1473428569873:me <- getUsers("me", token=ftoken)
1473428570372:print(me$name)
1473428570373:## Page Id
1473428570374:# Define which page will be used for the data collection. Change id's as necessary.
1473428570374:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1473428570375:pageid = me$id
1473428570376:}
1473428570377:ftoken = 'EAACEdEose0cBAJdwZCZB6roJzHZAVY0LWksSZC9LtaIIWbUZAZAORpxhER3CI8ZCirZAemu4SoLe4uuxkNJ032XifSwBCpH7MZCXcHLOYwx4k4T9DMbSaicGvybZCzdomThTQT4yyRZAYauGHq7b1zRqeKZBZCqZAQS8VgMpjjKBbIXbuZCeQZDZD'
1473428570380:posts = '5000'
1473428570380:start.date = Sys.Date() - 252
1473428570384:end.date = Sys.Date()
1473428570385:# Page Metrics to automatically pull
1473428570387:dailymetrics = c("page_impressions_unique","page_impressions", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions")
1473428570388:lifetimemetrics = c('')
1473428570388:#c(
1473428570391:#names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1473428570392:FacebookPageData = function(ftoken, posts, start.date, end.date, metrics) {
1473428570395:unix.start.date = UnixDate(start.date)
1473428570395:unix.end.date = UnixDate(end.date)
1473428570399:# Setup date range
1473428570399:date.range = seq(as.Date(start.date), as.Date(end.date), by="days")
1473428570403:# Setup data frame to recieve data
1473428570404:#totalpagedata <- data.frame()
1473428570407:# Retrieve Page Posts from Start to End Date
1473428570408:page <- getPage(pageid, ftoken, n = posts, since = UnixDate(start.date), until = UnixDate(end.date))
1473428570410:## Appending Routine ---
1473428570411:# Add some date columns
1473428570415:page[, 'datetime'] = UnixDate(page$created_time)
1473428570416:page[, 'day'] = format(page$datetime, "%Y-%m-%d")
1473428570418:page[, 'month'] = format(page$datetime, "%Y-%m")
1473428570419:## Retrieval Routine ---
1473428570420:period = 'day'
1473428570423:pull <- getInsights(object_id=pageid, token=ftoken, metric=dailymetrics[1], period=period, parms=paste0('&since=',unix.start.date,'&until=',unix.end.date))
1473428570431:# Retrieve data for metrics
1473428570432:for (metric in 1:length(metrics)) {
1473428570435:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1473428570436:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1473428570439:period = 'lifetime'
1473428570439:# Lifetime Metric subroutine
1473428570441:} else {
1473428570443:# Daily Metric subroutine
1473428570444:period = 'day'
1473428570448:try(
1473428570449:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1473428570451:)
1473428570454:if (floor < tempfloor) {
1473428570456:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1473428570458:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1473428570459:weeks = tempweeks
1473428570463:} else {}
1473428570464:} else {
1473428570469:period = 'day'
1473428570469:weeks <- (nrow(pagedata)/5)-2
1473428570472:}
1473428570473:hold <- matrix(0, nrow=0, ncol=7)
1473428570476:for (week in 0:weeks) {
1473428570476:end <- pagedata$date[(week*5)+1]
1473428570480:start <- pagedata$date[((week+1)*5)+1]
1473428570480:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1473428570484:pull <- NULL
1473428570484:attempt <- 1
1473428570487:while(is.null(pull) && attempt <= 10) {
1473428570487:attempt <- attempt + 1
1473428570491:try(
1473428570491:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1473428570494:)
1473428570495:if (is.null(pull)) {
1473428570496:print("Empty Pull. Re-attempting.")
1473428570499:print(paste("Attempt", attempt))
1473428570499:} else {
1473428570500:pull$datetime <- format.facebook.date(pull$end_time)
1473428570500:pull$day <- format(pull$datetime, "%Y-%m-%d")
1473428570502:pull$datetime <- as.Date(pull$datetime)
1473428570503:#page$month <- as.Date(page$month)
1473428570505:pull$day <- as.Date(pull$day)
1473428570505:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1473428570508:print("Found Facebook data matching date range. Storing values.")
1473428570509:} else {
1473428570512:print("Did not find Facebook data matching dataset dates. Re-querying.")
1473428570513:print(paste("Attempt", attempt))
1473428570517:pull <- NULL}
1473428570519:if (attempt > 100) {
1473428570520:print('Too many attempts. Skipping.')
1473428570522:pull <- NULL
1473428570525:break
1473428570526:} else {}
1473428570535:}
1473428570538:pulllength <- ncol(pull)
1473428570541:rpull = pull[rev(rownames(pull)),]
1473428570543:hold <- rbind(hold,rpull)
1473428570544:rawhold <- hold
1473428570545:}
1473428606498:## Facebook Query ##############
1473428606499:## By Vivek Menon ##############
1473428606499:## v2.0.0 #####################
1473428606500:# Summary -----------------------------------------------------------------
1473428606500:# Query Facebook data (Page, Post, & Ad) using Facebook Acess Tokens.
1473428606501:# Setup -------------------------------------------------------------------
1473428606501:# Load and install all necessary packages for the script
1473428606502:# Required Packages for dataframes, forecasting, graphical visualization, and development
1473428606502:# Use 'install.packages()' if unavailable
1473428606503:#library(zoo)
1473428606503:#library(forecast)
1473428606503:library(devtools)
1473428606601:library(ggplot2)
1473428607391:#library(scales)
1473428607392:library(devtools)
1473428607393:library(compare)
1473428607456:library(xlsx)
1473428610852:library(httr)
1473428610961:library(rjson)
1473428611063:library(RCurl)
1473428611412:library(roxygen2)
1473428611582:# Pull most up to date Github repositories for relevant packages
1473428611582:# Not frequently updated; does not need to be run every time
1473428611583:#install_github("pablobarbera/Rfacebook/Rfacebook")
1473428611583:#install_github("pablobarbera/instaR/instaR")
1473428611583:library(Rfacebook)
1473428611755:# User Functions ----------------------------------------------------------
1473428611755:# Some built/discovered functions that help with data manipulation
1473428611756:# Convert Facebook date format to R date format
1473428611756:UnixDate <- function(datestring) {
1473428611757:return(as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT"))
1473428611757:}
1473428611758:# Convert retrieved dates to readable dates and append the dataset
1473428611758:FormatDate <- function (dataset) {
1473428611759:#return(names(dataset))
1473428611760:if ('created_time' %in% names(dataset)) {
1473428611760:if (c('day') %in% names(dataset) == FALSE) {
1473428611760:dataset[, 'datetime'] = UnixDate(dataset$created_time)
1473428611761:dataset[, 'day'] = format(dataset$datetime, "%Y-%m-%d")
1473428611761:dataset[, 'month'] = format(dataset$datetime, "%Y-%m")
1473428611762:} else {
1473428611762:print('Date fields already exist.')
1473428611763:continue
1473428611763:}
1473428611764:} else {
1473428611764:print('created_time field does not exist')
1473428611765:}
1473428611772:if (is.null(dataset$datetime[1]) == TRUE) {
1473428611772:df$datetime <- UnixDate(page$created_time)
1473428611773:dataset <- df
1473428611773:} else {
1473428611774:print("Date fields already exist.")
1473428611774:}
1473428611776:} & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1473428611777:df$month <- format( df$datetime, "%Y-%m")
1473428611781:df$day <- format( df$datetime, "%Y-%m-%d")
1473428611783:# Shift a vector up by an amount
1473428611783:shift <- function(x, n){
1473428611784:c(x[-(seq(n))], rep(NA, n))
1473428611785:}
1473428611786:# Get gcd from vector
1473428611786:gcd <- function(x,y) {
1473428611787:r <- x%%y;
1473428611788:return(ifelse(r, gcd(y, r), y))
1473428611789:}
1473428611792:#
1473428611792:# Inputs ------------------------------------------------------------------
1473428611793:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1473428611794:# Facebook App paramaters (Available at developer.facebook.com)
1473428611795:# Must be set up with localhost:1400 acess for verification
1473428611795:app_id = "955460364539237"
1473428611796:app_name = "r_access"
1473428611797:app_secret = "0a3e6943c90510dc158fc7683e560f7d"
1473428611798:scope = "ads_management,manage_pages,publish_actions"
1473428611802:# Set Desktop as working directory
1473428611802:setwd("~/")
1473428611803:getwd()
1473428611804:# Authorize with Facebook
1473428611805:#Using 'rFacebook' from Github
1473428611806:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1473428615124:# Define data range for data (2012 is out of bounds for some metrics)
1473428615124:# Facebook Functions ------------------------------------------------------
1473428615127:# A higher level wrap up of some Pablo's functions, in order to allow easy deployment
1473428615131:#FacebookAuth = function (app_id, app_secret, scope) {
1473428615131:#fbOAuth(app_id = app_id, app_secret,extended_permissions = scope)
1473428615131:#}
1473428615131:# Create looper for Ftokens
1473428615132:ftokens <- c(
1473428615132:#Sledgehammer Wine
1473428615132:#"EAACEdEose0cBAEyF7hkNB6lPbRHGjf0vKqW9ZB8sZBSy3LUGTUelMy8ZBE4rTo1HWZAc6IbZBUDkE6p7lhQ7FeCtxb1P0nUvy9x3ltkZCmcP1CyxSaSDZAwlPsUwZBysAtvvTCuqjDxmqZCYv5X4t2GKsZAVENiMZAkcur64cU7qu71xgZDZD"
1473428615133:#Chateau Saint Jean
1473428615133:#,"EAACEdEose0cBAB6y1eZButlUqpuUt1IUau7lDlZChQxE4MiXWMZCuWkCLsI9yZCajIEnIQVxZCQrmR2XMJdsaufMRhh5QOkVrzwcMZAZCC4FctcBfZByjZCVsctpvMmPKJLGRWyyToWvMqxM4CBLi3rELZCipHbfI8QgCj04Py8ZCgVRAZDZD"
1473428615133:#19 Crimes
1473428615133:#,"EAACEdEose0cBAHIQiWkKO8TdkDpxnojS1lDoZATgRap3L8Sz3D0B7WUYilnpj1NvnltXTbOE12QSnEDvjO2KmUZAvMRy3dVrZCBHP9ZCNiGjbXRK5QCkwsA7Vn5cD9oW9BSOGHb92N3o0j9t3ZAlptZA9kGjTv3qymVOvlsg5b7QZDZD"
1473428615133:#Beringer Vneyards
1473428615134:#,"EAACEdEose0cBAP5NwqMtlIxi8HWYe4G6CP1hpHRatyK5AN1X6CDIVu1nDOfSZAI8ovTF4ibkwpkH1NMxEPwBdOgemK6nnbl8rsNF1mCoCYho4wMLrWdlYD5zJuJEOcMOJWJsECwKfFycVIdpymSoFZAq91ZBDZBUkz2DU3OZARgZDZD"
1473428615134:#100% Canadian Milk
1473428615134:"EAANkZCHOgFWUBAEmrJ2GBsINYbyetoAGRrBKU2tZCPWOWlodmBS9gknNFH3zBfvXCtTYnRsgRVzZAr5LOdAnZBVLj8zX3Xuv7oVxbmmcNfiNZCTTpQfbdWmHb2W1yZAtakecO9yeCPjPljAxRZAagdxsH82IA9wdk56xdi2KUZB28AZDZD"
1473428615134:#Lait 100% Canadien
1473428615134:,"EAANkZCHOgFWUBAOoOsD3RKLwZC1VGegdIoBB9etcfOL6ToGEpNtzxQkrdsen3VKzwZAQ5ozZCsmDU3KYZBeA4Fg1uJPS6PjW5UlWH2LweqsQq2C4j057ARFvAvSJ5pRKkvsy9nxgaBX68y9vXwTysxTTSIGcYczADujwgOjr1kQZDZD"
1473428615135:#Recharge with Milk
1473428615135:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1473428615135:#Misc
1473428615136:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1473428615136:#Baron
1473428615136:#"EAACEdEose0cBAI2QgmxEZBqxE8mHcDzZCBCQLPbpUZCe2tu8PgqbVa9wqZA0g1QPivzf5bMIlZAE6nZAi7ME6cR4Qkm7HTZAWlNY8biAh4Mx2pgX01EResqM24YtVFzlK0krAKjlEPRsxthOEjsTLCyDN4kZBWV5tDAGZCKakPMJcAuvWEcsweror"
1473428615137:)
1473428615138:pagename <- ""
1473428615138:#Authorize using Facebook Token (using above list)
1473428615141:FacebookToken <- function (token) {
1473428615142:me <- getUsers("me", token=ftoken)
1473428615145:assign("ftoken", token, envir = .GlobalEnv)
1473428615146:assign("pageid", me$id, envir = .GlobalEnv)
1473428615149:assign("pagename", me$name, envir = .GlobalEnv) #not working, fuck everything
1473428615149:}
1473428615150:# Access public personal data; basically a ftoken test
1473428615151:me <- getUsers("me", token=ftoken)
1473428615635:print(me$name)
1473428615636:## Page Id
1473428615638:# Define which page will be used for the data collection. Change id's as necessary.
1473428615639:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1473428615639:pageid = me$id
1473428615640:}
1473428615643:posts = '5000'
1473428615643:start.date = Sys.Date() - 252
1473428615647:end.date = Sys.Date()
1473428615649:# Page Metrics to automatically pull
1473428615650:dailymetrics = c("page_impressions_unique","page_impressions", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions")
1473428615651:lifetimemetrics = c('')
1473428615652:#c(
1473428615654:#names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1473428615655:FacebookPageData = function(ftoken, posts, start.date, end.date, metrics) {
1473428615655:unix.start.date = UnixDate(start.date)
1473428615656:unix.end.date = UnixDate(end.date)
1473428615656:# Setup date range
1473428615657:date.range = seq(as.Date(start.date), as.Date(end.date), by="days")
1473428615660:# Setup data frame to recieve data
1473428615661:#totalpagedata <- data.frame()
1473428615664:# Retrieve Page Posts from Start to End Date
1473428615665:page <- getPage(pageid, ftoken, n = posts, since = UnixDate(start.date), until = UnixDate(end.date))
1473428615668:## Appending Routine ---
1473428615669:# Add some date columns
1473428615670:page[, 'datetime'] = UnixDate(page$created_time)
1473428615673:page[, 'day'] = format(page$datetime, "%Y-%m-%d")
1473428615673:page[, 'month'] = format(page$datetime, "%Y-%m")
1473428615674:## Retrieval Routine ---
1473428615676:period = 'day'
1473428615677:pull <- getInsights(object_id=pageid, token=ftoken, metric=dailymetrics[1], period=period, parms=paste0('&since=',unix.start.date,'&until=',unix.end.date))
1473428615679:# Retrieve data for metrics
1473428615680:for (metric in 1:length(metrics)) {
1473428615683:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1473428615684:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1473428615685:period = 'lifetime'
1473428615686:# Lifetime Metric subroutine
1473428615690:} else {
1473428615691:# Daily Metric subroutine
1473428615693:period = 'day'
1473428615695:try(
1473428615698:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1473428615699:)
1473428615703:if (floor < tempfloor) {
1473428615705:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1473428615707:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1473428615710:weeks = tempweeks
1473428615712:} else {}
1473428615714:} else {
1473428615715:period = 'day'
1473428615717:weeks <- (nrow(pagedata)/5)-2
1473428615719:}
1473428615721:hold <- matrix(0, nrow=0, ncol=7)
1473428615722:for (week in 0:weeks) {
1473428615725:end <- pagedata$date[(week*5)+1]
1473428615725:start <- pagedata$date[((week+1)*5)+1]
1473428615726:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1473428615726:pull <- NULL
1473428615731:attempt <- 1
1473428615732:while(is.null(pull) && attempt <= 10) {
1473428615736:attempt <- attempt + 1
1473428615736:try(
1473428615740:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1473428615740:)
1473428615744:if (is.null(pull)) {
1473428615745:print("Empty Pull. Re-attempting.")
1473428615757:print(paste("Attempt", attempt))
1473428615757:} else {
1473428615759:pull$datetime <- format.facebook.date(pull$end_time)
1473428615760:pull$day <- format(pull$datetime, "%Y-%m-%d")
1473428615763:pull$datetime <- as.Date(pull$datetime)
1473428615764:#page$month <- as.Date(page$month)
1473428615767:pull$day <- as.Date(pull$day)
1473428615771:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1473428615772:print("Found Facebook data matching date range. Storing values.")
1473428615774:} else {
1473428615775:print("Did not find Facebook data matching dataset dates. Re-querying.")
1473428615776:print(paste("Attempt", attempt))
1473428615777:pull <- NULL}
1473428615779:if (attempt > 100) {
1473428615781:print('Too many attempts. Skipping.')
1473428615783:pull <- NULL
1473428615784:break
1473428615786:} else {}
1473428615786:}
1473428615791:pulllength <- ncol(pull)
1473428615794:rpull = pull[rev(rownames(pull)),]
1473428615797:hold <- rbind(hold,rpull)
1473428615798:rawhold <- hold
1473428615801:}
1473428700942:## Facebook Query ##############
1473428700946:## By Vivek Menon ##############
1473428700946:## v2.0.0 #####################
1473428700949:# Summary -----------------------------------------------------------------
1473428700950:# Query Facebook data (Page, Post, & Ad) using Facebook Acess Tokens.
1473428700953:# Setup -------------------------------------------------------------------
1473428700953:# Load and install all necessary packages for the script
1473428700954:# Required Packages for dataframes, forecasting, graphical visualization, and development
1473428700954:# Use 'install.packages()' if unavailable
1473428700955:#library(zoo)
1473428700955:#library(forecast)
1473428700958:library(devtools)
1473428701237:library(ggplot2)
1473428701826:#library(scales)
1473428701826:library(devtools)
1473428701829:library(compare)
1473428701896:library(xlsx)
1473428704030:library(httr)
1473428704080:library(rjson)
1473428704126:library(RCurl)
1473428704361:library(roxygen2)
1473428704493:# Pull most up to date Github repositories for relevant packages
1473428704494:# Not frequently updated; does not need to be run every time
1473428704494:#install_github("pablobarbera/Rfacebook/Rfacebook")
1473428704494:#install_github("pablobarbera/instaR/instaR")
1473428704495:library(Rfacebook)
1473428704623:# User Functions ----------------------------------------------------------
1473428704623:# Some built/discovered functions that help with data manipulation
1473428704625:# Convert Facebook date format to R date format
1473428704625:UnixDate <- function(datestring) {
1473428704625:return(as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT"))
1473428704626:}
1473428704626:# Convert retrieved dates to readable dates and append the dataset
1473428704627:FormatDate <- function (dataset) {
1473428704627:#return(names(dataset))
1473428704628:if ('created_time' %in% names(dataset)) {
1473428704628:if (c('day') %in% names(dataset) == FALSE) {
1473428704629:dataset[, 'datetime'] = UnixDate(dataset$created_time)
1473428704629:dataset[, 'day'] = format(dataset$datetime, "%Y-%m-%d")
1473428704630:dataset[, 'month'] = format(dataset$datetime, "%Y-%m")
1473428704630:} else {
1473428704631:print('Date fields already exist.')
1473428704631:continue
1473428704632:}
1473428704634:} else {
1473428704635:print('created_time field does not exist')
1473428704635:}
1473428704639:if (is.null(dataset$datetime[1]) == TRUE) {
1473428704639:df$datetime <- UnixDate(page$created_time)
1473428704640:dataset <- df
1473428704641:} else {
1473428704642:print("Date fields already exist.")
1473428704642:}
1473428704643:} & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1473428704644:df$month <- format( df$datetime, "%Y-%m")
1473428704650:df$day <- format( df$datetime, "%Y-%m-%d")
1473428704651:# Shift a vector up by an amount
1473428704651:shift <- function(x, n){
1473428704651:c(x[-(seq(n))], rep(NA, n))
1473428704652:}
1473428704653:# Get gcd from vector
1473428704654:gcd <- function(x,y) {
1473428704654:r <- x%%y;
1473428704654:return(ifelse(r, gcd(y, r), y))
1473428704655:}
1473428704655:#
1473428704656:# Inputs ------------------------------------------------------------------
1473428704656:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1473428704661:# Facebook App paramaters (Available at developer.facebook.com)
1473428704663:# Must be set up with localhost:1400 acess for verification
1473428704663:app_id = "955460364539237"
1473428704664:app_name = "r_access"
1473428704664:app_secret = "0a3e6943c90510dc158fc7683e560f7d"
1473428704665:scope = "ads_management,manage_pages,publish_actions"
1473428704666:# Set Desktop as working directory
1473428704667:setwd("~/")
1473428704670:getwd()
1473428704671:# Authorize with Facebook
1473428704674:#Using 'rFacebook' from Github
1473428704674:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1473428707593:# Define data range for data (2012 is out of bounds for some metrics)
1473428707593:# Facebook Functions ------------------------------------------------------
1473428707596:# A higher level wrap up of some Pablo's functions, in order to allow easy deployment
1473428707597:#FacebookAuth = function (app_id, app_secret, scope) {
1473428707597:#fbOAuth(app_id = app_id, app_secret,extended_permissions = scope)
1473428707598:#}
1473428707601:# Create looper for Ftokens
1473428707601:ftokens <- c(
1473428707601:#Sledgehammer Wine
1473428707601:#"EAACEdEose0cBAEyF7hkNB6lPbRHGjf0vKqW9ZB8sZBSy3LUGTUelMy8ZBE4rTo1HWZAc6IbZBUDkE6p7lhQ7FeCtxb1P0nUvy9x3ltkZCmcP1CyxSaSDZAwlPsUwZBysAtvvTCuqjDxmqZCYv5X4t2GKsZAVENiMZAkcur64cU7qu71xgZDZD"
1473428707602:#Chateau Saint Jean
1473428707602:#,"EAACEdEose0cBAB6y1eZButlUqpuUt1IUau7lDlZChQxE4MiXWMZCuWkCLsI9yZCajIEnIQVxZCQrmR2XMJdsaufMRhh5QOkVrzwcMZAZCC4FctcBfZByjZCVsctpvMmPKJLGRWyyToWvMqxM4CBLi3rELZCipHbfI8QgCj04Py8ZCgVRAZDZD"
1473428707602:#19 Crimes
1473428707602:#,"EAACEdEose0cBAHIQiWkKO8TdkDpxnojS1lDoZATgRap3L8Sz3D0B7WUYilnpj1NvnltXTbOE12QSnEDvjO2KmUZAvMRy3dVrZCBHP9ZCNiGjbXRK5QCkwsA7Vn5cD9oW9BSOGHb92N3o0j9t3ZAlptZA9kGjTv3qymVOvlsg5b7QZDZD"
1473428707603:#Beringer Vneyards
1473428707603:#,"EAACEdEose0cBAP5NwqMtlIxi8HWYe4G6CP1hpHRatyK5AN1X6CDIVu1nDOfSZAI8ovTF4ibkwpkH1NMxEPwBdOgemK6nnbl8rsNF1mCoCYho4wMLrWdlYD5zJuJEOcMOJWJsECwKfFycVIdpymSoFZAq91ZBDZBUkz2DU3OZARgZDZD"
1473428707603:#100% Canadian Milk
1473428707604:"EAANkZCHOgFWUBAEmrJ2GBsINYbyetoAGRrBKU2tZCPWOWlodmBS9gknNFH3zBfvXCtTYnRsgRVzZAr5LOdAnZBVLj8zX3Xuv7oVxbmmcNfiNZCTTpQfbdWmHb2W1yZAtakecO9yeCPjPljAxRZAagdxsH82IA9wdk56xdi2KUZB28AZDZD"
1473428707604:#Lait 100% Canadien
1473428707604:,"EAANkZCHOgFWUBAOoOsD3RKLwZC1VGegdIoBB9etcfOL6ToGEpNtzxQkrdsen3VKzwZAQ5ozZCsmDU3KYZBeA4Fg1uJPS6PjW5UlWH2LweqsQq2C4j057ARFvAvSJ5pRKkvsy9nxgaBX68y9vXwTysxTTSIGcYczADujwgOjr1kQZDZD"
1473428707605:#Recharge with Milk
1473428707605:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1473428707605:#Misc
1473428707606:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1473428707606:#Baron
1473428707607:#"EAACEdEose0cBAI2QgmxEZBqxE8mHcDzZCBCQLPbpUZCe2tu8PgqbVa9wqZA0g1QPivzf5bMIlZAE6nZAi7ME6cR4Qkm7HTZAWlNY8biAh4Mx2pgX01EResqM24YtVFzlK0krAKjlEPRsxthOEjsTLCyDN4kZBWV5tDAGZCKakPMJcAuvWEcsweror"
1473428707607:)
1473428707608:pagename <- ""
1473428707608:#Authorize using Facebook Token (using above list)
1473428707611:FacebookToken <- function (token) {
1473428707612:me <- getUsers("me", token=ftoken)
1473428707612:assign("ftoken", token, envir = .GlobalEnv)
1473428707613:assign("pageid", me$id, envir = .GlobalEnv)
1473428707616:assign("pagename", me$name, envir = .GlobalEnv) #not working, fuck everything
1473428707617:}
1473428707620:# Access public personal data; basically a ftoken test
1473428707621:me <- getUsers("me", token=ftoken)
1473428708102:print(me$name)
1473428708103:## Page Id
1473428708104:# Define which page will be used for the data collection. Change id's as necessary.
1473428708105:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1473428708105:pageid = me$id
1473428708113:}
1473428708115:posts = '5000'
1473428708123:start.date = Sys.Date() - 252
1473428708125:end.date = Sys.Date()
1473428708126:# Page Metrics to automatically pull
1473428708128:dailymetrics = c("page_impressions_unique","page_impressions", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions")
1473428708129:lifetimemetrics = c('')
1473428708129:#c(
1473428708135:#names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1473428708137:FacebookPageData = function(ftoken, posts, start.date, end.date, metrics) {
1473428708139:unix.start.date = UnixDate(start.date)
1473428708141:unix.end.date = UnixDate(end.date)
1473428708142:# Setup date range
1473428708142:date.range = seq(as.Date(start.date), as.Date(end.date), by="days")
1473428708143:# Setup data frame to recieve data
1473428708144:#totalpagedata <- data.frame()
1473428708145:# Retrieve Page Posts from Start to End Date
1473428708145:page <- getPage(pageid, ftoken, n = posts, since = UnixDate(start.date), until = UnixDate(end.date))
1473428708148:## Appending Routine ---
1473428708151:# Add some date columns
1473428708151:page[, 'datetime'] = UnixDate(page$created_time)
1473428708152:page[, 'day'] = format(page$datetime, "%Y-%m-%d")
1473428708152:page[, 'month'] = format(page$datetime, "%Y-%m")
1473428708153:## Retrieval Routine ---
1473428708154:period = 'day'
1473428708157:pull <- getInsights(object_id=pageid, token=ftoken, metric=dailymetrics[1], period=period, parms=paste0('&since=',unix.start.date,'&until=',unix.end.date))
1473428708159:# Retrieve data for metrics
1473428708163:for (metric in 1:length(metrics)) {
1473428708165:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1473428708166:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1473428708169:period = 'lifetime'
1473428708169:# Lifetime Metric subroutine
1473428708173:} else {
1473428708174:# Daily Metric subroutine
1473428708177:period = 'day'
1473428708181:try(
1473428708181:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1473428708184:)
1473428708187:if (floor < tempfloor) {
1473428708188:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1473428708189:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1473428708192:weeks = tempweeks
1473428708193:} else {}
1473428708195:} else {
1473428708196:period = 'day'
1473428708198:weeks <- (nrow(pagedata)/5)-2
1473428708199:}
1473428708200:hold <- matrix(0, nrow=0, ncol=7)
1473428708200:for (week in 0:weeks) {
1473428708204:end <- pagedata$date[(week*5)+1]
1473428708208:start <- pagedata$date[((week+1)*5)+1]
1473428708211:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1473428708212:pull <- NULL
1473428708213:attempt <- 1
1473428708213:while(is.null(pull) && attempt <= 10) {
1473428708214:attempt <- attempt + 1
1473428708214:try(
1473428708215:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1473428708215:)
1473428708216:if (is.null(pull)) {
1473428708217:print("Empty Pull. Re-attempting.")
1473428708220:print(paste("Attempt", attempt))
1473428708221:} else {
1473428708224:pull$datetime <- format.facebook.date(pull$end_time)
1473428708225:pull$day <- format(pull$datetime, "%Y-%m-%d")
1473428708229:pull$datetime <- as.Date(pull$datetime)
1473428708232:#page$month <- as.Date(page$month)
1473428708232:pull$day <- as.Date(pull$day)
1473428708236:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1473428708237:print("Found Facebook data matching date range. Storing values.")
1473428708240:} else {
1473428708241:print("Did not find Facebook data matching dataset dates. Re-querying.")
1473428708244:print(paste("Attempt", attempt))
1473428708244:pull <- NULL}
1473428708248:if (attempt > 100) {
1473428708249:print('Too many attempts. Skipping.')
1473428708251:pull <- NULL
1473428708252:break
1473428708255:} else {}
1473428708256:}
1473428708260:pulllength <- ncol(pull)
1473428708261:rpull = pull[rev(rownames(pull)),]
1473428708263:hold <- rbind(hold,rpull)
1473428708264:rawhold <- hold
1473428708267:}
1473428737863:## Facebook Query ##############
1473428737863:## By Vivek Menon ##############
1473428737865:## v2.0.0 #####################
1473428737866:# Summary -----------------------------------------------------------------
1473428737867:# Query Facebook data (Page, Post, & Ad) using Facebook Acess Tokens.
1473428737867:# Setup -------------------------------------------------------------------
1473428737867:# Load and install all necessary packages for the script
1473428737867:# Required Packages for dataframes, forecasting, graphical visualization, and development
1473428737868:# Use 'install.packages()' if unavailable
1473428737868:#library(zoo)
1473428737868:#library(forecast)
1473428737869:library(devtools)
1473428737955:library(ggplot2)
1473428738303:#library(scales)
1473428738304:library(devtools)
1473428738308:library(compare)
1473428738362:library(xlsx)
1473428740143:library(httr)
1473428740242:library(rjson)
1473428740344:library(RCurl)
1473428740625:library(roxygen2)
1473428740737:# Pull most up to date Github repositories for relevant packages
1473428740737:# Not frequently updated; does not need to be run every time
1473428740738:#install_github("pablobarbera/Rfacebook/Rfacebook")
1473428740738:#install_github("pablobarbera/instaR/instaR")
1473428740739:library(Rfacebook)
1473428740885:# User Functions ----------------------------------------------------------
1473428740886:# Some built/discovered functions that help with data manipulation
1473428740888:# Convert Facebook date format to R date format
1473428740888:UnixDate <- function(datestring) {
1473428740891:return(as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT"))
1473428740892:}
1473428740893:# Convert retrieved dates to readable dates and append the dataset
1473428740893:FormatDate <- function (dataset) {
1473428740896:#return(names(dataset))
1473428740897:if ('created_time' %in% names(dataset)) {
1473428740900:if (c('day') %in% names(dataset) == FALSE) {
1473428740900:dataset[, 'datetime'] = UnixDate(dataset$created_time)
1473428740901:dataset[, 'day'] = format(dataset$datetime, "%Y-%m-%d")
1473428740905:dataset[, 'month'] = format(dataset$datetime, "%Y-%m")
1473428740905:} else {
1473428740906:print('Date fields already exist.')
1473428740907:continue
1473428740908:}
1473428740910:} else {
1473428740911:print('created_time field does not exist')
1473428740914:}
1473428740915:if (is.null(dataset$datetime[1]) == TRUE) {
1473428740918:df$datetime <- UnixDate(page$created_time)
1473428740921:dataset <- df
1473428740922:} else {
1473428740926:print("Date fields already exist.")
1473428740929:}
1473428740930:} & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1473428740931:df$month <- format( df$datetime, "%Y-%m")
1473428740934:df$day <- format( df$datetime, "%Y-%m-%d")
1473428740947:# Shift a vector up by an amount
1473428740948:shift <- function(x, n){
1473428740951:c(x[-(seq(n))], rep(NA, n))
1473428740951:}
1473428740952:# Get gcd from vector
1473428740952:gcd <- function(x,y) {
1473428740953:r <- x%%y;
1473428740953:return(ifelse(r, gcd(y, r), y))
1473428740954:}
1473428740954:#
1473428740954:# Inputs ------------------------------------------------------------------
1473428740955:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1473428740955:# Facebook App paramaters (Available at developer.facebook.com)
1473428740955:# Must be set up with localhost:1400 acess for verification
1473428740956:app_id = "955460364539237"
1473428740956:app_name = "r_access"
1473428740957:app_secret = "0a3e6943c90510dc158fc7683e560f7d"
1473428740957:scope = "ads_management,manage_pages,publish_actions"
1473428740958:# Set Desktop as working directory
1473428740958:setwd("~/")
1473428740961:getwd()
1473428740962:# Authorize with Facebook
1473428740965:#Using 'rFacebook' from Github
1473428740965:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1473428743505:# Define data range for data (2012 is out of bounds for some metrics)
1473428743505:# Facebook Functions ------------------------------------------------------
1473428743507:# A higher level wrap up of some Pablo's functions, in order to allow easy deployment
1473428743507:#FacebookAuth = function (app_id, app_secret, scope) {
1473428743508:#fbOAuth(app_id = app_id, app_secret,extended_permissions = scope)
1473428743508:#}
1473428743508:# Create looper for Ftokens
1473428743509:ftokens <- c(
1473428743509:#Sledgehammer Wine
1473428743509:#"EAACEdEose0cBAEyF7hkNB6lPbRHGjf0vKqW9ZB8sZBSy3LUGTUelMy8ZBE4rTo1HWZAc6IbZBUDkE6p7lhQ7FeCtxb1P0nUvy9x3ltkZCmcP1CyxSaSDZAwlPsUwZBysAtvvTCuqjDxmqZCYv5X4t2GKsZAVENiMZAkcur64cU7qu71xgZDZD"
1473428743509:#Chateau Saint Jean
1473428743510:#,"EAACEdEose0cBAB6y1eZButlUqpuUt1IUau7lDlZChQxE4MiXWMZCuWkCLsI9yZCajIEnIQVxZCQrmR2XMJdsaufMRhh5QOkVrzwcMZAZCC4FctcBfZByjZCVsctpvMmPKJLGRWyyToWvMqxM4CBLi3rELZCipHbfI8QgCj04Py8ZCgVRAZDZD"
1473428743510:#19 Crimes
1473428743510:#,"EAACEdEose0cBAHIQiWkKO8TdkDpxnojS1lDoZATgRap3L8Sz3D0B7WUYilnpj1NvnltXTbOE12QSnEDvjO2KmUZAvMRy3dVrZCBHP9ZCNiGjbXRK5QCkwsA7Vn5cD9oW9BSOGHb92N3o0j9t3ZAlptZA9kGjTv3qymVOvlsg5b7QZDZD"
1473428743510:#Beringer Vneyards
1473428743510:#,"EAACEdEose0cBAP5NwqMtlIxi8HWYe4G6CP1hpHRatyK5AN1X6CDIVu1nDOfSZAI8ovTF4ibkwpkH1NMxEPwBdOgemK6nnbl8rsNF1mCoCYho4wMLrWdlYD5zJuJEOcMOJWJsECwKfFycVIdpymSoFZAq91ZBDZBUkz2DU3OZARgZDZD"
1473428743511:#100% Canadian Milk
1473428743511:"EAANkZCHOgFWUBAEmrJ2GBsINYbyetoAGRrBKU2tZCPWOWlodmBS9gknNFH3zBfvXCtTYnRsgRVzZAr5LOdAnZBVLj8zX3Xuv7oVxbmmcNfiNZCTTpQfbdWmHb2W1yZAtakecO9yeCPjPljAxRZAagdxsH82IA9wdk56xdi2KUZB28AZDZD"
1473428743511:#Lait 100% Canadien
1473428743511:,"EAANkZCHOgFWUBAOoOsD3RKLwZC1VGegdIoBB9etcfOL6ToGEpNtzxQkrdsen3VKzwZAQ5ozZCsmDU3KYZBeA4Fg1uJPS6PjW5UlWH2LweqsQq2C4j057ARFvAvSJ5pRKkvsy9nxgaBX68y9vXwTysxTTSIGcYczADujwgOjr1kQZDZD"
1473428743512:#Recharge with Milk
1473428743512:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1473428743512:#Misc
1473428743512:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1473428743512:#Baron
1473428743513:#"EAACEdEose0cBAI2QgmxEZBqxE8mHcDzZCBCQLPbpUZCe2tu8PgqbVa9wqZA0g1QPivzf5bMIlZAE6nZAi7ME6cR4Qkm7HTZAWlNY8biAh4Mx2pgX01EResqM24YtVFzlK0krAKjlEPRsxthOEjsTLCyDN4kZBWV5tDAGZCKakPMJcAuvWEcsweror"
1473428743513:)
1473428747513:accounts
1473428813176:me <- getUsers("me", token=ftoken)
1473428818437:ftoken
1473428854436:length(ftokens)
1473428855416:ftoken
1473428887298:ftoken[0]
1473428888839:ftoken[1]
1473428914962:## Facebook Query ##############
1473428914963:## By Vivek Menon ##############
1473428914967:## v2.0.0 #####################
1473428914967:# Summary -----------------------------------------------------------------
1473428914968:# Query Facebook data (Page, Post, & Ad) using Facebook Acess Tokens.
1473428914968:# Setup -------------------------------------------------------------------
1473428914969:# Load and install all necessary packages for the script
1473428914972:# Required Packages for dataframes, forecasting, graphical visualization, and development
1473428914972:# Use 'install.packages()' if unavailable
1473428914972:#library(zoo)
1473428914973:#library(forecast)
1473428914976:library(devtools)
1473428914977:library(ggplot2)
1473428914978:#library(scales)
1473428914984:library(devtools)
1473428914986:library(compare)
1473428914987:library(xlsx)
1473428914994:library(httr)
1473428914996:library(rjson)
1473428914997:library(RCurl)
1473428915000:library(roxygen2)
1473428915000:# Pull most up to date Github repositories for relevant packages
1473428915004:# Not frequently updated; does not need to be run every time
1473428915007:#install_github("pablobarbera/Rfacebook/Rfacebook")
1473428915007:#install_github("pablobarbera/instaR/instaR")
1473428915010:library(Rfacebook)
1473428915011:# User Functions ----------------------------------------------------------
1473428915012:# Some built/discovered functions that help with data manipulation
1473428915015:# Convert Facebook date format to R date format
1473428915015:UnixDate <- function(datestring) {
1473428915016:return(as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT"))
1473428915017:}
1473428915018:# Convert retrieved dates to readable dates and append the dataset
1473428915018:FormatDate <- function (dataset) {
1473428915021:#return(names(dataset))
1473428915021:if ('created_time' %in% names(dataset)) {
1473428915022:if (c('day') %in% names(dataset) == FALSE) {
1473428915022:dataset[, 'datetime'] = UnixDate(dataset$created_time)
1473428915023:dataset[, 'day'] = format(dataset$datetime, "%Y-%m-%d")
1473428915023:dataset[, 'month'] = format(dataset$datetime, "%Y-%m")
1473428915023:} else {
1473428915024:print('Date fields already exist.')
1473428915024:continue
1473428915024:}
1473428915025:} else {
1473428915025:print('created_time field does not exist')
1473428915027:}
1473428915031:if (is.null(dataset$datetime[1]) == TRUE) {
1473428915032:df$datetime <- UnixDate(page$created_time)
1473428915034:dataset <- df
1473428915034:} else {
1473428915038:print("Date fields already exist.")
1473428915038:}
1473428915040:} & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1473428915040:df$month <- format( df$datetime, "%Y-%m")
1473428915043:df$day <- format( df$datetime, "%Y-%m-%d")
1473428915044:# Shift a vector up by an amount
1473428915044:shift <- function(x, n){
1473428915045:c(x[-(seq(n))], rep(NA, n))
1473428915045:}
1473428915046:# Get gcd from vector
1473428915046:gcd <- function(x,y) {
1473428915047:r <- x%%y;
1473428915047:return(ifelse(r, gcd(y, r), y))
1473428915047:}
1473428915048:#
1473428915048:# Inputs ------------------------------------------------------------------
1473428915049:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1473428915049:# Facebook App paramaters (Available at developer.facebook.com)
1473428915050:# Must be set up with localhost:1400 acess for verification
1473428915053:app_id = "955460364539237"
1473428915053:app_name = "r_access"
1473428915054:app_secret = "0a3e6943c90510dc158fc7683e560f7d"
1473428915054:scope = "ads_management,manage_pages,publish_actions"
1473428915055:# Set Desktop as working directory
1473428915055:setwd("~/")
1473428915058:getwd()
1473428915059:# Authorize with Facebook
1473428915059:#Using 'rFacebook' from Github
1473428915063:fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1473428917775:# Define data range for data (2012 is out of bounds for some metrics)
1473428917776:# Facebook Functions ------------------------------------------------------
1473428917778:# A higher level wrap up of some Pablo's functions, in order to allow easy deployment
1473428917781:#FacebookAuth = function (app_id, app_secret, scope) {
1473428917782:#fbOAuth(app_id = app_id, app_secret,extended_permissions = scope)
1473428917785:#}
1473428917788:# Create looper for Ftokens
1473428917789:ftokens <- c(
1473428917792:#Sledgehammer Wine
1473428917792:#"EAACEdEose0cBAEyF7hkNB6lPbRHGjf0vKqW9ZB8sZBSy3LUGTUelMy8ZBE4rTo1HWZAc6IbZBUDkE6p7lhQ7FeCtxb1P0nUvy9x3ltkZCmcP1CyxSaSDZAwlPsUwZBysAtvvTCuqjDxmqZCYv5X4t2GKsZAVENiMZAkcur64cU7qu71xgZDZD"
1473428917793:#Chateau Saint Jean
1473428917793:#,"EAACEdEose0cBAB6y1eZButlUqpuUt1IUau7lDlZChQxE4MiXWMZCuWkCLsI9yZCajIEnIQVxZCQrmR2XMJdsaufMRhh5QOkVrzwcMZAZCC4FctcBfZByjZCVsctpvMmPKJLGRWyyToWvMqxM4CBLi3rELZCipHbfI8QgCj04Py8ZCgVRAZDZD"
1473428917793:#19 Crimes
1473428917793:#,"EAACEdEose0cBAHIQiWkKO8TdkDpxnojS1lDoZATgRap3L8Sz3D0B7WUYilnpj1NvnltXTbOE12QSnEDvjO2KmUZAvMRy3dVrZCBHP9ZCNiGjbXRK5QCkwsA7Vn5cD9oW9BSOGHb92N3o0j9t3ZAlptZA9kGjTv3qymVOvlsg5b7QZDZD"
1473428917794:#Beringer Vneyards
1473428917794:#,"EAACEdEose0cBAP5NwqMtlIxi8HWYe4G6CP1hpHRatyK5AN1X6CDIVu1nDOfSZAI8ovTF4ibkwpkH1NMxEPwBdOgemK6nnbl8rsNF1mCoCYho4wMLrWdlYD5zJuJEOcMOJWJsECwKfFycVIdpymSoFZAq91ZBDZBUkz2DU3OZARgZDZD"
1473428917794:#100% Canadian Milk
1473428917795:"EAANkZCHOgFWUBAEmrJ2GBsINYbyetoAGRrBKU2tZCPWOWlodmBS9gknNFH3zBfvXCtTYnRsgRVzZAr5LOdAnZBVLj8zX3Xuv7oVxbmmcNfiNZCTTpQfbdWmHb2W1yZAtakecO9yeCPjPljAxRZAagdxsH82IA9wdk56xdi2KUZB28AZDZD"
1473428917795:#Lait 100% Canadien
1473428917795:,"EAANkZCHOgFWUBAOoOsD3RKLwZC1VGegdIoBB9etcfOL6ToGEpNtzxQkrdsen3VKzwZAQ5ozZCsmDU3KYZBeA4Fg1uJPS6PjW5UlWH2LweqsQq2C4j057ARFvAvSJ5pRKkvsy9nxgaBX68y9vXwTysxTTSIGcYczADujwgOjr1kQZDZD"
1473428917796:#Recharge with Milk
1473428917796:#"CAACEdEose0cBAOJTY92DXO6QhwzjMdZCoKRL3yzT368z5HRGfTfWUGUF6iQXpmZAXTaP7BmZBIyXQjGvM24ZAJt1eF1Q9wuwwMoCTgV6Gx1WvUvxY8atshn1c4KVifHSLuBZBIaUIdYTGcWqKgK9TDIG6pPZB8ZBAt9W8ctmrGBRBGQTVoZC5nJfMwnTYtn8CdlE6PCfZCfNdlwZDZD"
1473428917796:#Misc
1473428917797:#"CAACEdEose0cBABMyV5dpn0JkPG16eTh0YOSmEsxtStECA4YR0ZCd6pR2ZBsjqMxxhQ4RVyYNfHtHU2ZAPsmJ2w1UpKNGeWz85RsQio0PXQNqjaafJxw2Hu8VJuj1UOtj8hZBTBMrXIZBKreB43QoZANuVuypgXbsCuEEZCI0pBJeg9KuEkrCyYMOrV1eYDYgP3ZA1BeDoJGUswZDZD"
1473428917797:#Baron
1473428917798:#"EAACEdEose0cBAI2QgmxEZBqxE8mHcDzZCBCQLPbpUZCe2tu8PgqbVa9wqZA0g1QPivzf5bMIlZAE6nZAi7ME6cR4Qkm7HTZAWlNY8biAh4Mx2pgX01EResqM24YtVFzlK0krAKjlEPRsxthOEjsTLCyDN4kZBWV5tDAGZCKakPMJcAuvWEcsweror"
1473428917798:)
1473428917799:# Access public personal data; basically a ftoken test
1473428917800:me <- getUsers("me", token=ftoken[1])
1473428918295:print(me$name)
1473428918296:## Page Id
1473428918297:# Define which page will be used for the data collection. Change id's as necessary.
1473428918298:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1473428918298:pageid = me$id
1473428918299:}
1473428918301:posts = '5000'
1473428918301:start.date = Sys.Date() - 252
1473428918302:end.date = Sys.Date()
1473428918302:# Page Metrics to automatically pull
1473428918305:dailymetrics = c("page_impressions_unique","page_impressions", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions")
1473428918306:lifetimemetrics = c('')
1473428918307:#c(
1473428918309:#names(metrics) = c("Page Fans Online","Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions", "Fan Demographics", "Page Feedback")
1473428918310:FacebookPageData = function(ftoken, posts, start.date, end.date, metrics) {
1473428918310:unix.start.date = UnixDate(start.date)
1473428918310:unix.end.date = UnixDate(end.date)
1473428918311:# Setup date range
1473428918311:date.range = seq(as.Date(start.date), as.Date(end.date), by="days")
1473428918314:# Setup data frame to recieve data
1473428918315:#totalpagedata <- data.frame()
1473428918315:# Retrieve Page Posts from Start to End Date
1473428918316:page <- getPage(pageid, ftoken, n = posts, since = UnixDate(start.date), until = UnixDate(end.date))
1473428918316:## Appending Routine ---
1473428918317:# Add some date columns
1473428918320:page[, 'datetime'] = UnixDate(page$created_time)
1473428918321:page[, 'day'] = format(page$datetime, "%Y-%m-%d")
1473428918324:page[, 'month'] = format(page$datetime, "%Y-%m")
1473428918325:## Retrieval Routine ---
1473428918328:period = 'day'
1473428918329:pull <- getInsights(object_id=pageid, token=ftoken, metric=dailymetrics[1], period=period, parms=paste0('&since=',unix.start.date,'&until=',unix.end.date))
1473428918332:# Retrieve data for metrics
1473428918332:for (metric in 1:length(metrics)) {
1473428918335:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1473428918336:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1473428918337:period = 'lifetime'
1473428918338:# Lifetime Metric subroutine
1473428918339:} else {
1473428918340:# Daily Metric subroutine
1473428918343:period = 'day'
1473428918344:try(
1473428918348:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1473428918351:)
1473428918352:if (floor < tempfloor) {
1473428918361:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1473428918362:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1473428918363:weeks = tempweeks
1473428918367:} else {}
1473428918368:} else {
1473428918371:period = 'day'
1473428918373:weeks <- (nrow(pagedata)/5)-2
1473428918374:}
1473428918376:hold <- matrix(0, nrow=0, ncol=7)
1473428918377:for (week in 0:weeks) {
1473428918377:end <- pagedata$date[(week*5)+1]
1473428918377:start <- pagedata$date[((week+1)*5)+1]
1473428918378:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1473428918378:pull <- NULL
1473428918379:attempt <- 1
1473428918382:while(is.null(pull) && attempt <= 10) {
1473428918383:attempt <- attempt + 1
1473428918386:try(
1473428918386:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1473428918389:)
1473428918390:if (is.null(pull)) {
1473428918391:print("Empty Pull. Re-attempting.")
1473428918391:print(paste("Attempt", attempt))
1473428918392:} else {
1473428918392:pull$datetime <- format.facebook.date(pull$end_time)
1473428918393:pull$day <- format(pull$datetime, "%Y-%m-%d")
1473428918393:pull$datetime <- as.Date(pull$datetime)
1473428918394:#page$month <- as.Date(page$month)
1473428918396:pull$day <- as.Date(pull$day)
1473428918399:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1473428918402:print("Found Facebook data matching date range. Storing values.")
1473428918402:} else {
1473428918402:print("Did not find Facebook data matching dataset dates. Re-querying.")
1473428918403:print(paste("Attempt", attempt))
1473428918403:pull <- NULL}
1473428918404:if (attempt > 100) {
1473428918404:print('Too many attempts. Skipping.')
1473428918408:pull <- NULL
1473428918409:break
1473428918412:} else {}
1473428918413:}
1473428918416:pulllength <- ncol(pull)
1473428918418:rpull = pull[rev(rownames(pull)),]
1473428918419:hold <- rbind(hold,rpull)
1473428918420:rawhold <- hold
1473428918424:}
1473429354485:ftoken
1473429364757:ftoken[1]
1473429367415:ftoken[2]
1473429372588:ftokens
1473429400617:for (brand in 1:length(ftokens)) {
1473429400617:ftoken = ftoken[brand] # Use the brands ftoken
1473429400619:# Processing --------------------------------------------------------------
1473429400619:# Process data to clean dataset and augment it with more data than default fields.
1473429400623:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1473429400624:## Cleaning =================================
1473429400627:# Page and Post Datasets
1473429400627:# Split dataset into two for pages and post data
1473429400630:# Create initial null sets
1473429400631:pagedata <- 0
1473429400631:postdata <- 0
1473429400632:## Appending =================================
1473429400632:### Page Metrics #############################
1473429400635:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1473429400636:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1473429400637:# Pa
1473429400637:# Start Data Acquisition Loop
1473429400640:for (metric in 1:length(metrics)) {
1473429400641:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1473429400644:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1473429400645:period = 'lifetime'
1473429400645:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1473429400646:period = 'day'
1473429400647:tempfloor = "2014-02-01"
1473429400648:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1473429400649:if (floor < tempfloor) {
1473429400650:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1473429400651:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1473429400651:weeks = tempweeks
1473429400652:} else {}
1473429400655:} else {
1473429400656:period = 'day'
1473429400659:weeks <- (nrow(pagedata)/5)-2
1473429400659:}
1473429400663:hold <- matrix(0, nrow=0, ncol=7)
1473429400664:for (week in 0:weeks) {
1473429400666:end <- pagedata$date[(week*5)+1]
1473429400667:start <- pagedata$date[((week+1)*5)+1]
1473429400671:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1473429400671:pull <- NULL
1473429400674:attempt <- 1
1473429400678:while(is.null(pull) && attempt <= 10) {
1473429400678:attempt <- attempt + 1
1473429400681:try(
1473429400682:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1473429400683:)
1473429400684:if (is.null(pull)) {
1473429400684:print("Empty Pull. Re-attempting.")
1473429400684:print(paste("Attempt", attempt))
1473429400686:} else {
1473429400687:pull$datetime <- format.facebook.date(pull$end_time)
1473429400688:pull$day <- format(pull$datetime, "%Y-%m-%d")
1473429400690:pull$datetime <- as.Date(pull$datetime)
1473429400692:#page$month <- as.Date(page$month)
1473429400693:pull$day <- as.Date(pull$day)
1473429400695:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1473429400696:print("Found Facebook data matching date range. Storing values.")
1473429400699:} else {
1473429400700:print("Did not find Facebook data matching dataset dates. Re-querying.")
1473429400703:print(paste("Attempt", attempt))
1473429400704:pull <- NULL}
1473429400708:if (attempt > 100) {
1473429400708:print('Too many attempts. Skipping.')
1473429400711:pull <- NULL
1473429400712:break
1473429400714:} else {}
1473429400715:}
1473429400717:pulllength <- ncol(pull)
1473429400723:rpull = pull[rev(rownames(pull)),]
1473429400728:hold <- rbind(hold,rpull)
1473429400729:rawhold <- hold
1473429400731:}
1473429400737:rhold = hold[rev(rownames(hold)),]
1473429400739:rhold$value = shift(rhold$value, 1)
1473429400740:hold = rhold[rev(rownames(rhold)),]
1473429400742:hold$value[1] = rawhold$value[1]
1473429400745:hours <- seq(0,23)
1473429400745:names(hours) <- paste("Hour", hours)
1473429400750:subtypes <- c('link','comment', 'like')
1473429400752:names(subtypes) <- c('Shares','Comments', 'Likes')
1473429400756:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24", "U.65+", "U.55-64", "U.45-54", "U.35-44", "U.25-34", "U.18-24")
1473429400757:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24",  "Unidentified 65+", "Unidentified 55-64", "Unidentified 45-54", "Unidentified 35-44", "Unidentified 25-34", "Unidentified 18-24")
1473429400760:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1473429400764:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1473429400767:for (type in 1:length(subtypes)) {
1473429400769:typehold <- NA
1473429400771:typehold <- hold[hold$variable == subtypes[type],]
1473429400774:pagedata <- cbind(NA,pagedata)
1473429400775:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1473429400777:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1473429400779:metrics <- c(metrics,subtypes[type])
1473429400780:}
1473429400785:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1473429400787:for (demographic in 1:length(demographics)) {
1473429400789:print(names(demographics[demographic]))
1473429400793:typehold <- NA
1473429400795:typehold <- hold[hold$variable == demographics[demographic],]
1473429400797:typehold[typehold$value <= 10,] <- NA
1473429400801:pagedata <- cbind(NA,pagedata)
1473429400803:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1473429400805:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1473429400809:metrics <- c(metrics,demographics[demographic])
1473429400812:}
1473429400816:} else if ((metrics)[metric] == 'page_fans_online') {
1473429400820:for (hour in 1:length(hours)) {
1473429400824:typehold <- NA
1473429400827:typehold <- hold[hold$variable == hours[hour],]
1473429400831:pagedata <- cbind(NA,pagedata)
1473429400834:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1473429400836:colnames(pagedata)[1] = paste("hour",hours[hour])
1473429400840:metrics <- c(metrics,hours[hour])
1473429400843:}
1473429400846:} else {
1473429400849:pagedata <- cbind(NA,pagedata)
1473429400853:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1473429400856:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1473429400861:}
1473429400870:cat("\n\n")
1473429400873:print(head(pagedata))
1473429400876:cat("\n")
1473429400883:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1473429400886:break
1473429400889:} else {
1473429400892:}
1473429400907:pagedata.tempstore <- pagedata
1473429400910:#Page Metrics to remove because they have subtypes
1473429400912:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1473429400917:# Page Metrics to manually create
1473429400919:metrics <- c(metrics,"organic reach")
1473429400922:names(metrics)[length(metrics)] <- c("Organic Reach")
1473429400925:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1473429400928:colnames(pagedata)[1] = "organic reach"
1473429400932:# Final dataset formatting
1473429400934:pagedatastore <- pagedata
1473429400937:#pagedata <- pagedatastore
1473429400941:pagedata2 <- pagedata
1473429400944:# reorder and null NA's for excel
1473429400946:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1473429400952:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1473429400954:#pagedata2[is.na(pagedata2)] <- ""
1473429400959:#pagedata2[pagedata2 == 0] <- ""
1473429400964:# store final dataset
1473429400967:pagedata <- pagedata2
1473429400972:### Post Metrics #############################
1473429400974:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1473429400975:# Most are automated, and will continue to retry through errors until a value is found.
1473429400977:# Manual modifications are run after initial data acquisition.
1473429400981:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1473429400982:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1473429400988:# Populate sets with values from pull
1473429400992:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1473429400994:page$datetime <- format.facebook.date(page$created_time)
1473429400995:page$month <- format(page$datetime, "%Y-%m")
1473429400998:page$day <- format(page$datetime, "%Y-%m-%d")
1473429401002:page$datetime <- as.Date(page$datetime)
1473429401005:#page$month <- as.Date(page$month)
1473429401008:page$day <- as.Date(page$day)
1473429401011:} else {
1473429401014:print("Date fields already exist for Post Data.")
1473429401015:}
1473429401021:postdata <- 0
1473429401023:postdata <- page[page$day > floor,]
1473429401027:postdata <- postdata[postdata$day < roof,]
1473429401033:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1473429401039:# Name column for usability
1473429401041:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1473429401047:rows <- nrow(postdata)
1473429401049:lpostmetrics <- postmetrics
1473429401053:#testlength <- 2
1473429401054:#length(postmetrics) instead of testlength; swapped out for hotfixes
1473429401062:for (pmetric in 1:length(postmetrics)) {
1473429401065:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$from_name[1]))
1473429401072:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1473429401075:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1473429401077:names(phold) <- c("id","name","period","title","description","value","variable")
1473429401079:} else {
1473429401081:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1473429401083:names(phold) <- c("id","name","period","title","description","value")
1473429401085:}
1473429401093:for (post in 1:nrow(postdata)) {
1473429401099:period <- "lifetime"
1473429401105:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1473429401113:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1473429401117:print('Not a Facebook Video.')
1473429401120:phold <- rbind(phold, NA)
1473429401122:next()
1473429401127:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1473429401131:} else {
1473429401134:}
1473429401144:postpull <- NULL
1473429401147:attempt <- 1
1473429401154:while( is.null(postpull) && attempt <= 50) {
1473429401158:attempt <- attempt + 1
1473429401162:try(
1473429401166:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1473429401170:#,silent=TRUE
1473429401171:)
1473429401176:if (attempt > 10) {
1473429401180:print('Too many attempts. Skipping.')
1473429401183:postpull <- NULL
1473429401185:break
1473429401189:} else {
1473429401192:print('Retrying.')
1473429401197:}
1473429401206:colnames(phold) <- names(postpull)
1473429401208:phold <- rbind(phold, postpull)
1473429401212:}
1473429401214:pholdstore <- phold
1473429401221:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1473429401224:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1473429401228:phold <- phold[-1,]
1473429401233:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1473429401238:postmetrics <- postmetrics[-pmetric]
1473429401240:pmetric <- pmetric + 1
1473429401244:for (ptype in (1:length(psubtypes))) {
1473429401247:ptyphehold <- NA
1473429401249:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1473429401256:postdata <- cbind(NA,postdata)
1473429401258:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1473429401266:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1473429401269:postmetrics <- c(postmetrics,psubtypes[ptype])
1473429401273:}
1473429401279:} else {
1473429401284:postdata <- cbind(NA,postdata)
1473429401288:postdata[1:length(phold$value),1] <- phold$value
1473429401293:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1473429401296:}
1473429401309:cat("\n\n")
1473429401311:print(head(postdata))
1473429401314:cat("\n")
1473429401316:}
1473429401320:postdatastore <- postdata
1473429401326:# Post Metrics to manually create
1473429401329:postmetrics <- c(postmetrics,"organic reach")
1473429401334:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1473429401342:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1473429401346:colnames(postdata)[1] = "organic reach"
1473429401351:# Final dataset formatting
1473429401355:#postdatastore <- postdata
1473429401358:#postdata <- postdatastore
1473429401362:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1473429401370:# reorder and null NA's for Excel
1473429401374:postdata2 <- postdata
1473429401377:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1473429401379:postdata2[is.na(postdata2)] <- ""
1473429401382:postdata2[postdata2 == 0] <- ""
1473429401390:# store final dataset
1473429401394:postdata <- as.data.frame(postdata2)
1473429401401:# Outputs -----------------------------------------------------------------
1473429401406:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1473429401411:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1473429401417:datafolder <- "Data"
1473429401423:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1473429401428:# Rename columns for Excel readability
1473429401433:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1473429401437:# output Page dataset as final csv
1473429401442:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1473429401446:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1473429401451:# Rename columns for Excel readability
1473429401454:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1473429401459:# output Post dataset as final Excel
1473429401464:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1473429401469:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1473429401478:# Raw Data
1473429401481:# output dataset as raw csv
1473429401484:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1473429401489:totalpagedata <- rbind(totalpagedata, pagedata)
1473429401492:totalpostdata <- rbind(totalpostdata, postdata)
1473429401497:}
1473431170744:## Facebook Query Injector #####
1473431170747:## Mirum Agency ################
1473431170747:## By Vivek Menon ##############
1473431170751:## v.1.5.0 #####################
1473431170751:# Summary -----------------------------------------------------------------
1473431170755:# Todo --------------------------------------------------------------------
1473431170755:# - Run script for all major brands
1473431170759:# - Create 'participation rate' function
1473431170762:# - Incorporate Twitter
1473431170762:# Setup -------------------------------------------------------------------
1473431170762:# Load and install all necessary packages for the script
1473431170763:# Required Packages for dataframes, forecasting, graphical visualization, and development
1473431170763:# Use 'install.packages()' if unavailable.
1473431170763:#library(zoo)
1473431170763:#library(forecast)
1473431170763:library(ggplot2)
1473431171174:#library(scales)
1473431171174:library(devtools)
1473431171307:library(compare)
1473431171406:library(xlsx)
1473431174210:require(httr)
1473431174248:require(rjson)
1473431174301:require(RCurl)
1473431174515:# Pull most up to date Github repositories for relevant packages
1473431174515:# Not frequently updated; does not need to be run every time.
1473431174517:#install_github("pablobarbera/Rfacebook/Rfacebook")
1473431174517:#install_github("pablobarbera/instaR/instaR")
1473431174521:# Required packags for plugging into Facebook API
1473431174521:#library(twitteR)
1473431174524:#install.packages('Rfacebook')
1473431174524:library(Rfacebook)
1473431174678:#library(instaR)
1473431174678:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1473431174683:# https://instagram.com/developer/authentication/?hl=en
1473431174683:#setwd("~/Desktop/TWE/Monthly Reports/June 2015")
1473431174683:setwd("~/")
1473431174684:getwd()
1473431174685:# Functions ---------------------------------------------------------------
1473431174685:# User Functions
1473431174689:# Function to convert Facebook date format to R date format
1473431174692:format.facebook.date <- function(datestring) {
1473431174695:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1473431174696:}
1473431174696:# Shift a vector up by an amount
1473431174696:shift <- function(x, n){
1473431174700:c(x[-(seq(n))], rep(NA, n))
1473431174700:}
1473431174701:# Get gcd from vector
1473431174701:gcd <- function(x,y) {
1473431174704:r <- x%%y;
1473431174705:return(ifelse(r, gcd(y, r), y))
1473431174705:}
1473431174706:# Inputs ------------------------------------------------------------------
1473431174706:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1473431174710:# Define data range for data (2012 is out of bounds for some metrics)
1473431174713:# http://thinktostart.com/analyzing-facebook-with-r/
1473431174716:fb_oauth <- fbOAuth(app_id="955460364539237", app_secret="0a3e6943c90510dc158fc7683e560f7d",extended_permissions = FALSE)
1473431177253:posts <- 2000
1473431177254:roof = Sys.Date() #"2015-12-31"
1473431177254:floor = "2016-01-01" #"2015-05-01"
1473431177254:range = seq(as.Date(floor), as.Date(roof), by="days")
1473431177256:## Access ftoken
1473431177256:# Use token from Facebook Graph API
1473431177258:# token generated here: https://developers.facebook.com/tools/explorer
1473431177258:# Lasts two hours, and must be changed depending on page and permissions
1473431177259:ftokens <- c(
1473431177259:#Sledgehammer Wine
1473431177263:#"CAACEdEose0cBAAaqv8JuC9FYYF2JZBzCDyJSrZB5aXhCMHeZAYjdcRkoOyZBHAqNdsSAVnmf63EyT3ZB6pcBZAIcPxcDCQCAXFE1ER62zJDC9tMF6AC5IvTXczksCjh9HocfSBYA1qjER8wsoFvPUF1B9f4mMhNrnAPWRZADbliPBRDTh0D2qF72LAPwZCsfw3UZD"
1473431177263:#Chateau Saint Jean
1473431177264:#"EAACEdEose0cBAOwwfrVCmYxjRlHVlMDJAjtEJkfMZBkWVsQbDGv0eXi50MZCc4F2i33vbhmJ6823oIzAbhezsZAkqchpPpYaiB8XzcfZBKS2jSXE22EY1e855OvkfgFyjKPiOPOjOZAQIbDiJg1tHCMMLVjUlwPcoKGBEexWbGQZDZD"
1473431177267:#19 Crimes
1473431177267:#,"EAACEdEose0cBANCXTZAFtviL9VEUq4DhkEwMyzqdmWgZBh68EReZAIEOVBYlTSiS52swRACvjhybfPQGFqEOmJp0OjTSPQ9ZC01R6nxViJ5xDHXPlDCwnnXOBObHYwZAXhQzy52kL3FZA3WcHNrGNIqfJZC9MZCJPkkfXHpVsx3PHQZDZD"
1473431177268:#Beringer Vneyards
1473431177268:#,"EAACEdEose0cBAAfj1KkrLbPzVw0v5gul87LeUeoXUHnN6rlxrVRklAgg214vFGLkQTKeLHEUWDGg9ZBVeTDRQdOietA25FLcAaQCGiKvmLFv3ZAYnMpLg9YKnpNpazKjXKwWpkXZBdjuKB7Ql6JKu4Q8pNOZCk97LWSwW4U8vgZDZD"
1473431177268:#100% Canadian Milk
1473431177269:"EAANkZCHOgFWUBAJZCvRlC7OapZBTJNXWibKAXkVi09U4IgYweulZANtxZB3GTuNBOC7HKkXCu2nKSJwyAJVimuk4VdHWUyVQtufu8io4uNJILPctxkOs51myVMErxwdXe6yFHWrzABRadSI9QpNGmvWkxpO8fjrdmVpqe3XgOUQZDZD"
1473431177269:#Lait 100% Canadien
1473431177270:,"EAANkZCHOgFWUBAOfjVgEIn6mY1OHt6ZCwaZA8RGhMlDX9l2UUZCAOLylBVZBWpaXyFyyjRqo5eYnZBTYTgrRbIkZA95ZAiuJZBZBwqtjs60zNMNpj7Dn9rqnR4BI2czMR7lB84wIw0ikJSwXxZAcBpFBG0NFUP8q2spL7ZBitHw7Q9EY8QZDZD"
1473431177270:#Recharge with Milk
1473431177270:#,"CAACEdEose0cBAJ9NPmffbszUQ1HYObOGqdht5XWBoU7zABLhgZB6L53eyqVrt0CPxkZAXQpI0fGW7FHucQ0LgGtmRRlWP6eAQgZBSa6oaRibk9qZAp0xVGZCr4B6AdysmfVlbZCFjoZBYZCJ3sxN1yMdL5jz6yCWOZAAbAv00nXq5wURrgCUe3dXZAZBF2COnBm9YxXk5vFoWWJkQZDZD"
1473431177271:#BaronSamedi
1473431177271:#"EAANkZCHOgFWUBAHaWKdF0oFQrEW1ncmqdZBH064po1PJfWbJZAzIDhJ0z7n2ma06aogrSuA6QUZClnQ4sCRH6YX0O00AuQzEFgvMXYZAD25qZBhDiCp4LW59qZApQZAd6SQlf0sP3ZATCyOM3ToFCxFiMXZCG6AKbHDrqPBxFRxmFFDQZDZD"
1473431177271:)
1473431177272:totalpagedata <- data.frame()
1473431177272:totalpostdata <- data.frame()
1473431177273:for (brand in 1:length(ftokens)) {
1473431177274:ftoken <- ftokens[brand]
1473431177275:## User Id
1473431177275:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1473431177275:userid = "10153046308598756"
1473431177276:# Access public personal data; basically a ftoken test
1473431177277:me <- getUsers("me", token=ftoken)
1473431177279:print(me$name)
1473431177280:## Page Id
1473431177281:# Define which page will be used for the data collection. Change id's as necessary.
1473431177284:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1473431177284:pageid = me$id
1473431177288:# Acquisition -------------------------------------------------------------
1473431177288:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1473431177291:page <- getPage(pageid, ftoken, n = posts)
1473431177292:page.store <- page
1473431177295:# Create new vectors in dataset with datetime, month, and day formattiong
1473431177296:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1473431177299:page$datetime <- format.facebook.date(page$created_time)
1473431177299:page$month <- format(page$datetime, "%Y-%m")
1473431177302:page$day <- format(page$datetime, "%Y-%m-%d")
1473431177303:page$datetime <- as.Date(page$datetime)
1473431177306:#page$month <- as.Date(page$month)
1473431177307:page$day <- as.Date(page$day)
1473431177310:} else {
1473431177310:print("Date fields already exist.")
1473431177314:}
1473431177315:# Processing --------------------------------------------------------------
1473431177316:# Process data to clean dataset and augment it with more data than default fields.
1473431177316:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1473431177318:## Cleaning =================================
1473431177319:# Page and Post Datasets
1473431177320:# Split dataset into two for pages and post data
1473431177321:# Create initial null sets
1473431177321:pagedata <- 0
1473431177322:postdata <- 0
1473431177323:## Appending =================================
1473431177326:### Page Metrics #############################
1473431177327:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1473431177330:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1473431177332:# Page Metrics to automatically pull
1473431177333:# "page_fans_online" ,"page_fans_gender_age", "page_positive_feedback_by_type"
1473431177334:metrics = c("page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions") #c(
1473431177337:names(metrics) = c("Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions")
1473431177338:pagemetrics <- metrics
1473431177342:# Prep dataset by breaking into weeks
1473431177343:pagedata <- 0
1473431177344:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1473431177346:colnames(pagedata) = c("pageid", "page", "date")
1473431177349:pagedata$page = page$from_name[1]
1473431177349:pagedata$pageid = page$from_id[1]
1473431177353:divisor = 5
1473431177353:remainder = length(range)%%divisor;
1473431177357:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1473431177359:weeks <- (nrow(pagedata)/5)-2
1473431177360:# Start Data Acquisition Loop
1473431177361:for (metric in 1:length(metrics)) {
1473431177366:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1473431177369:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1473431177369:period = 'lifetime'
1473431177372:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1473431177373:period = 'day'
1473431177376:tempfloor = "2014-02-01"
1473431177377:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1473431177381:if (floor < tempfloor) {
1473431177382:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1473431177384:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1473431177385:weeks = tempweeks
1473431177388:} else {}
1473431177389:} else {
1473431177391:period = 'day'
1473431177392:weeks <- (nrow(pagedata)/5)-2
1473431177395:}
1473431177397:hold <- matrix(0, nrow=0, ncol=7)
1473431177399:for (week in 0:weeks) {
1473431177401:end <- pagedata$date[(week*5)+1]
1473431177403:start <- pagedata$date[((week+1)*5)+1]
1473431177405:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1473431177407:pull <- NULL
1473431177408:attempt <- 1
1473431177410:while(is.null(pull) && attempt <= 10) {
1473431177412:attempt <- attempt + 1
1473431177413:try(
1473431177416:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1473431177417:)
1473431177421:if (is.null(pull)) {
1473431177422:print("Empty Pull. Re-attempting.")
1473431177424:print(paste("Attempt", attempt))
1473431177425:} else {
1473431177428:pull$datetime <- format.facebook.date(pull$end_time)
1473431177431:pull$day <- format(pull$datetime, "%Y-%m-%d")
1473431177434:pull$datetime <- as.Date(pull$datetime)
1473431177436:#page$month <- as.Date(page$month)
1473431177437:pull$day <- as.Date(pull$day)
1473431177440:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1473431177441:print("Found Facebook data matching date range. Storing values.")
1473431177443:} else {
1473431177445:print("Did not find Facebook data matching dataset dates. Re-querying.")
1473431177447:print(paste("Attempt", attempt))
1473431177449:pull <- NULL}
1473431177453:if (attempt > 100) {
1473431177454:print('Too many attempts. Skipping.')
1473431177455:pull <- NULL
1473431177459:break
1473431177459:} else {}
1473431177460:}
1473431177465:pulllength <- ncol(pull)
1473431177468:rpull = pull[rev(rownames(pull)),]
1473431177471:hold <- rbind(hold,rpull)
1473431177472:rawhold <- hold
1473431177475:}
1473431177481:rhold = hold[rev(rownames(hold)),]
1473431177482:rhold$value = shift(rhold$value, 1)
1473431177486:hold = rhold[rev(rownames(rhold)),]
1473431177488:hold$value[1] = rawhold$value[1]
1473431177492:hours <- seq(0,23)
1473431177494:names(hours) <- paste("Hour", hours)
1473431177496:subtypes <- c('link','comment', 'like')
1473431177497:names(subtypes) <- c('Shares','Comments', 'Likes')
1473431177500:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24")
1473431177503:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24")
1473431177506:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1473431177511:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1473431177515:for (type in 1:length(subtypes)) {
1473431177516:typehold <- NA
1473431177519:typehold <- hold[hold$variable == subtypes[type],]
1473431177523:pagedata <- cbind(NA,pagedata)
1473431177525:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1473431177527:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1473431177529:metrics <- c(metrics,subtypes[type])
1473431177531:}
1473431177535:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1473431177539:for (demographic in 1:length(demographics)) {
1473431177542:print(names(demographics[demographic]))
1473431177547:typehold <- NA
1473431177549:typehold <- hold[hold$variable == demographics[demographic],]
1473431177551:typehold[typehold$value <= 10,] <- NA
1473431177557:pagedata <- cbind(NA,pagedata)
1473431177559:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1473431177562:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1473431177565:metrics <- c(metrics,demographics[demographic])
1473431177567:}
1473431177572:} else if ((metrics)[metric] == 'page_fans_online') {
1473431177577:for (hour in 1:length(hours)) {
1473431177581:typehold <- NA
1473431177584:typehold <- hold[hold$variable == hours[hour],]
1473431177591:pagedata <- cbind(NA,pagedata)
1473431177594:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1473431177596:colnames(pagedata)[1] = paste("hour",hours[hour])
1473431177603:metrics <- c(metrics,hours[hour])
1473431177605:}
1473431177609:} else {
1473431177612:pagedata <- cbind(NA,pagedata)
1473431177615:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1473431177619:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1473431177624:}
1473431177630:cat("\n\n")
1473431177633:print(head(pagedata))
1473431177637:cat("\n")
1473431177642:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1473431177646:break
1473431177649:} else {
1473431177652:}
1473431177663:pagedata.tempstore <- pagedata
1473431177669:#Page Metrics to remove because they have subtypes
1473431177672:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1473431177681:# Page Metrics to manually create
1473431177684:metrics <- c(metrics,"organic reach")
1473431177688:names(metrics)[length(metrics)] <- c("Organic Reach")
1473431177695:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1473431177698:colnames(pagedata)[1] = "organic reach"
1473431177705:# Final dataset formatting
1473431177708:pagedatastore <- pagedata
1473431177711:#pagedata <- pagedatastore
1473431177716:pagedata2 <- pagedata
1473431177723:# reorder and null NA's for excel
1473431177727:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1473431177731:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1473431177734:#pagedata2[is.na(pagedata2)] <- ""
1473431177738:#pagedata2[pagedata2 == 0] <- ""
1473431177743:# store final dataset
1473431177745:pagedata <- pagedata2
1473431177748:### Post Metrics #############################
1473431177756:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1473431177764:# Most are automated, and will continue to retry through errors until a value is found.
1473431177768:# Manual modifications are run after initial data acquisition.
1473431177781:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1473431177784:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1473431177791:# Populate sets with values from pull
1473431177798:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1473431177801:page$datetime <- format.facebook.date(page$created_time)
1473431177806:page$month <- format(page$datetime, "%Y-%m")
1473431177810:page$day <- format(page$datetime, "%Y-%m-%d")
1473431177817:page$datetime <- as.Date(page$datetime)
1473431177821:#page$month <- as.Date(page$month)
1473431177840:page$day <- as.Date(page$day)
1473431177844:} else {
1473431177848:print("Date fields already exist for Post Data.")
1473431177851:}
1473431177859:postdata <- 0
1473431177862:postdata <- page[page$day > floor,]
1473431177866:postdata <- postdata[postdata$day < roof,]
1473431177874:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1473431177884:# Name column for usability
1473431177887:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1473431177893:rows <- nrow(postdata)
1473431177896:lpostmetrics <- postmetrics
1473431177902:testlength <- 2
1473431177905:#length(postmetrics) instead of testlength; swapped out for hotfixes
1473431177917:for (pmetric in 1:length(postmetrics)) {
1473431177920:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1473431177927:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1473431177929:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1473431177933:names(phold) <- c("id","name","period","title","description","value","variable")
1473431177934:} else {
1473431177937:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1473431177939:names(phold) <- c("id","name","period","title","description","value")
1473431177943:}
1473431177951:for (post in 1:nrow(postdata)) {
1473431177959:period <- "lifetime"
1473431177966:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1473431177971:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1473431177973:print('Not a Facebook Video.')
1473431177977:phold <- rbind(phold, NA)
1473431177981:next()
1473431177985:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1473431177989:} else {
1473431177993:}
1473431178003:postpull <- NULL
1473431178005:attempt <- 1
1473431178010:while( is.null(postpull) && attempt <= 100) {
1473431178014:attempt <- attempt + 1
1473431178018:try(
1473431178022:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1473431178026:,silent=TRUE
1473431178029:)
1473431178035:if (attempt > 10) {
1473431178039:print('Too many attempts. Skipping.')
1473431178042:postpull <- NULL
1473431178045:break
1473431178048:} else {
1473431178051:}
1473431178062:colnames(phold) <- names(postpull)
1473431178066:phold <- rbind(phold, postpull)
1473431178069:}
1473431178072:pholdstore <- phold
1473431178079:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1473431178082:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1473431178086:phold <- phold[-1,]
1473431178092:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1473431178101:postmetrics <- postmetrics[-pmetric]
1473431178105:pmetric <- pmetric + 1
1473431178114:for (ptype in (1:length(psubtypes))) {
1473431178119:ptyphehold <- NA
1473431178124:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1473431178131:postdata <- cbind(NA,postdata)
1473431178135:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1473431178144:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1473431178152:postmetrics <- c(postmetrics,psubtypes[ptype])
1473431178154:}
1473431178164:} else {
1473431178167:postdata <- cbind(NA,postdata)
1473431178169:postdata[1:length(phold$value),1] <- phold$value
1473431178172:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1473431178177:}
1473431178197:cat("\n\n")
1473431178205:print(head(postdata))
1473431178211:cat("\n")
1473431178219:}
1473431178236:postdatastore <- postdata
1473431178264:# Post Metrics to manually create
1473431178272:postmetrics <- c(postmetrics,"organic reach")
1473431178277:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1473431178289:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1473431178297:colnames(postdata)[1] = "organic reach"
1473431178304:# Final dataset formatting
1473431178307:#postdatastore <- postdata
1473431178311:#postdata <- postdatastore
1473431178318:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1473431178326:# reorder and null NA's for Excel
1473431178331:postdata2 <- postdata
1473431178335:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1473431178338:postdata2[is.na(postdata2)] <- ""
1473431178341:postdata2[postdata2 == 0] <- ""
1473431178351:# store final dataset
1473431178354:postdata <- as.data.frame(postdata2)
1473431178363:# Outputs -----------------------------------------------------------------
1473431178373:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1473431178378:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1473431178389:datafolder <- "Data"
1473431178396:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1473431178404:# Rename columns for Excel readability
1473431178410:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1473431178415:# output Page dataset as final csv
1473431178420:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1473431178424:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1473431178428:?wri
1473431178433:# Rename columns for Excel readability
1473431178438:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1473431178443:# output Post dataset as final Excel
1473431178448:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1473431178451:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1473431178457:# Raw Data
1473431178460:# output dataset as raw csv
1473431178465:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1473431178475:totalpagedata <- rbind(totalpagedata, pagedata)
1473431178481:totalpostdata <- rbind(totalpostdata, postdata)
1473431178489:}
1473432021429:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1473432024501:# Rename columns for Excel readability
1473432024502:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1473432024503:# output Post dataset as final Excel
1473432024504:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1473432024504:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1473432027096:# Images
1473432027098:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1473432027098:#for (picture in (1:nrow(postdata))) {
1473432027099:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1473432027099:#
1473432027099:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1473432027099:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1473432027100:#
1473432027100:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1473432027100:# Edit the core program and change feedback loop.
1473432027101:#
1473432027101:#}
1475085907773:#devtools::install_github("pablobarbera/instaR/instaR")
1475085907776:#install_github("pablobarbera/instaR/instaR")
1475085907777:install.packages('instaR')
1475085914628:#update.packages("instaR")
1475085914628:library("instaR")
1475085914970:library('httpuv')
1475085915152:# User Functions
1475085915152:# Function to convert Facebook date format to R date format
1475085915153:format.facebook.date <- function(datestring) {
1475085915154:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1475085915154:}
1475085915155:#folder <- "19
1475085916927:9crimeswine", "19crimeswine,thebaronsamedi
1475085916927:# scope = public_content basic
1475085916929:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="basic public_content follower_list")
1475085918611:accounts <- c("thebaronsamedi")
1475085918612:roof= Sys.Date()+1
1475085918614:floor = "2016-04-01"
1475085922344:for (account in 1:length(accounts)) {
1475085922345:username=accounts[account]
1475085922349:posts <- getUserMedia(username=accounts[account],token=my_oauth, n=500)
1475085922349:#,n = 1)#, n=200, verbose = TRUE)
1475085922349:#user <- getUser(accounts[account], token=my_oauth)
1475085922350:#df <- getFollowers('womenchampions', token=my_oauth)
1475085922350:df <- posts
1475085922350:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1475085922351:df$datetime <- format.facebook.date(df$created_time)
1475085922351:df$month <- format(df$datetime, "%Y-%m")
1475085922351:df$day <- format(df$datetime, "%Y-%m-%d")
1475085922351:} else {
1475085922352:print("Date fields already exist.")
1475085922352:}
1475085922354:#roof = "2016-05-30"
1475085922354:#floor = "2016-05-01"
1475085922357:df <- df[df$day > floor,]
1475085922357:df <- df[df$day < roof,]
1475085922361:#posts <- posts[posts$created_time > floor,]
1475085922361:#posts <- posts[posts$created_time < roof,]
1475085922364:#posts <- df
1475085922365:follows <- NULL
1475085922368:impressions <- NULL
1475085922369:impressionusers <- NULL
1475085922370:count <- 0
1475085922371:jump <- 1 # Loop paramater
1475085922371:weight <- 0.1 # 10%
1475085922372:for (post in 1:nrow(df)) {
1475085922373:try(impressionusers <- c(
1475085922373:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1475085922374:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1475085922374:)
1475085922375:,silent = TRUE)
1475085922375:impression <- 0
1475085922376:if (is.null(impressionusers) == TRUE){
1475085922377:impressions[post] <- 0
1475085922380:} else {
1475085922381:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1475085922383:for (user in 1:length(impressionusers)){
1475085922384:#print(user)
1475085922387:#print(impression)
1475085922387:userdata <- NULL
1475085922392:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1475085922394:if (is.null(userdata)) {
1475085922395:newimpression <- 0
1475085922396:impression <- as.numeric(newimpression) + as.numeric(impression)
1475085922402:next
1475085922404:} else {
1475085922405:newimpression <- + userdata$follows + userdata$followed_by
1475085922407:impression <- as.numeric(impression) + as.numeric(newimpression)
1475085922408:}
1475085922413:# Scale down to simulate organic
1475085922416:impression = ceiling(weight * impression)
1475085922418:impressions[post] <- impression
1475085922420:}
1475085922423:print(impressions[post])
1475085922424:count = count + 1
1475085922427:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1475085922428:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1475085922431:}
1475085922433:impressions.store <- impressions
1475085922434:#impressions <- round(impressions/5,0)
1475085922436:df <- cbind(df, impressions)
1475085922440:df.store <- df
1475085922442:df[is.na(df)] <- ""
1475085922445:name <- paste(df$user_fullname[1],"Instagram", Sys.Date())
1475085922448:datafolder <- "/Data"
1475085922451:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1475085922454:write.csv(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".csv")))#, row.names=FALSE)
1475085922455:}
1475085923682:#write.xlsx(df, paste0(getwd(),"/",dat
1475085931986:getUserMedia(username=accounts[account],token=my_oauth, n=500)
1475085938396:accounts[account]
1475085944237:getUserMedia(username=accounts[account],token=my_oauth, n=500)
1475086036737:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="basic public_content follower_list comments")
1475086048709:q
1475086054159:accounts <- c("thebaronsamedi")
1475086055367:floor = "2016-04-01"
1475086062567:getUserMedia(username=accounts[account],token=my_oauth, n=500)
1475086074215:install_github("pablobarbera/instaR/instaR")
1475086082410:devtools::install_github("pablobarbera/instaR/instaR")
1475086094763:# User Functions
1475086094764:# Function to convert Facebook date format to R date format
1475086094765:format.facebook.date <- function(datestring) {
1475086094766:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1475086094766:}
1475086094767:#folder <- "19c"
1475086094767:#df <- searchInstagram(tag="beringervyds", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1475086094767:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1475086094767:#floor = "2015-12-31" #"2015-05-01"
1475086094768:#df <- df[df$created_time > floor,]
1475086094768:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1475086094768:#"19crimeswine", "19crimeswine,thebaronsamedi
1475086094769:# scope = public_content basic
1475086094769:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope="basic public_content follower_list comments")
1475086101320:q
1475086115442:?instaOAuth
1475086143600:instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope=c("basic, public_content, follower_list"))
1475086176520:devtools::install_github("pablobarbera/instaR/instaR")
1475086185670:library("instaR")
1475086191629:instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope=c("basic","public_content","follower_list")
1475086194457:)
1475086236900:instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope=c("basic","public_content","follower_list"))
1475086241947:q
1475086253370:instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="fa94e61063c04348b486ae7a7e761557", scope=c("basic","public_content","follower_list"))
1475086352026:q
1475086356582:instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="4337e8c439a84440b08c5e99f204d5f7", scope=c("basic","public_content","follower_list"))
1475086364163:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="4337e8c439a84440b08c5e99f204d5f7", scope=c("basic","public_content","follower_list"))
1475086368502:accounts <- c("thebaronsamedi")
1475086368952:roof= Sys.Date()+1
1475086369120:floor = "2016-04-01"
1475086584143:roof= Sys.Date()+1
1475086584146:floor = "2016-08-09"
1475086593012:username=accounts[account]
1475086593013:posts <- getUserMedia(username=accounts[account],token=my_oauth, n=500)
1475086593950:#,n = 1)#, n=200, verbose = TRUE)
1475086593951:#user <- getUser(accounts[account], token=my_oauth)
1475086593951:#df <- getFollowers('womenchampions', token=my_oauth)
1475086593952:df <- posts
1475086593952:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1475086593952:df$datetime <- format.facebook.date(df$created_time)
1475086593952:df$month <- format(df$datetime, "%Y-%m")
1475086593953:df$day <- format(df$datetime, "%Y-%m-%d")
1475086593953:} else {
1475086593953:print("Date fields already exist.")
1475086593954:}
1475086593955:#roof = "2016-05-30"
1475086593955:#floor = "2016-05-01"
1475086593955:df <- df[df$day > floor,]
1475086593956:df <- df[df$day < roof,]
1475086593957:#posts <- posts[posts$created_time > floor,]
1475086593957:#posts <- posts[posts$created_time < roof,]
1475086593957:#posts <- df
1475086593958:follows <- NULL
1475086593958:impressions <- NULL
1475086593959:impressionusers <- NULL
1475086593959:count <- 0
1475086593960:jump <- 1 # Loop paramater
1475086593960:weight <- 0.1 # 10%
1475086599236:for (post in 1:nrow(df)) {
1475086599236:try(impressionusers <- c(
1475086599238:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1475086599239:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1475086599239:)
1475086599239:,silent = TRUE)
1475086599240:impression <- 0
1475086599240:if (is.null(impressionusers) == TRUE){
1475086599240:impressions[post] <- 0
1475086599241:} else {
1475086599241:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1475086599243:for (user in 1:length(impressionusers)){
1475086599243:#print(user)
1475086599245:#print(impression)
1475086599246:userdata <- NULL
1475086599249:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1475086599251:if (is.null(userdata)) {
1475086599253:newimpression <- 0
1475086599253:impression <- as.numeric(newimpression) + as.numeric(impression)
1475086599254:next
1475086599254:} else {
1475086599255:newimpression <- + userdata$follows + userdata$followed_by
1475086599255:impression <- as.numeric(impression) + as.numeric(newimpression)
1475086599256:}
1475086599257:# Scale down to simulate organic
1475086599257:impression = ceiling(weight * impression)
1475086599261:impressions[post] <- impression
1475086599262:}
1475086599264:print(impressions[post])
1475086599265:count = count + 1
1475086599268:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1475086599268:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1475086599272:}
1475086599274:impressions.store <- impressions
1475086599275:#impressions <- round(impressions/5,0)
1475086599276:df <- cbind(df, impressions)
1475086599276:df.store <- df
1475086599276:df[is.na(df)] <- ""
1475086599277:name <- paste(df$user_fullname[1],"Instagram", Sys.Date())
1475086599278:datafolder <- "/Data"
1475086599278:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1475086599282:write.csv(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".csv")))#, row.names=FALSE)
1475086599289:}
1475086607510:df
1475086608727:posts
1475086612175:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="4337e8c439a84440b08c5e99f204d5f7", scope=c("basic","public_content","follower_list"))
1475086617000:accounts <- c("thebaronsamedi")
1475086618234:roof= Sys.Date()+1
1475086618490:floor = "2016-08-09"
1475086619937:username=accounts[account]
1475086620619:posts <- getUserMedia(username=accounts[account],token=my_oauth, n=500)
1475086623652:posts
1475086629986:accounts[account]
1475086631242:getUserMedia(username=accounts[account],token=my_oauth, n=500)
1475086641605:getUserMedia(username=accounts[account])
1475086648391:getUserMedia(username=accounts[account], token=my_oauth)
1475086738090:?getUser(username=accounts[account], token=my_oauth)
1475086740764:getUser(username=accounts[account], token=my_oauth)
1475086751087:my_oauth
1475086782367:getUserMedia(username=accounts[account],token=my_oauth, n=1)
1475086785584:getUserMedia(username=accounts[account],token=my_oauth, n=100
1475086788321:)
1475086789550:))
1475086872197:getUserMedia(username=accounts[account],token=my_oauth, n=100
1475086876995:)
1475086883310:#install.packages('instaR')
1475086883311:#update.packages("instaR")
1475086883312:library("instaR")
1475086883454:#library('httpuv')
1475086883455:# User Functions
1475086883456:# Function to convert Facebook date format to R date format
1475086883457:format.facebook.date <- function(datestring) {
1475086883457:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1475086883457:}
1475086883458:#folder <- "19c"
1475086883459:#df <- searchInstagram(tag="beringervyds", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1475086883460:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1475086883460:#floor = "2015-12-31" #"2015-05-01"
1475086883460:#df <- df[df$created_time > floor,]
1475086883461:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1475086883461:#"19crimeswine", "19crimeswine,thebaronsamedi
1475086883462:# scope = public_content basic
1475086883462:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="4337e8c439a84440b08c5e99f204d5f7", scope=c("basic","public_content","follower_list"))
1475086905648:q
1475086906564:c
1475086914176:#install.packages('instaR')
1475086914176:#update.packages("instaR")
1475086914178:library("instaR")
1475086914336:#library('httpuv')
1475086914337:# User Functions
1475086914338:# Function to convert Facebook date format to R date format
1475086914339:format.facebook.date <- function(datestring) {
1475086914339:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1475086914340:}
1475086914340:#folder <- "19c"
1475086914341:#df <- searchInstagram(tag="beringervyds", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1475086914344:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1475086914344:#floor = "2015-12-31" #"2015-05-01"
1475086914344:#df <- df[df$created_time > floor,]
1475086914344:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1475086914345:#"19crimeswine", "19crimeswine,thebaronsamedi
1475086914345:# scope = public_content basic
1475086914345:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="4337e8c439a84440b08c5e99f204d5f7", scope=c("basic","public_content","follower_list"))
1475086917558:accounts <- c("thebaronsamedi")
1475086921311:roof= Sys.Date()+1
1475086921312:floor = "2016-08-09"
1475086924261:username=accounts[account]
1475086925112:posts <- getUserMedia(username=accounts[account],token=my_oauth, n=500)
1475086936124:getUserMedia(username=accounts[account],token=my_oauth, n=500)
1475086941707:getUserMedia(username=accounts[account])
1475086945763:getUserMedia(username=accounts[account],token=my_oauth)
1475086952633:getUserMedia(username=accounts[account],token=my_oauth, n=10)
1475086956679:getUserMedia(username=accounts[account],token=my_oauth)
1475086963824:install.packages('instaR')
1475086968691:install.packages("instaR")
1475086975764:library("instaR")
1475086986962:# User Functions
1475086986963:# Function to convert Facebook date format to R date format
1475086986963:format.facebook.date <- function(datestring) {
1475086986963:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1475086986964:}
1475086986964:#folder <- "19c"
1475086986965:#df <- searchInstagram(tag="beringervyds", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1475086986965:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1475086986966:#floor = "2015-12-31" #"2015-05-01"
1475086986966:#df <- df[df$created_time > floor,]
1475086986967:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1475086986967:#"19crimeswine", "19crimeswine,thebaronsamedi
1475086986967:# scope = public_content basic
1475086986968:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="4337e8c439a84440b08c5e99f204d5f7", scope=c("basic","public_content","follower_list"))
1475086993152:username=accounts[account]
1475086993497:posts <- getUserMedia(username=accounts[account],token=my_oauth, n=500)
1475086998752:??instaR
1475087027286:instaR::getUser(username, y_oauth)
1475087030456:instaR::getUser(username, my_oauth)
1475087042712:?getUser
1475087080152:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="4337e8c439a84440b08c5e99f204d5f7", scope=c("basic","public_content","follower_list"))
1475087088697:accounts <- c("thebaronsamedi")
1475087088698:roof= Sys.Date()+1
1475087088700:floor = "2016-08-09"
1475087091463:username=accounts[account]
1475087095794:instaR::getUser(username, y_oauth)
1475087099268:instaR::getUser(username, my_oauth)
1475087105673:getUserMedia(username=accounts[account],token=my_oauth, n=500)
1475087128941:getUserMedia(username=accounts[account])
1475087166959:instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="4337e8c439a84440b08c5e99f204d5f7", scope=c("basic","public_content","follower_list"))
1475087289719:instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="94cb7bb97ff940009cb3401564be4ffe", scope="basic public_content follower_list")
1475087413732:`q
1475087415620:q
1475087416356:`
1475087420821:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="94cb7bb97ff940009cb3401564be4ffe", scope="basic public_content follower_list")
1475087480434:#update.packages("instaR")
1475087480438:library("instaR")
1475087480571:#library('httpuv')
1475087480572:# User Functions
1475087480573:# Function to convert Facebook date format to R date format
1475087480574:format.facebook.date <- function(datestring) {
1475087480574:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1475087480575:}
1475087480575:#folder <- "19c"
1475087480576:#df <- searchInstagram(tag="beringervyds", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1475087480576:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1475087480576:#floor = "2015-12-31" #"2015-05-01"
1475087480577:#df <- df[df$created_time > floor,]
1475087480577:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1475087480578:#"19crimeswine", "19crimeswine,thebaronsamedi
1475087480578:# scope = public_content basic
1475087480578:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="94cb7bb97ff940009cb3401564be4ffe", scope=c("basic", "public_content", "follower_list")
1475087484016:)
1475087589980:q
1475087594420:instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="94cb7bb97ff940009cb3401564be4ffe", scope=c("basic"))
1475087608094:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="94cb7bb97ff940009cb3401564be4ffe", scope=c("basic", "public_content", "follower_list"))
1475087613866:accounts <- c("thebaronsamedi")
1475087613867:roof= Sys.Date()+1
1475087613869:floor = "2016-08-09"
1475087616984:for (account in 1:length(accounts)) {
1475087616985:username=accounts[account]
1475087616987:posts <- getUserMedia(username=accounts[account],token=my_oauth, n=500)
1475087616987:#,n = 1)#, n=200, verbose = TRUE)
1475087616987:#user <- getUser(accounts[account], token=my_oauth)
1475087616988:#df <- getFollowers('womenchampions', token=my_oauth)
1475087616988:df <- posts
1475087616989:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1475087616989:df$datetime <- format.facebook.date(df$created_time)
1475087616989:df$month <- format(df$datetime, "%Y-%m")
1475087616989:df$day <- format(df$datetime, "%Y-%m-%d")
1475087616990:} else {
1475087616990:print("Date fields already exist.")
1475087616990:}
1475087616991:#roof = "2016-05-30"
1475087616992:#floor = "2016-05-01"
1475087616996:df <- df[df$day > floor,]
1475087616997:df <- df[df$day < roof,]
1475087616999:#posts <- posts[posts$created_time > floor,]
1475087616999:#posts <- posts[posts$created_time < roof,]
1475087617003:#posts <- df
1475087617004:follows <- NULL
1475087617006:impressions <- NULL
1475087617007:impressionusers <- NULL
1475087617008:count <- 0
1475087617009:jump <- 1 # Loop paramater
1475087617010:weight <- 0.1 # 10%
1475087617011:for (post in 1:nrow(df)) {
1475087617012:try(impressionusers <- c(
1475087617013:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1475087617014:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1475087617015:)
1475087617018:,silent = TRUE)
1475087617019:impression <- 0
1475087617022:if (is.null(impressionusers) == TRUE){
1475087617023:impressions[post] <- 0
1475087617026:} else {
1475087617027:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1475087617030:for (user in 1:length(impressionusers)){
1475087617031:#print(user)
1475087617034:#print(impression)
1475087617035:userdata <- NULL
1475087617038:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1475087617040:if (is.null(userdata)) {
1475087617041:newimpression <- 0
1475087617042:impression <- as.numeric(newimpression) + as.numeric(impression)
1475087617045:next
1475087617046:} else {
1475087617049:newimpression <- + userdata$follows + userdata$followed_by
1475087617050:impression <- as.numeric(impression) + as.numeric(newimpression)
1475087617052:}
1475087617055:# Scale down to simulate organic
1475087617056:impression = ceiling(weight * impression)
1475087617058:impressions[post] <- impression
1475087617060:}
1475087617061:print(impressions[post])
1475087617064:count = count + 1
1475087617064:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1475087617068:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1475087617069:}
1475087617072:impressions.store <- impressions
1475087617073:#impressions <- round(impressions/5,0)
1475087617076:df <- cbind(df, impressions)
1475087617078:df.store <- df
1475087617081:df[is.na(df)] <- ""
1475087617083:name <- paste(df$user_fullname[1],"Instagram", Sys.Date())
1475087617084:datafolder <- "/Data"
1475087617086:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1475087617089:write.csv(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".csv")))#, row.names=FALSE)
1475087617091:}
1475087618496:#write.xlsx(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".xlsx")), row.names=FALSE)
1475087631596:getUser(username=accounts[account],token=my_oauth)
1475088536396:instaR::searchInstagram(tag = 'obama', token=my_oauth)
1475088560576:instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="94cb7bb97ff940009cb3401564be4ffe", scope="basic public_content follower_list")
1475088567011:instaR::searchInstagram(tag = 'obama', token=my_oauth)
1475088586242:getUser(accounts[account], my_oauth)
1475088651889:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="94cb7bb97ff940009cb3401564be4ffe", scope=c("basic", "public_content", "follower_list","likes"))
1475088676347:getUser(accounts[account], my_oauth)
1475088871903:devtools::install_github("pablobarbera/instaR/instaR")
1475088894559:# User Functions
1475088894560:# Function to convert Facebook date format to R date format
1475088894561:format.facebook.date <- function(datestring) {
1475088894562:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1475088894562:}
1475088894563:#folder <- "19c"
1475088894563:#df <- searchInstagram(tag="beringervyds", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1475088894567:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1475088894567:#floor = "2015-12-31" #"2015-05-01"
1475088894570:#df <- df[df$created_time > floor,]
1475088894571:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1475088894574:#"19crimeswine", "19crimeswine,thebaronsamedi
1475088894575:# scope = public_content basic
1475088894575:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="94cb7bb97ff940009cb3401564be4ffe", scope=c("basic", "public_content", "follower_list","likes"))
1475088902075:accounts <- c("thebaronsamedi")
1475088902075:roof= Sys.Date()+1
1475088902077:floor = "2016-08-09"
1475088914257:getUser(username=accounts[account],token=my_oauth)
1475088919709:library("instaR")
1475088927231:devtools::install_github("pablobarbera/instaR/instaR")
1475088931177:#install_github("pablobarbera/instaR/instaR")
1475088931177:#install.packages('instaR')
1475088931180:#update.packages("instaR")
1475088931180:library("instaR")
1475088931311:#library('httpuv')
1475088965073:# Function to convert Facebook date format to R date format
1475088965074:format.facebook.date <- function(datestring) {
1475088965075:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1475088965076:}
1475088965077:#folder <- "19c"
1475088965077:#df <- searchInstagram(tag="beringervyds", n=1000, token=my_oauth, verbose = TRUE)#, folder = folder)
1475088965081:#roof = "2015-12-01" #Sys.Date()+1 #"2015-01-01"
1475088965081:#floor = "2015-12-31" #"2015-05-01"
1475088965084:#df <- df[df$created_time > floor,]
1475088965084:#Instagram Accounts: rechargewithmilk, womenchampions, 19crimeswine, beringervyds
1475088965087:#"19crimeswine", "19crimeswine,thebaronsamedi
1475088965088:# scope = public_content basic
1475088965088:my_oauth <- instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="94cb7bb97ff940009cb3401564be4ffe", scope=c("basic", "public_content", "follower_list","likes"))
1475089098993:instaOAuth(app_id="b9de4d97aced471cba1de51fe4b09c55", app_secret="94cb7bb97ff940009cb3401564be4ffe", scope=c("basic", "public_content", "follower_list","likes"))
1475089421016:baron_oauth <- instaOAuth(app_id="9a6c2a0dba4c4381bd027980ddb50a53", app_secret="4cc0978e4df946e8a48f2e28178479a2", scope=c("basic", "public_content", "follower_list","likes"))
1475089430695:accounts <- c("thebaronsamedi")
1475089430696:roof= Sys.Date()+1
1475089430698:floor = "2016-08-09"
1475089438201:for (account in 1:length(accounts)) {
1475089438202:username=accounts[account]
1475089438204:posts <- getUserMedia(username=accounts[account],token=my_oauth, n=500)
1475089438205:#,n = 1)#, n=200, verbose = TRUE)
1475089438208:#user <- getUser(accounts[account], token=my_oauth)
1475089438209:#df <- getFollowers('womenchampions', token=my_oauth)
1475089438212:df <- posts
1475089438212:if ((is.null(df$datetime[1]) & is.null(df$month[1]) & is.null(df$day[1])) == TRUE) {
1475089438212:df$datetime <- format.facebook.date(df$created_time)
1475089438213:df$month <- format(df$datetime, "%Y-%m")
1475089438213:df$day <- format(df$datetime, "%Y-%m-%d")
1475089438213:} else {
1475089438214:print("Date fields already exist.")
1475089438214:}
1475089438215:#roof = "2016-05-30"
1475089438215:#floor = "2016-05-01"
1475089438219:df <- df[df$day > floor,]
1475089438220:df <- df[df$day < roof,]
1475089438223:#posts <- posts[posts$created_time > floor,]
1475089438224:#posts <- posts[posts$created_time < roof,]
1475089438227:#posts <- df
1475089438228:follows <- NULL
1475089438229:impressions <- NULL
1475089438232:impressionusers <- NULL
1475089438232:count <- 0
1475089438233:jump <- 1 # Loop paramater
1475089438235:weight <- 0.1 # 10%
1475089438236:for (post in 1:nrow(df)) {
1475089438239:try(impressionusers <- c(
1475089438240:getComments(df$id[post], token=my_oauth, verbose = FALSE)$from_username,
1475089438242:getLikes(df$id[post], token=my_oauth, verbose = FALSE)$username
1475089438243:)
1475089438246:,silent = TRUE)
1475089438247:impression <- 0
1475089438250:if (is.null(impressionusers) == TRUE){
1475089438252:impressions[post] <- 0
1475089438253:} else {
1475089438254:impressionusers <- unique(impressionusers[seq(1, length((impressionusers)), by = jump)])
1475089438258:for (user in 1:length(impressionusers)){
1475089438258:#print(user)
1475089438261:#print(impression)
1475089438262:userdata <- NULL
1475089438265:try(userdata <- getUser(impressionusers[user], token=my_oauth))
1475089438267:if (is.null(userdata)) {
1475089438268:newimpression <- 0
1475089438269:impression <- as.numeric(newimpression) + as.numeric(impression)
1475089438272:next
1475089438272:} else {
1475089438276:newimpression <- + userdata$follows + userdata$followed_by
1475089438280:impression <- as.numeric(impression) + as.numeric(newimpression)
1475089438281:}
1475089438284:# Scale down to simulate organic
1475089438286:impression = ceiling(weight * impression)
1475089438289:impressions[post] <- impression
1475089438290:}
1475089438292:print(impressions[post])
1475089438293:count = count + 1
1475089438295:percentcomplete <- paste0((round(count/nrow(df), digits = 2)*100),"%")
1475089438296:print(paste("Getting impressions for user",df$user_fullname[post],"[",percentcomplete,"] Complete."))
1475089438297:}
1475089438298:impressions.store <- impressions
1475089438300:#impressions <- round(impressions/5,0)
1475089438301:df <- cbind(df, impressions)
1475089438305:df.store <- df
1475089438306:df[is.na(df)] <- ""
1475089438308:name <- paste(df$user_fullname[1],"Instagram", Sys.Date())
1475089438309:datafolder <- "/Data"
1475089438313:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1475089438316:write.csv(df, paste0(getwd(),"/",datafolder,"/",paste0(name,".csv")))#, row.names=FALSE)
1475089438317:}
1475089439591:#write.xlsx(df, paste0(getw
1475089444421:etUserMedia(username=accounts[account],token=my_oauth, n=500)
1475089445426:g
1475089446881:getUserMedia(username=accounts[account],token=my_oauth, n=500)
1475089458574:getUser(username=accounts[account],token=my_oauth)
1475089503917:getUser(username=accounts[account],token=baron_oauth)
1475089510990:getUserMedia(username=accounts[account],token=baron_oauth)
1475089564624:## Facebook Ad API Scraper #####
1475089564627:## Mirum Agency ################
1475089564628:## By Vivek Menon ##############
1475089564631:## v.1.2.0 #####################
1475089564632:# Setup -------------------------------------------------------------------
1475089564632:#.Options - Check current factory options.
1475089564636:#options(stringsAsFactors = FALSE)
1475089564636:library(httr)
1475089564640:library(RJSONIO)
1475089564725:library(RCurl)
1475089565056:library(devtools)
1475089565111:library(xlsx)
1475089567308:# Install and use Rfacebook; deprecated for direct API call approach.
1475089567308:#install_github("pablobarbera/Rfacebook/Rfacebook")
1475089567310:#library(Rfacebook)
1475089567310:#install.packages("Rfacebook")
1475089567310:#library(Rfacebook)
1475089567311:#Using 'rFacebook' from Github
1475089567311:#fboauth <- fbOAuth(app_id = app_id, app_secret ,extended_permissions = scope)
1475089567311:#callAPI("https://graph.facebook.com/v2.6/act_693722000711682/adgroups?fields=name&limit=1000", fboauth)
1475089567312:# bug fixes, date_preset for v2.6 set to 30 by default, reset to lifetime
1475089567312:# set to more rigorous method that pulls all ads at addaccount_id level, instead of consistent queries
1475089567313:# Functions ---------------------------------------------------------------
1475089567314:# User Functions
1475089567314:# Function to convert Facebook date format to R date format
1475089567314:format.facebook.date <- function(datestring) {
1475089567314:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1475089567315:}
1475089567315:# Inputs ------------------------------------------------------------------
1475089567315:#Turn stringsAsFactors off so rbind works properly.
1475089567316:options(stringsAsFactors = FALSE)
1475089567316:# Find OAuth settings for facebook:
1475089567316:#http://developers.facebook.com/docs/authentication/server-side/
1475089567317:facebook <- oauth_endpoints("facebook")
1475089567317:#facebook <- oauth_endpoint(
1475089567318:#  authorize = "https://www.facebook.com/dialog/oauth",
1475089567318:#  access = "https://graph.facebook.com/oauth/access_token",
1475089567318:#  base = "https://localhost:1410")
1475089567318:# Register an application at https://developers.facebook.com/apps/
1475089567319:#Insert your values below - if secret is omitted, it will look it up in
1475089567319:#the FACEBOOK_CONSUMER_SECRET environmental variable.
1475089567320:app_name <- "r_access"
1475089567320:app_id <- "955460364539237"
1475089567321:app_secret <- "0a3e6943c90510dc158fc7683e560f7d"
1475089567322:scope = "ads_management,manage_pages,publish_actions"
1475089567322:## Get a callback URL that matches the value entered in the Facebook App, typically "https://localhost:1410"
1475089567323:full_url <- oauth_callback()
1475089567326:full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
1475089567327:message <- paste("Copy and paste into Site URL on Facebook App Settings:",
1475089567327:full_url, "\nWhen done, press any key to continue...")
1475089567331:## Reminder to add callback into the app page.
1475089567332:invisible(readline(message))
1475089567333:myapp <- oauth_app(app_name, app_id, app_secret)
1475089567334:## current httr version, to test which oauth protocol to use. [Required to set global port variables; won't work otherwise.]
1475089567336:if (packageVersion('httr') > "0.6.1"){
1475089567336:Sys.setenv("HTTR_SERVER_PORT" = "1410/")
1475089567337:fb_oauth <- oauth2.0_token(facebook, myapp,
1475089567337:scope=scope, type = "application/x-www-form-urlencoded", cache=FALSE)
1475089567337:if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
1475089567338:message("Authentication successful.")
1475089567338:}
1475089569485:# Test 1: Facebook Profile Information
1475089569485:req <- GET("https://graph.facebook.com/v2.6/me?fields=id,name", config(token = fb_oauth))
1475089569796:stop_for_status(req)
1475089569797:str(content(req))
1475089569812:# Test 2: Ad Account Information
1475089569813:accountreq <- GET("https://graph.facebook.com/v2.6/act_693722000711682?fields=name", config(token = fb_oauth))
1475089570108:adaccountname <- content(accountreq)[1]$name
1475089570112:adaccountid <- content(accountreq)[2]$id
1475089570115:# Inputs ------------------------------------------------------------------
1475089570115:# /insights is the new /stats; gets ad data at the account and id level
1475089570118:# /keywordstats = interests in ad manager UI
1475089570119:## Variables
1475089570119:# Number of Ads to Pull
1475089570119:ads = 2000 #So far, only 167 in the account.
1475089570120:#try(
1475089570120:#  adreq <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=",")), config(token = fb_oauth))
1475089570124:#)
1475089570124:#stop_for_status(adreq)
1475089570124:#adcontent <- content(adreq)
1475089570125:#adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1475089570125:## Facebook:
1475089570126:#[1] All valid values are: date_start, date_stop, account_id, account_name, adgroup_id, adgroup_name, campaign_group_id, campaign_group_name, campaign_id, campaign_name, action_carousel_card_id, action_carousel_card_name, actions, unique_actions, total_actions, total_unique_actions, action_values, total_action_value, impressions, social_impressions, clicks, social_clicks, unique_impressions, unique_social_impressions, unique_clicks, unique_social_clicks, spend, frequency, social_spend, deeplink_clicks, app_store_clicks, website_clicks, call_to_action_clicks, newsfeed_avg_position, newsfeed_impressions, newsfeed_clicks, reach, social_reach, ctr, unique_ctr, cpc, cpm, cpp, cost_per_total_action, cost_per_action_type, cost_per_unique_click, cost_per_10_sec_video_view, relevance_score, website_ctr, video_avg_sec_watched_actions, video_avg_pct_watched_actions, video_p25_watched_actions, video_p50_watched_actions, video_p75_watched_actions, video_p95_watched_actions, video_p100_watched_actions, video_complete_watched_actions, video_10_sec_watched_actions, video_15_sec_watched_actions, video_30_sec_watched_actions"w
1475089570130:# Processing --------------------------------------------------------------
1475089570132:### Intial Batch Ad Pull
1475089570133:# Dataframe and query result holder
1475089570135:initialcontent <- NULL
1475089570136:after <- NULL
1475089570136:# Pull all ad ids and names, batch mode
1475089570137:#initialreq <- GET(paste0("https://graph.facebook.com/v2.6/act_693722000711682/adcampaigns?fields=name&limit=",ads), config(token = fb_oauth))
1475089570138:initialreq <- 400
1475089570138:count <- 0
1475089570139:while (warn_for_status(initialreq) != TRUE) {
1475089570140:count <- count + 1
1475089570143:print(paste('Query Attempt', count))
1475089570143:initialreq <- GET(paste0("https://graph.facebook.com/v2.6/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
1475089570144:}
1475089570722:initialreq <- GET(paste0("https://graph.facebook.com/v2.6/act_693722000711682/campaigns?fields=name,objective,id,created_time&limit=",ads), config(token = fb_oauth))
1475089571257:str(content(initialreq))
1475089571674:initialcontent <- content(initialreq)
1475089571680:# List of 154; don't need to paginate yet
1475089571681:#after <- initialcontent$paging$cursors$after
1475089571686:## Loop 1, Organize all ads into dataset
1475089571686:print(paste("Pulling All Ad Campaigns for",paste0(adaccountname,".")))
1475089571690:adlist <- data.frame(NULL, stringsAsFactors = FALSE)
1475089571692:ad <- 0
1475089571693:for (ad in (1:(length(initialcontent$data)))) {
1475089571694:#print(i)
1475089571697:adlist[ad,c("ad.campaign.id")] <- initialcontent$data[[ad]]$id
1475089571697:adlist[ad,c("ad.campaign.name")] <- initialcontent$data[[ad]]$name
1475089571697:adlist[ad,c("objective")] <- initialcontent$data[[ad]]$objective
1475089571698:#adlist[ad,c("status")] <- initialcontent$data[[ad]]$campaign_group_status
1475089571698:adlist[ad,c("created.time")] <- substr(initialcontent$data[[ad]]$created_time, 1, 10)
1475089571699:#adlist[ad,c("campaign id")] <- initialcontent$data[[ad]]$campaign_id
1475089571699:#adlist[ad,c("campaign name")] <- initialcontent$data[[ad]]$campaign_name
1475089571700:# Use this loop to populate with admetrics, and augment initial dataset; will not affect following loops.
1475089571702:completion <- (ad/(length(initialcontent$data))*100)
1475089571703:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1475089571704:}
1475089571898:adlist_store <- adlist
1475089571899:# slice list
1475089571899:#adlist <- adlist[adlist$created.time > "2016-02-29",]
1475089571899:#adlist_sliced <- adlist
1475089571900:# Metrics to examine
1475089571900:admetrics <- c("frequency,newsfeed_avg_position,ctr,unique_ctr,spend,reach,social_reach,unique_clicks,social_clicks,cost_per_unique_click,total_actions,cost_per_total_action,actions,video_avg_pct_watched_actions,video_avg_sec_watched_actions") #"cost_per_action_type"
1475089571901:# Test Pull for Loop 2
1475089571901:#testreq <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[89,1],"/insights?fields=",paste(admetrics,collapse=",")), config(token = fb_oauth))
1475089571901:#warn_for_status(testreq)
1475089571901:#content(testreq)
1475089571901:# Metrics framed
1475089571902:overalladmetricsreturned <- c("date_start","date_stop","spend","reach","social_reach","frequency","page_engagement","post_engagement","unique_clicks","social_clicks","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view","video_avg_sec_watched_video_view","video_avg_sec_watched_page_engagement","video_avg_sec_watched_post_engagement","video_avg_pct_watched_video_view","video_avg_pct_watched_page_engagement","video_avg_pct_watched_post_engagement")
1475089571902:#number of columns = length(c(names(header),overalladmetricsreturned))
1475089571903:#adstart <- ad
1475089571906:#600 calls / 600 seconds rate limit
1475089571906:#adlist <- subset(adlist, created.time > "2016-04-26")
1475089571906:#adlist <- subset(adlist, "2016-07-05" > created.time)
1475089571907:adoveralldata <- data.frame(stringsAsFactors = FALSE)
1475089571909:# Baron
1475089571910:adlist <- adlist[grep("BAR",adlist$ad.campaign.name),]
1475089571913:### Warning: Massive while loop that continues until the ad list is retrieved from Facebook Need to restart/interrupt R to stop the loop.
1475089571913:#nrow(adlist))
1475089571915:#4
1475089571915:for (ad in 1:nrow(adlist)) {
1475089571916:print(paste0('Querying Ad ',ad,": ", adlist$ad.campaign.name[ad]))
1475089571916:adreq$status_code = 400
1475089571917:count <- 0
1475089571917:try(adreq <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&date_preset=lifetime&time_increment=1"), config(token = fb_oauth)))
1475089571917:if(adreq$status_code == 400) {
1475089571918:while(adreq$status_code == 400) {
1475089571918:try(adreq <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[ad,1],"/insights?fields=",paste(admetrics[1],collapse=","),"&date_preset=lifetime&time_increment=1"), config(token = fb_oauth)))
1475089571919:count <- count + 1
1475089571920:print(adreq)
1475089571920:print(paste('Limit Reached. Waiting 30 seconds.'))
1475089571921:print(paste('Attempt:',count))
1475089571922:Sys.sleep(30) #5*60
1475089571925:}
1475089571928:} else {
1475089571929:print('Query successful.')
1475089571933:}
1475089571935:# Organize/clean data
1475089571936:adcontent <- content(adreq)
1475089571939:adcontentparsed <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1475089571940:print(adcontentparsed)
1475089571944:nextpage <- adcontent$paging$`next`
1475089571946:while (is.null(nextpage) == FALSE) {
1475089571947:#print("Additional Days")
1475089571951:adreq.additional <- GET(adcontent$paging$`next`, config(token = fb_oauth))
1475089571951:adcontent.additional <- content(adreq.additional)
1475089571954:adcontent.additional.parsed <- unlist(adcontent.additional, use.names=TRUE, recursive=TRUE)
1475089571955:adcontentparsed <- c(adcontentparsed,adcontent.additional.parsed)
1475089571960:nextpage <- adcontent.additional$paging$`next`
1475089571962:}
1475089571962:#adcontent2 <- unlist(adcontent$data, use.names=FALSE, recursive=TRUE)
1475089571965:adcontentparsed.store <- adcontentparsed
1475089571967:#adcontentparsed <- adcontentparsed.store
1475089571970:names(adcontentparsed)[(names(adcontentparsed) == ("actions.value"))] <- adcontentparsed[(names(adcontentparsed) == ("actions.action_type"))]
1475089571971:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("actions.action_type")))]
1475089571974:if (length(which(names(adcontentparsed) %in% c("video_avg_pct_watched_actions.action_type","video_avg_sec_watched_actions.action_type"))) > 1) {
1475089571976:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_sec_watched_actions.value"))] <- paste0("video_avg_sec_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1475089571977:names(adcontentparsed)[(names(adcontentparsed) == ("video_avg_pct_watched_actions.value"))] <- paste0("video_avg_pct_watched_",adcontentparsed[(names(adcontentparsed) == ("video_avg_sec_watched_actions.action_type"))])
1475089571979:adcontentparsed <- adcontentparsed[-which((names(adcontentparsed) == ("video_avg_pct_watched_actions.action_type")))]
1475089571981:}
1475089571982:# Frame data for inclusion
1475089571986:days = length((adcontentparsed[overalladmetricsreturned[1] == names(adcontentparsed)]))
1475089571987:header <- c(adlist[ad,c("ad.campaign.id","ad.campaign.name","objective","created.time")])
1475089571989:footer <- data.frame()
1475089571992:if (is.null(adcontentparsed)==TRUE) {
1475089571994:footer <- rep(0,length(overalladmetricsreturned))
1475089571995:names(footer) <- overalladmetricsreturned
1475089571997:adoverallset <- c(unlist(header),footer)
1475089571999:} else {
1475089572001:for (day in 1:days) {
1475089572001:for (metric in 1:length(overalladmetricsreturned)) {
1475089572008:if (is.na(adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]) == TRUE) {
1475089572009:footer[day,metric] <- 0
1475089572010:} else {
1475089572014:footer[day,metric] <- adcontentparsed[(overalladmetricsreturned[metric] == names(adcontentparsed))][day]
1475089572016:}
1475089572019:colnames(footer) <- overalladmetricsreturned
1475089572020:adoverallset <- cbind(header,footer)
1475089572022:}
1475089572029:adoveralldata <- rbind(adoveralldata,adoverallset)
1475089572031:colnames(adoveralldata) <- c(names(header),overalladmetricsreturned)
1475089572033:# Print processing stats
1475089572034:#completion <- (ad/(nrow(adlist))*100)
1475089572035:#print(ad)
1475089572039:#print(nrow(adoveralldata))
1475089572042:#print(paste0("Finding Facebook Data for Ad Set ",ad,": ",adlist[ad,2]))
1475089572044:print(paste0('Primary dataset appended: ',nrow(adoveralldata),' rows retrieved from Facebook.'))
1475089572046:#print(paste(paste0(round(completion, digits = 0),"%"), "of Ads Processed."))
1475089572051:}
1475091087140:#names(adoveralldata) <- overalladmetricsreturned
1475091087143:print(adoveralldata)
1475091087364:# Exporting ---------------------------------------------------------------
1475091087365:adoveralldatastore <- adoveralldata
1475091087368:#adoveralldata <- adoveralldatastore
1475091087368:adoveralldata[is.na(adoveralldata)] <- ""
1475091087372:#adoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)
1475091087372:#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1475091087372:#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1475091087373:setwd("/Users/vivek.menon")
1475091087374:datafolder <- "Data"
1475091087376:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1475091087379:# Rename columns for Excel readability
1475091087380:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1475091087382:# output Page dataset as final csv
1475091087382:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1475091087383:#write.xlsx(adoveralldata, paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1475091087383:write.csv(adoveralldata, file = paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".csv"), row.names=FALSE)
1475091087395:#####
1475091087396:## Ad Hourly Vector Frame
1475091087396:admetricsreturned <- c("campaign_id","campaign_name","date_start","date_stop","hourly_stats_aggregated_by_advertiser_time_zone","spend","reach","social_reach","frequency","page_engagement","post_engagement","clicks","social_clicks","ctr","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view")
1475091087397:adhourdata <- data.frame(NULL,stringsAsFactors=FALSE)
1475091087398:### Hourly Ad Metrics
1475091087405:## Loop 2: Hourly Ad Pull (Based on Loop 1)
1475091087405:for (ad in 1:nrow(adlist)) {
1475091087406:adhourreq <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=hourly_stats_aggregated_by_advertiser_time_zone"), config(token = fb_oauth))
1475091087407:adhourlydata <- content(adhourreq)
1475091087408:adhourlycontent <- unlist(adhourlydata$data, use.names=TRUE, recursive=TRUE)
1475091087408:completion <- (ad/(nrow(adlist))*100)
1475091087409:print(paste('Finding Facebook Ad Data for',adlist[ad,2]))
1475091087410:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1475091087411:if (length(adhourlycontent) > 0) {
1475091087413:names(adhourlycontent)[(names(adhourlycontent) == ("actions.value"))] <- adhourlycontent[(names(adhourlycontent) == ("actions.action_type"))]
1475091087414:adhourlycontent <- adhourlycontent[-which((names(adhourlycontent) == ("actions.action_type")))]
1475091087415:hours <- adhourlycontent[names(adhourlycontent) == "hourly_stats_aggregated_by_advertiser_time_zone"]
1475091087416:adhourlysetdata <- data.frame(NULL, stringsAsFactors = FALSE)
1475091087423:for (hour in 1:length(hours)){
1475091087425:if (hour <= 1) {
1475091087426:startindex = 1
1475091087428:endindex = which(adhourlycontent == hours[(hour)])
1475091087428:} else {
1475091087429:startindex = which(adhourlycontent == hours[(hour-1)])+1
1475091087430:endindex = which(adhourlycontent == hours[(hour)])
1475091087430:}
1475091087431:#print(paste("Set", hour))
1475091087432:#print(length(adhourlycontent[startindex:endindex]))
1475091087433:#print(adhourlycontent[startindex:endindex])
1475091087434:adhourlyset <- adhourlycontent[startindex:endindex]
1475091087439:adhourlyrow <- adhourlyset[match(admetricsreturned,names(adhourlyset))]
1475091087440:adhourlysetdata <- rbind(adhourlyrow,adhourlysetdata)
1475091087443:#print(adhourlyrow)
1475091087445:}
1475091087447:names(adhourlysetdata) <- admetricsreturned
1475091087449:#print(tail(adhourlysetdata))
1475091087451:adhourdata <- rbind(adhourlysetdata,adhourdata)
1475091087455:names(adhourdata) <- admetricsreturned
1475091087457:} else {
1475091087458:#next()
1475091087462:}
1475091119636:adstart <- ad
1475091119636:#Hourly Admetrics
1475091119638:for (ad in 1:nrow(adlist)) {
1475091119638:adhourreq <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=hourly_stats_aggregated_by_advertiser_time_zone"), config(token = fb_oauth))
1475091119639:adhourlydata <- content(adhourreq)
1475091119639:adhourlycontent <- unlist(adhourlydata$data, use.names=TRUE, recursive=TRUE)
1475091119640:if (length(adhourlycontent) > 0) {
1475091119640:names(adhourlycontent)[(names(adhourlycontent) == ("actions.value"))] <- adhourlycontent[(names(adhourlycontent) == ("actions.action_type"))]
1475091119644:adhourlycontent <- adhourlycontent[-which((names(adhourlycontent) == ("actions.action_type")))]
1475091119646:hours <- adhourlycontent[names(adhourlycontent) == "hourly_stats_aggregated_by_advertiser_time_zone"]
1475091119648:adhourlysetdata <- data.frame(NULL, stringsAsFactors = FALSE)
1475091119649:for (hour in 1:length(hours)){
1475091119652:if (hour <= 1) {
1475091119652:startindex = 1
1475091119655:endindex = which(adhourlycontent == hours[(hour)])
1475091119657:} else {
1475091119658:startindex = which(adhourlycontent == hours[(hour-1)])+1
1475091119659:endindex = which(adhourlycontent == hours[(hour)])
1475091119662:}
1475091119664:#print(paste("Set", hour))
1475091119666:#print(length(adhourlycontent[startindex:endindex]))
1475091119667:#print(adhourlycontent[startindex:endindex])
1475091119671:adhourlyset <- adhourlycontent[startindex:endindex]
1475091119672:adhourlyrow <- adhourlyset[match(admetricsreturned,names(adhourlyset))]
1475091119674:adhourlysetdata <- rbind(adhourlyrow,adhourlysetdata)
1475091119676:#print(adhourlyrow)
1475091119678:}
1475091119681:names(adhourlysetdata) <- admetricsreturned
1475091119682:#print(tail(adhourlysetdata))
1475091119685:adhourdata <- rbind(adhourlysetdata,adhourdata)
1475091119687:names(adhourdata) <- admetricsreturned
1475091119689:} else {
1475091119690:next()
1475091119693:}
1475091148390:### Segmented Ad Metrics
1475091148396:## Loop 3: Segmented Ad Pull (Based on Loop 1)
1475091148396:ad <-  0
1475091148400:admetricsreturned <- c("campaign_id","campaign_name","date_start","date_stop","gender","age","spend","reach","social_reach","frequency","page_engagement","post_engagement","clicks","social_clicks","ctr","cost_per_unique_click","total_actions","cost_per_total_action","like","post_like","comment","share","link_click","photo_view","video_play","video_view")
1475091148423:### PICK UP FROM HERE; THIS LOOP ONLY GETS TO 5% ###
1475091148459:adsegmentsetdata <- data.frame(NULL,stringsAsFactors=FALSE)
1475091148463:for (ad in 1:nrow(adlist)) {
1475091148463:adsegmentreq <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=age,gender"), config(token = fb_oauth))
1475091148474:adsegmentdata <- content(adsegmentreq)
1475091148476:adsegmentcontent <- unlist(adsegmentdata$data, use.names=TRUE, recursive=TRUE)
1475091148481:completion <- (ad/(length(initialcontent$data))*100)
1475091148482:print(paste(paste0(round(completion, digits = 0),"%"), "Complete."))
1475091148490:if (length(adsegmentcontent) > 0) {
1475091148495:names(adsegmentcontent)[(names(adsegmentcontent) == ("actions.value"))] <- adsegmentcontent[(names(adsegmentcontent) == ("actions.action_type"))]
1475091148505:adsegmentcontent <- adsegmentcontent[-which((names(adsegmentcontent) == ("actions.action_type")))]
1475091148509:ages <- unique(adsegmentcontent[names(adsegmentcontent) == "age"])
1475091148512:genders <- unique(adsegmentcontent[names(adsegmentcontent) == "gender"])
1475091148531:adsegmentsetdata <- data.frame(NULL, stringsAsFactors = FALSE)
1475091148536:for (age in 1:length(ages)) {
1475091148539:if (age <= 1) {
1475091148542:startindex = 1
1475091148544:endindex = which(adsegmentcontent == ages[(age)])[3]+1
1475091148545:} else {
1475091148549:startindex = which(adsegmentcontent == ages[(age-1)])[3]+1
1475091148553:endindex = which(adsegmentcontent == ages[(age)])[3]+1
1475091148558:}
1475091148563:adsegmentset <- adsegmentcontent[startindex:endindex]
1475091148574:for (gender in 1:length(genders)) {
1475091148578:if (gender <= 1) {
1475091148579:startgenderindex = 1
1475091148582:endgenderindex = which(adsegmentset == genders[(gender)])
1475091148586:} else {
1475091148588:startgenderindex = which(adsegmentset == genders[(gender-1)])+1
1475091148591:endgenderindex = which(adsegmentset == genders[(gender)])
1475091148592:}
1475091148596:adsegmentrow <- adsegmentset[match(admetricsreturned,names(adsegmentset))]
1475091148599:adsegmentsetdata <- rbind(adsegmentrow,adsegmentsetdata)
1475091148603:}
1475091148695:} else {
1475091148699:next()
1475091148703:}
1475091177539:names(adsegmentdata) <- admetricsreturned
1475091177541:# Placement and Device
1475091177541:adplacereq <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=placement,impression_device"), config(token = fb_oauth))
1475091177794:# Age and Gender
1475091177795:adreq2 <- GET(paste0("https://graph.facebook.com/v2.6/",adlist[ad,1],"/insights?fields=",paste(admetrics,collapse=","),"&breakdowns=age,gender"), config(token = fb_oauth))
1475091178040:adcontent <- content(adreq)
1475091178048:adcontent1 <- unlist(adcontent$data, use.names=TRUE, recursive=TRUE)
1475091178049:# Clean out the NA's
1475091178050:# Exporting ---------------------------------------------------------------
1475091178051:adoveralldata[is.na(adoveralldata)] <- ""
1475091178053:adoveralldata[,-c(2:6)] <- sapply(adoveralldata[,-c(2:6)], as.numeric)
1475091178067:#pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1475091178067:#postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1475091178070:setwd("/Users/vivek.menon")
1475091178071:datafolder <- "Data"
1475091178071:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1475091178072:# Rename columns for Excel readability
1475091178072:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1475091178075:# output Page dataset as final csv
1475091178076:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1475091178080:write.xlsx(adoveralldata, paste0(getwd(),"/",datafolder,"/",paste(adaccountname,"Ad Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1475091190081:# Rename columns for Excel readability
1475091190083:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1475091190088:# output Post dataset as final Excel
1475091190089:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1475091496572:## Facebook Query Injector #####
1475091496575:## Mirum Agency ################
1475091496575:## By Vivek Menon ##############
1475091496575:## v.1.5.0 #####################
1475091496576:# Summary -----------------------------------------------------------------
1475091496576:# Todo --------------------------------------------------------------------
1475091496576:# - Run script for all major brands
1475091496577:# - Create 'participation rate' function
1475091496577:# - Incorporate Twitter
1475091496577:# Setup -------------------------------------------------------------------
1475091496577:# Load and install all necessary packages for the script
1475091496578:# Required Packages for dataframes, forecasting, graphical visualization, and development
1475091496578:# Use 'install.packages()' if unavailable.
1475091496578:#library(zoo)
1475091496578:#library(forecast)
1475091496579:library(ggplot2)
1475091497008:#library(scales)
1475091497008:library(devtools)
1475091497010:library(compare)
1475091497092:library(xlsx)
1475091497093:require(httr)
1475091497094:require(rjson)
1475091497171:require(RCurl)
1475091497172:# Pull most up to date Github repositories for relevant packages
1475091497173:# Not frequently updated; does not need to be run every time.
1475091497174:#install_github("pablobarbera/Rfacebook/Rfacebook")
1475091497174:#install_github("pablobarbera/instaR/instaR")
1475091497175:# Required packags for plugging into Facebook API
1475091497175:#library(twitteR)
1475091497176:#install.packages('Rfacebook')
1475091497176:library(Rfacebook)
1475091497289:#library(instaR)
1475091497289:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1475091497291:# https://instagram.com/developer/authentication/?hl=en
1475091497292:#setwd("~/Desktop/TWE/Monthly Reports/June 2015")
1475091497292:setwd("~/")
1475091497292:getwd()
1475091497293:# Functions ---------------------------------------------------------------
1475091497293:# User Functions
1475091497296:# Function to convert Facebook date format to R date format
1475091497296:format.facebook.date <- function(datestring) {
1475091497297:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1475091497297:}
1475091497297:# Shift a vector up by an amount
1475091497298:shift <- function(x, n){
1475091497298:c(x[-(seq(n))], rep(NA, n))
1475091497298:}
1475091497299:# Get gcd from vector
1475091497299:gcd <- function(x,y) {
1475091497299:r <- x%%y;
1475091497299:return(ifelse(r, gcd(y, r), y))
1475091497299:}
1475091497300:# Inputs ------------------------------------------------------------------
1475091497300:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1475091497304:# Define data range for data (2012 is out of bounds for some metrics)
1475091497304:# http://thinktostart.com/analyzing-facebook-with-r/
1475091497304:fb_oauth <- fbOAuth(app_id="955460364539237", app_secret="0a3e6943c90510dc158fc7683e560f7d",extended_permissions = FALSE)
1475091499808:posts <- 2000
1475091499808:roof = Sys.Date() #"2015-12-31"
1475091499810:floor = "2016-01-01" #"2015-05-01"
1475091499811:range = seq(as.Date(floor), as.Date(roof), by="days")
1475091499812:## Access ftoken
1475091499812:# Use token from Facebook Graph API
1475091499813:# token generated here: https://developers.facebook.com/tools/explorer
1475091499813:# Lasts two hours, and must be changed depending on page and permissions
1475091499814:ftokens <- c(
1475091499814:#Sledgehammer Wine
1475091499815:#"CAACEdEose0cBAAaqv8JuC9FYYF2JZBzCDyJSrZB5aXhCMHeZAYjdcRkoOyZBHAqNdsSAVnmf63EyT3ZB6pcBZAIcPxcDCQCAXFE1ER62zJDC9tMF6AC5IvTXczksCjh9HocfSBYA1qjER8wsoFvPUF1B9f4mMhNrnAPWRZADbliPBRDTh0D2qF72LAPwZCsfw3UZD"
1475091499815:#Chateau Saint Jean
1475091499815:#"EAACEdEose0cBAOwwfrVCmYxjRlHVlMDJAjtEJkfMZBkWVsQbDGv0eXi50MZCc4F2i33vbhmJ6823oIzAbhezsZAkqchpPpYaiB8XzcfZBKS2jSXE22EY1e855OvkfgFyjKPiOPOjOZAQIbDiJg1tHCMMLVjUlwPcoKGBEexWbGQZDZD"
1475091499815:#19 Crimes
1475091499815:#,"EAACEdEose0cBANCXTZAFtviL9VEUq4DhkEwMyzqdmWgZBh68EReZAIEOVBYlTSiS52swRACvjhybfPQGFqEOmJp0OjTSPQ9ZC01R6nxViJ5xDHXPlDCwnnXOBObHYwZAXhQzy52kL3FZA3WcHNrGNIqfJZC9MZCJPkkfXHpVsx3PHQZDZD"
1475091499816:#Beringer Vneyards
1475091499816:#,"EAACEdEose0cBAAfj1KkrLbPzVw0v5gul87LeUeoXUHnN6rlxrVRklAgg214vFGLkQTKeLHEUWDGg9ZBVeTDRQdOietA25FLcAaQCGiKvmLFv3ZAYnMpLg9YKnpNpazKjXKwWpkXZBdjuKB7Ql6JKu4Q8pNOZCk97LWSwW4U8vgZDZD"
1475091499816:#100% Canadian Milk
1475091499816:#"EAANkZCHOgFWUBAJZCvRlC7OapZBTJNXWibKAXkVi09U4IgYweulZANtxZB3GTuNBOC7HKkXCu2nKSJwyAJVimuk4VdHWUyVQtufu8io4uNJILPctxkOs51myVMErxwdXe6yFHWrzABRadSI9QpNGmvWkxpO8fjrdmVpqe3XgOUQZDZD"
1475091499817:#Lait 100% Canadien
1475091499817:#,"EAANkZCHOgFWUBAOfjVgEIn6mY1OHt6ZCwaZA8RGhMlDX9l2UUZCAOLylBVZBWpaXyFyyjRqo5eYnZBTYTgrRbIkZA95ZAiuJZBZBwqtjs60zNMNpj7Dn9rqnR4BI2czMR7lB84wIw0ikJSwXxZAcBpFBG0NFUP8q2spL7ZBitHw7Q9EY8QZDZD"
1475091499817:#Recharge with Milk
1475091499817:#,"CAACEdEose0cBAJ9NPmffbszUQ1HYObOGqdht5XWBoU7zABLhgZB6L53eyqVrt0CPxkZAXQpI0fGW7FHucQ0LgGtmRRlWP6eAQgZBSa6oaRibk9qZAp0xVGZCr4B6AdysmfVlbZCFjoZBYZCJ3sxN1yMdL5jz6yCWOZAAbAv00nXq5wURrgCUe3dXZAZBF2COnBm9YxXk5vFoWWJkQZDZD"
1475091499818:#BaronSamedi
1475091499818:"EAANkZCHOgFWUBAF2DJvKfMZAJCJICo0Xd3bT8GJP7zhUHuTUmnDdM1qOH8EUl8qUMj8CyzwSuDFRmKucSCRckOHrROq3wZA6EeQ8xB9NWIESniqvJ5dP9H9rHkEg4nZCFdpjeZCqZCk0jzCl6bXTTZBWxpuilujWsL6Ade6LvjJYAZDZD"
1475091499818:)
1475091499819:totalpagedata <- data.frame()
1475091499820:totalpostdata <- data.frame()
1475091513399:## Facebook Query Injector #####
1475091513399:## Mirum Agency ################
1475091513401:## By Vivek Menon ##############
1475091513402:## v.1.5.0 #####################
1475091513403:# Summary -----------------------------------------------------------------
1475091513404:# Todo --------------------------------------------------------------------
1475091513407:# - Run script for all major brands
1475091513407:# - Create 'participation rate' function
1475091513408:# - Incorporate Twitter
1475091513408:# Setup -------------------------------------------------------------------
1475091513409:# Load and install all necessary packages for the script
1475091513409:# Required Packages for dataframes, forecasting, graphical visualization, and development
1475091513409:# Use 'install.packages()' if unavailable.
1475091513410:#library(zoo)
1475091513410:#library(forecast)
1475091513410:library(ggplot2)
1475091513411:#library(scales)
1475091513412:library(devtools)
1475091513415:library(compare)
1475091513415:library(xlsx)
1475091513419:require(httr)
1475091513422:require(rjson)
1475091513422:require(RCurl)
1475091513426:# Pull most up to date Github repositories for relevant packages
1475091513426:# Not frequently updated; does not need to be run every time.
1475091513429:#install_github("pablobarbera/Rfacebook/Rfacebook")
1475091513430:#install_github("pablobarbera/instaR/instaR")
1475091513430:# Required packags for plugging into Facebook API
1475091513430:#library(twitteR)
1475091513431:#install.packages('Rfacebook')
1475091513431:library(Rfacebook)
1475091513432:#library(instaR)
1475091513432:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1475091513435:# https://instagram.com/developer/authentication/?hl=en
1475091513436:#setwd("~/Desktop/TWE/Monthly Reports/June 2015")
1475091513436:setwd("~/")
1475091513436:getwd()
1475091513437:# Functions ---------------------------------------------------------------
1475091513438:# User Functions
1475091513441:# Function to convert Facebook date format to R date format
1475091513441:format.facebook.date <- function(datestring) {
1475091513442:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1475091513442:}
1475091513446:# Shift a vector up by an amount
1475091513446:shift <- function(x, n){
1475091513449:c(x[-(seq(n))], rep(NA, n))
1475091513450:}
1475091513450:# Get gcd from vector
1475091513451:gcd <- function(x,y) {
1475091513454:r <- x%%y;
1475091513454:return(ifelse(r, gcd(y, r), y))
1475091513455:}
1475091513459:# Inputs ------------------------------------------------------------------
1475091513459:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1475091513462:# Define data range for data (2012 is out of bounds for some metrics)
1475091513462:# http://thinktostart.com/analyzing-facebook-with-r/
1475091513465:fb_oauth <- fbOAuth(app_id="955460364539237", app_secret="0a3e6943c90510dc158fc7683e560f7d",extended_permissions = FALSE)
1475091515230:posts <- 2000
1475091515230:roof = Sys.Date() #"2015-12-31"
1475091515232:floor = "2016-08-10" #"2015-05-01"
1475091515232:range = seq(as.Date(floor), as.Date(roof), by="days")
1475091515238:## Access ftoken
1475091515241:# Use token from Facebook Graph API
1475091515243:# token generated here: https://developers.facebook.com/tools/explorer
1475091515243:# Lasts two hours, and must be changed depending on page and permissions
1475091515244:ftokens <- c(
1475091515244:#Sledgehammer Wine
1475091515245:#"CAACEdEose0cBAAaqv8JuC9FYYF2JZBzCDyJSrZB5aXhCMHeZAYjdcRkoOyZBHAqNdsSAVnmf63EyT3ZB6pcBZAIcPxcDCQCAXFE1ER62zJDC9tMF6AC5IvTXczksCjh9HocfSBYA1qjER8wsoFvPUF1B9f4mMhNrnAPWRZADbliPBRDTh0D2qF72LAPwZCsfw3UZD"
1475091515246:#Chateau Saint Jean
1475091515246:#"EAACEdEose0cBAOwwfrVCmYxjRlHVlMDJAjtEJkfMZBkWVsQbDGv0eXi50MZCc4F2i33vbhmJ6823oIzAbhezsZAkqchpPpYaiB8XzcfZBKS2jSXE22EY1e855OvkfgFyjKPiOPOjOZAQIbDiJg1tHCMMLVjUlwPcoKGBEexWbGQZDZD"
1475091515246:#19 Crimes
1475091515247:#,"EAACEdEose0cBANCXTZAFtviL9VEUq4DhkEwMyzqdmWgZBh68EReZAIEOVBYlTSiS52swRACvjhybfPQGFqEOmJp0OjTSPQ9ZC01R6nxViJ5xDHXPlDCwnnXOBObHYwZAXhQzy52kL3FZA3WcHNrGNIqfJZC9MZCJPkkfXHpVsx3PHQZDZD"
1475091515247:#Beringer Vneyards
1475091515247:#,"EAACEdEose0cBAAfj1KkrLbPzVw0v5gul87LeUeoXUHnN6rlxrVRklAgg214vFGLkQTKeLHEUWDGg9ZBVeTDRQdOietA25FLcAaQCGiKvmLFv3ZAYnMpLg9YKnpNpazKjXKwWpkXZBdjuKB7Ql6JKu4Q8pNOZCk97LWSwW4U8vgZDZD"
1475091515248:#100% Canadian Milk
1475091515248:#"EAANkZCHOgFWUBAJZCvRlC7OapZBTJNXWibKAXkVi09U4IgYweulZANtxZB3GTuNBOC7HKkXCu2nKSJwyAJVimuk4VdHWUyVQtufu8io4uNJILPctxkOs51myVMErxwdXe6yFHWrzABRadSI9QpNGmvWkxpO8fjrdmVpqe3XgOUQZDZD"
1475091515249:#Lait 100% Canadien
1475091515249:#,"EAANkZCHOgFWUBAOfjVgEIn6mY1OHt6ZCwaZA8RGhMlDX9l2UUZCAOLylBVZBWpaXyFyyjRqo5eYnZBTYTgrRbIkZA95ZAiuJZBZBwqtjs60zNMNpj7Dn9rqnR4BI2czMR7lB84wIw0ikJSwXxZAcBpFBG0NFUP8q2spL7ZBitHw7Q9EY8QZDZD"
1475091515249:#Recharge with Milk
1475091515250:#,"CAACEdEose0cBAJ9NPmffbszUQ1HYObOGqdht5XWBoU7zABLhgZB6L53eyqVrt0CPxkZAXQpI0fGW7FHucQ0LgGtmRRlWP6eAQgZBSa6oaRibk9qZAp0xVGZCr4B6AdysmfVlbZCFjoZBYZCJ3sxN1yMdL5jz6yCWOZAAbAv00nXq5wURrgCUe3dXZAZBF2COnBm9YxXk5vFoWWJkQZDZD"
1475091515250:#BaronSamedi
1475091515250:"EAANkZCHOgFWUBAF2DJvKfMZAJCJICo0Xd3bT8GJP7zhUHuTUmnDdM1qOH8EUl8qUMj8CyzwSuDFRmKucSCRckOHrROq3wZA6EeQ8xB9NWIESniqvJ5dP9H9rHkEg4nZCFdpjeZCqZCk0jzCl6bXTTZBWxpuilujWsL6Ade6LvjJYAZDZD"
1475091515251:)
1475091515251:totalpagedata <- data.frame()
1475091515253:totalpostdata <- data.frame()
1475091515256:for (brand in 1:length(ftokens)) {
1475091515258:ftoken <- ftokens[brand]
1475091515259:## User Id
1475091515259:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1475091515260:userid = "10153046308598756"
1475091515261:# Access public personal data; basically a ftoken test
1475091515265:me <- getUsers("me", token=ftoken)
1475091515266:print(me$name)
1475091515268:## Page Id
1475091515269:# Define which page will be used for the data collection. Change id's as necessary.
1475091515272:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1475091515273:pageid = me$id
1475091515276:# Acquisition -------------------------------------------------------------
1475091515277:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1475091515279:page <- getPage(pageid, ftoken, n = posts)
1475091515279:page.store <- page
1475091515282:# Create new vectors in dataset with datetime, month, and day formattiong
1475091515283:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1475091515284:page$datetime <- format.facebook.date(page$created_time)
1475091515285:page$month <- format(page$datetime, "%Y-%m")
1475091515286:page$day <- format(page$datetime, "%Y-%m-%d")
1475091515287:page$datetime <- as.Date(page$datetime)
1475091515288:#page$month <- as.Date(page$month)
1475091515291:page$day <- as.Date(page$day)
1475091515292:} else {
1475091515296:print("Date fields already exist.")
1475091515298:}
1475091515300:# Processing --------------------------------------------------------------
1475091515302:# Process data to clean dataset and augment it with more data than default fields.
1475091515303:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1475091515307:## Cleaning =================================
1475091515308:# Page and Post Datasets
1475091515310:# Split dataset into two for pages and post data
1475091515312:# Create initial null sets
1475091515314:pagedata <- 0
1475091515315:postdata <- 0
1475091515321:## Appending =================================
1475091515323:### Page Metrics #############################
1475091515324:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1475091515331:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1475091515334:# Page Metrics to automatically pull
1475091515336:# "page_fans_online" ,"page_fans_gender_age", "page_positive_feedback_by_type"
1475091515338:metrics = c("page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions") #c(
1475091515339:names(metrics) = c("Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions")
1475091515342:pagemetrics <- metrics
1475091515344:# Prep dataset by breaking into weeks
1475091515345:pagedata <- 0
1475091515347:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1475091515350:colnames(pagedata) = c("pageid", "page", "date")
1475091515353:pagedata$page = page$from_name[1]
1475091515354:pagedata$pageid = page$from_id[1]
1475091515357:divisor = 5
1475091515358:remainder = length(range)%%divisor;
1475091515365:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1475091515367:weeks <- (nrow(pagedata)/5)-2
1475091515370:# Start Data Acquisition Loop
1475091515371:for (metric in 1:length(metrics)) {
1475091515374:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1475091515378:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1475091515380:period = 'lifetime'
1475091515382:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1475091515383:period = 'day'
1475091515386:tempfloor = "2014-02-01"
1475091515387:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1475091515390:if (floor < tempfloor) {
1475091515393:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1475091515394:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1475091515401:weeks = tempweeks
1475091515422:} else {}
1475091515423:} else {
1475091515426:period = 'day'
1475091515429:weeks <- (nrow(pagedata)/5)-2
1475091515430:}
1475091515435:hold <- matrix(0, nrow=0, ncol=7)
1475091515439:for (week in 0:weeks) {
1475091515441:end <- pagedata$date[(week*5)+1]
1475091515443:start <- pagedata$date[((week+1)*5)+1]
1475091515447:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1475091515450:pull <- NULL
1475091515452:attempt <- 1
1475091515455:while(is.null(pull) && attempt <= 10) {
1475091515457:attempt <- attempt + 1
1475091515458:try(
1475091515462:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1475091515464:)
1475091515468:if (is.null(pull)) {
1475091515470:print("Empty Pull. Re-attempting.")
1475091515471:print(paste("Attempt", attempt))
1475091515473:} else {
1475091515475:pull$datetime <- format.facebook.date(pull$end_time)
1475091515477:pull$day <- format(pull$datetime, "%Y-%m-%d")
1475091515482:pull$datetime <- as.Date(pull$datetime)
1475091515484:#page$month <- as.Date(page$month)
1475091515486:pull$day <- as.Date(pull$day)
1475091515491:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1475091515493:print("Found Facebook data matching date range. Storing values.")
1475091515503:} else {
1475091515505:print("Did not find Facebook data matching dataset dates. Re-querying.")
1475091515507:print(paste("Attempt", attempt))
1475091515509:pull <- NULL}
1475091515522:if (attempt > 100) {
1475091515524:print('Too many attempts. Skipping.')
1475091515526:pull <- NULL
1475091515539:break
1475091515542:} else {}
1475091515545:}
1475091515565:pulllength <- ncol(pull)
1475091515571:rpull = pull[rev(rownames(pull)),]
1475091515575:hold <- rbind(hold,rpull)
1475091515580:rawhold <- hold
1475091515585:}
1475091515600:rhold = hold[rev(rownames(hold)),]
1475091515602:rhold$value = shift(rhold$value, 1)
1475091515604:hold = rhold[rev(rownames(rhold)),]
1475091515607:hold$value[1] = rawhold$value[1]
1475091515612:hours <- seq(0,23)
1475091515616:names(hours) <- paste("Hour", hours)
1475091515618:subtypes <- c('link','comment', 'like')
1475091515621:names(subtypes) <- c('Shares','Comments', 'Likes')
1475091515624:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24")
1475091515625:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24")
1475091515628:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1475091515634:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1475091515636:for (type in 1:length(subtypes)) {
1475091515638:typehold <- NA
1475091515640:typehold <- hold[hold$variable == subtypes[type],]
1475091515643:pagedata <- cbind(NA,pagedata)
1475091515644:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1475091515646:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1475091515649:metrics <- c(metrics,subtypes[type])
1475091515651:}
1475091515657:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1475091515661:for (demographic in 1:length(demographics)) {
1475091515664:print(names(demographics[demographic]))
1475091515667:typehold <- NA
1475091515668:typehold <- hold[hold$variable == demographics[demographic],]
1475091515671:typehold[typehold$value <= 10,] <- NA
1475091515674:pagedata <- cbind(NA,pagedata)
1475091515675:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1475091515676:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1475091515679:metrics <- c(metrics,demographics[demographic])
1475091515681:}
1475091515684:} else if ((metrics)[metric] == 'page_fans_online') {
1475091515687:for (hour in 1:length(hours)) {
1475091515690:typehold <- NA
1475091515691:typehold <- hold[hold$variable == hours[hour],]
1475091515696:pagedata <- cbind(NA,pagedata)
1475091515697:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1475091515699:colnames(pagedata)[1] = paste("hour",hours[hour])
1475091515705:metrics <- c(metrics,hours[hour])
1475091515708:}
1475091515711:} else {
1475091515713:pagedata <- cbind(NA,pagedata)
1475091515716:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1475091515719:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1475091515724:}
1475091515727:cat("\n\n")
1475091515729:print(head(pagedata))
1475091515733:cat("\n")
1475091515739:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1475091515741:break
1475091515745:} else {
1475091515748:}
1475091515761:pagedata.tempstore <- pagedata
1475091515766:#Page Metrics to remove because they have subtypes
1475091515770:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1475091515777:# Page Metrics to manually create
1475091515780:metrics <- c(metrics,"organic reach")
1475091515782:names(metrics)[length(metrics)] <- c("Organic Reach")
1475091515785:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1475091515787:colnames(pagedata)[1] = "organic reach"
1475091515792:# Final dataset formatting
1475091515793:pagedatastore <- pagedata
1475091515795:#pagedata <- pagedatastore
1475091515797:pagedata2 <- pagedata
1475091515802:# reorder and null NA's for excel
1475091515804:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1475091515806:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1475091515808:#pagedata2[is.na(pagedata2)] <- ""
1475091515812:#pagedata2[pagedata2 == 0] <- ""
1475091515816:# store final dataset
1475091515818:pagedata <- pagedata2
1475091515821:### Post Metrics #############################
1475091515823:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1475091515826:# Most are automated, and will continue to retry through errors until a value is found.
1475091515828:# Manual modifications are run after initial data acquisition.
1475091515831:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1475091515834:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1475091515838:# Populate sets with values from pull
1475091515841:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1475091515843:page$datetime <- format.facebook.date(page$created_time)
1475091515846:page$month <- format(page$datetime, "%Y-%m")
1475091515849:page$day <- format(page$datetime, "%Y-%m-%d")
1475091515852:page$datetime <- as.Date(page$datetime)
1475091515854:#page$month <- as.Date(page$month)
1475091515857:page$day <- as.Date(page$day)
1475091515861:} else {
1475091515863:print("Date fields already exist for Post Data.")
1475091515865:}
1475091515869:postdata <- 0
1475091515872:postdata <- page[page$day > floor,]
1475091515874:postdata <- postdata[postdata$day < roof,]
1475091515878:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1475091515885:# Name column for usability
1475091515888:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1475091515891:rows <- nrow(postdata)
1475091515893:lpostmetrics <- postmetrics
1475091515902:testlength <- 2
1475091515903:#length(postmetrics) instead of testlength; swapped out for hotfixes
1475091515911:for (pmetric in 1:length(postmetrics)) {
1475091515914:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1475091515920:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1475091515922:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1475091515925:names(phold) <- c("id","name","period","title","description","value","variable")
1475091515927:} else {
1475091515929:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1475091515932:names(phold) <- c("id","name","period","title","description","value")
1475091515934:}
1475091515941:for (post in 1:nrow(postdata)) {
1475091515947:period <- "lifetime"
1475091515953:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1475091515957:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1475091515960:print('Not a Facebook Video.')
1475091515963:phold <- rbind(phold, NA)
1475091515966:next()
1475091515968:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1475091515970:} else {
1475091515974:}
1475091515980:postpull <- NULL
1475091515983:attempt <- 1
1475091515988:while( is.null(postpull) && attempt <= 100) {
1475091515990:attempt <- attempt + 1
1475091515993:try(
1475091515995:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1475091515997:,silent=TRUE
1475091516001:)
1475091516004:if (attempt > 10) {
1475091516007:print('Too many attempts. Skipping.')
1475091516009:postpull <- NULL
1475091516011:break
1475091516015:} else {
1475091516018:}
1475091516027:colnames(phold) <- names(postpull)
1475091516031:phold <- rbind(phold, postpull)
1475091516034:}
1475091516036:pholdstore <- phold
1475091516041:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1475091516044:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1475091516049:phold <- phold[-1,]
1475091516055:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1475091516060:postmetrics <- postmetrics[-pmetric]
1475091516062:pmetric <- pmetric + 1
1475091516068:for (ptype in (1:length(psubtypes))) {
1475091516071:ptyphehold <- NA
1475091516074:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1475091516078:postdata <- cbind(NA,postdata)
1475091516082:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1475091516088:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1475091516090:postmetrics <- c(postmetrics,psubtypes[ptype])
1475091516093:}
1475091516101:} else {
1475091516103:postdata <- cbind(NA,postdata)
1475091516107:postdata[1:length(phold$value),1] <- phold$value
1475091516109:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1475091516112:}
1475091516121:cat("\n\n")
1475091516124:print(head(postdata))
1475091516127:cat("\n")
1475091516129:}
1475091516136:postdatastore <- postdata
1475091516146:# Post Metrics to manually create
1475091516151:postmetrics <- c(postmetrics,"organic reach")
1475091516153:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1475091516159:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1475091516161:colnames(postdata)[1] = "organic reach"
1475091516168:# Final dataset formatting
1475091516170:#postdatastore <- postdata
1475091516173:#postdata <- postdatastore
1475091516178:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1475091516185:# reorder and null NA's for Excel
1475091516188:postdata2 <- postdata
1475091516191:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1475091516194:postdata2[is.na(postdata2)] <- ""
1475091516198:postdata2[postdata2 == 0] <- ""
1475091516205:# store final dataset
1475091516209:postdata <- as.data.frame(postdata2)
1475091516216:# Outputs -----------------------------------------------------------------
1475091516222:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1475091516228:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1475091516239:datafolder <- "Data"
1475091516247:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1475091516254:# Rename columns for Excel readability
1475091516259:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1475091516263:# output Page dataset as final csv
1475091516267:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1475091516273:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1475091516278:?wri
1475091516284:# Rename columns for Excel readability
1475091516290:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1475091516295:# output Post dataset as final Excel
1475091516300:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1475091516306:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1475091516313:# Raw Data
1475091516319:# output dataset as raw csv
1475091516325:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1475091516332:totalpagedata <- rbind(totalpagedata, pagedata)
1475091516336:totalpostdata <- rbind(totalpostdata, postdata)
1475091516347:}
1475091575205:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1475091576427:# Rename columns for Excel readability
1475091576428:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1475091576429:# output Post dataset as final Excel
1475091576429:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1475091576430:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1475091577350:# Images
1475091577350:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1475091577354:#for (picture in (1:nrow(postdata))) {
1475091577355:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1475091577356:#
1475091577360:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1475091577364:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1475091577369:#
1475091577369:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1475091577370:# Edit the core program and change feedback loop.
1475091577370:#
1475091577373:#}
1475091814689:## Facebook Query Injector #####
1475091814692:## Mirum Agency ################
1475091814692:## By Vivek Menon ##############
1475091814695:## v.1.5.0 #####################
1475091814696:# Summary -----------------------------------------------------------------
1475091814699:# Todo --------------------------------------------------------------------
1475091814700:# - Run script for all major brands
1475091814703:# - Create 'participation rate' function
1475091814703:# - Incorporate Twitter
1475091814703:# Setup -------------------------------------------------------------------
1475091814704:# Load and install all necessary packages for the script
1475091814704:# Required Packages for dataframes, forecasting, graphical visualization, and development
1475091814704:# Use 'install.packages()' if unavailable.
1475091814704:#library(zoo)
1475091814705:#library(forecast)
1475091814705:library(ggplot2)
1475091814705:#library(scales)
1475091814706:library(devtools)
1475091814709:library(compare)
1475091814710:library(xlsx)
1475091814713:require(httr)
1475091814714:require(rjson)
1475091814715:require(RCurl)
1475091814717:# Pull most up to date Github repositories for relevant packages
1475091814717:# Not frequently updated; does not need to be run every time.
1475091814719:#install_github("pablobarbera/Rfacebook/Rfacebook")
1475091814720:#install_github("pablobarbera/instaR/instaR")
1475091814723:# Required packags for plugging into Facebook API
1475091814723:#library(twitteR)
1475091814724:#install.packages('Rfacebook')
1475091814724:library(Rfacebook)
1475091814725:#library(instaR)
1475091814725:# https://github.com/pablobarbera/instaR/blob/master/examples.R
1475091814728:# https://instagram.com/developer/authentication/?hl=en
1475091814729:#setwd("~/Desktop/TWE/Monthly Reports/June 2015")
1475091814729:setwd("~/")
1475091814729:getwd()
1475091814730:# Functions ---------------------------------------------------------------
1475091814731:# User Functions
1475091814734:# Function to convert Facebook date format to R date format
1475091814737:format.facebook.date <- function(datestring) {
1475091814738:date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
1475091814738:}
1475091814739:# Shift a vector up by an amount
1475091814739:shift <- function(x, n){
1475091814742:c(x[-(seq(n))], rep(NA, n))
1475091814743:}
1475091814743:# Get gcd from vector
1475091814744:gcd <- function(x,y) {
1475091814747:r <- x%%y;
1475091814750:return(ifelse(r, gcd(y, r), y))
1475091814751:}
1475091814755:# Inputs ------------------------------------------------------------------
1475091814755:# Set up script initials; what is the access ftoken, the relevant ids, and other necessary variables
1475091814758:# Define data range for data (2012 is out of bounds for some metrics)
1475091814759:# http://thinktostart.com/analyzing-facebook-with-r/
1475091814760:fb_oauth <- fbOAuth(app_id="955460364539237", app_secret="0a3e6943c90510dc158fc7683e560f7d",extended_permissions = FALSE)
1475091819471:posts <- 2000
1475091819471:roof = Sys.Date() #"2015-12-31"
1475091819473:floor = "2016-08-01" #"2015-05-01"
1475091819474:range = seq(as.Date(floor), as.Date(roof), by="days")
1475091819479:## Access ftoken
1475091819479:# Use token from Facebook Graph API
1475091819483:# token generated here: https://developers.facebook.com/tools/explorer
1475091819483:# Lasts two hours, and must be changed depending on page and permissions
1475091819484:ftokens <- c(
1475091819484:#Sledgehammer Wine
1475091819488:#"CAACEdEose0cBAAaqv8JuC9FYYF2JZBzCDyJSrZB5aXhCMHeZAYjdcRkoOyZBHAqNdsSAVnmf63EyT3ZB6pcBZAIcPxcDCQCAXFE1ER62zJDC9tMF6AC5IvTXczksCjh9HocfSBYA1qjER8wsoFvPUF1B9f4mMhNrnAPWRZADbliPBRDTh0D2qF72LAPwZCsfw3UZD"
1475091819488:#Chateau Saint Jean
1475091819492:#"EAACEdEose0cBAOwwfrVCmYxjRlHVlMDJAjtEJkfMZBkWVsQbDGv0eXi50MZCc4F2i33vbhmJ6823oIzAbhezsZAkqchpPpYaiB8XzcfZBKS2jSXE22EY1e855OvkfgFyjKPiOPOjOZAQIbDiJg1tHCMMLVjUlwPcoKGBEexWbGQZDZD"
1475091819492:#19 Crimes
1475091819496:#,"EAACEdEose0cBANCXTZAFtviL9VEUq4DhkEwMyzqdmWgZBh68EReZAIEOVBYlTSiS52swRACvjhybfPQGFqEOmJp0OjTSPQ9ZC01R6nxViJ5xDHXPlDCwnnXOBObHYwZAXhQzy52kL3FZA3WcHNrGNIqfJZC9MZCJPkkfXHpVsx3PHQZDZD"
1475091819496:#Beringer Vneyards
1475091819499:#,"EAACEdEose0cBAAfj1KkrLbPzVw0v5gul87LeUeoXUHnN6rlxrVRklAgg214vFGLkQTKeLHEUWDGg9ZBVeTDRQdOietA25FLcAaQCGiKvmLFv3ZAYnMpLg9YKnpNpazKjXKwWpkXZBdjuKB7Ql6JKu4Q8pNOZCk97LWSwW4U8vgZDZD"
1475091819500:#100% Canadian Milk
1475091819500:#"EAANkZCHOgFWUBAJZCvRlC7OapZBTJNXWibKAXkVi09U4IgYweulZANtxZB3GTuNBOC7HKkXCu2nKSJwyAJVimuk4VdHWUyVQtufu8io4uNJILPctxkOs51myVMErxwdXe6yFHWrzABRadSI9QpNGmvWkxpO8fjrdmVpqe3XgOUQZDZD"
1475091819500:#Lait 100% Canadien
1475091819501:#,"EAANkZCHOgFWUBAOfjVgEIn6mY1OHt6ZCwaZA8RGhMlDX9l2UUZCAOLylBVZBWpaXyFyyjRqo5eYnZBTYTgrRbIkZA95ZAiuJZBZBwqtjs60zNMNpj7Dn9rqnR4BI2czMR7lB84wIw0ikJSwXxZAcBpFBG0NFUP8q2spL7ZBitHw7Q9EY8QZDZD"
1475091819501:#Recharge with Milk
1475091819501:#,"CAACEdEose0cBAJ9NPmffbszUQ1HYObOGqdht5XWBoU7zABLhgZB6L53eyqVrt0CPxkZAXQpI0fGW7FHucQ0LgGtmRRlWP6eAQgZBSa6oaRibk9qZAp0xVGZCr4B6AdysmfVlbZCFjoZBYZCJ3sxN1yMdL5jz6yCWOZAAbAv00nXq5wURrgCUe3dXZAZBF2COnBm9YxXk5vFoWWJkQZDZD"
1475091819502:#BaronSamedi
1475091819502:"EAANkZCHOgFWUBAF2DJvKfMZAJCJICo0Xd3bT8GJP7zhUHuTUmnDdM1qOH8EUl8qUMj8CyzwSuDFRmKucSCRckOHrROq3wZA6EeQ8xB9NWIESniqvJ5dP9H9rHkEg4nZCFdpjeZCqZCk0jzCl6bXTTZBWxpuilujWsL6Ade6LvjJYAZDZD"
1475091819503:)
1475091819503:totalpagedata <- data.frame()
1475091819505:totalpostdata <- data.frame()
1475091819508:for (brand in 1:length(ftokens)) {
1475091819509:ftoken <- ftokens[brand]
1475091819510:## User Id
1475091819510:# Set up the user profile that will be accessing the data (must have all appropriate permissions/be Page Admin)
1475091819514:userid = "10153046308598756"
1475091819514:# Access public personal data; basically a ftoken test
1475091819517:me <- getUsers("me", token=ftoken)
1475091819518:print(me$name)
1475091819522:## Page Id
1475091819525:# Define which page will be used for the data collection. Change id's as necessary.
1475091819525:# Can use Pagename or ID; ID is generally preferable. Can be found through Facebook Business Manager: https://business.facebook.com/
1475091819526:pageid = me$id
1475091819527:# Acquisition -------------------------------------------------------------
1475091819529:# Grab/Load all Facebook Page & Post data until today for the Page defined.
1475091819530:page <- getPage(pageid, ftoken, n = posts)
1475091819533:page.store <- page
1475091819534:# Create new vectors in dataset with datetime, month, and day formattiong
1475091819535:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1475091819538:page$datetime <- format.facebook.date(page$created_time)
1475091819539:page$month <- format(page$datetime, "%Y-%m")
1475091819542:page$day <- format(page$datetime, "%Y-%m-%d")
1475091819543:page$datetime <- as.Date(page$datetime)
1475091819545:#page$month <- as.Date(page$month)
1475091819546:page$day <- as.Date(page$day)
1475091819549:} else {
1475091819550:print("Date fields already exist.")
1475091819553:}
1475091819554:# Processing --------------------------------------------------------------
1475091819557:# Process data to clean dataset and augment it with more data than default fields.
1475091819558:# Check full package documentation for reference: http://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf
1475091819561:## Cleaning =================================
1475091819563:# Page and Post Datasets
1475091819564:# Split dataset into two for pages and post data
1475091819565:# Create initial null sets
1475091819568:pagedata <- 0
1475091819568:postdata <- 0
1475091819572:## Appending =================================
1475091819573:### Page Metrics #############################
1475091819575:# Loop through all dates for the specified metric(s), and append the page dataset with metric values
1475091819576:# Some are automated, others are manual; after the script. Re-run from pull loop if there is an error; should auto-try until values are found.
1475091819580:# Page Metrics to automatically pull
1475091819581:# "page_fans_online" ,"page_fans_gender_age", "page_positive_feedback_by_type"
1475091819583:metrics = c("page_impressions","page_impressions_unique", "page_impressions_paid_unique", "page_engaged_users", "page_fans","page_consumptions") #c(
1475091819584:names(metrics) = c("Impressions","Total Reach",  "Paid Reach", "Engaged Users", "Fans", "Page Consumptions")
1475091819588:pagemetrics <- metrics
1475091819590:# Prep dataset by breaking into weeks
1475091819591:pagedata <- 0
1475091819592:pagedata <- cbind(page[1:length(range), c("from_id","from_name")],rev(range))
1475091819596:colnames(pagedata) = c("pageid", "page", "date")
1475091819598:pagedata$page = page$from_name[1]
1475091819599:pagedata$pageid = page$from_id[1]
1475091819600:divisor = 5
1475091819603:remainder = length(range)%%divisor;
1475091819605:pagedata <- pagedata[1:(nrow(pagedata)-remainder),]
1475091819610:weeks <- (nrow(pagedata)/5)-2
1475091819611:# Start Data Acquisition Loop
1475091819611:for (metric in 1:length(metrics)) {
1475091819616:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1]))
1475091819618:if ((metrics)[metric] == 'page_fans' | (metrics)[metric] == 'page_fans_gender_age') {
1475091819619:period = 'lifetime'
1475091819620:} else if ((metrics)[metric] == 'page_positive_feedback_by_type'| (metrics)[metric] == 'page_positive_feedback_by_type' ) {
1475091819623:period = 'day'
1475091819624:tempfloor = "2014-02-01"
1475091819627:temprange = seq(as.Date(tempfloor), as.Date(roof), by="days")
1475091819629:if (floor < tempfloor) {
1475091819632:tempremainder = length(range[(length(range)-length(temprange)+1):length(range)])%%5
1475091819633:tempweeks  = (length(temprange) - tempremainder)/5 - 2
1475091819634:weeks = tempweeks
1475091819635:} else {}
1475091819639:} else {
1475091819640:period = 'day'
1475091819642:weeks <- (nrow(pagedata)/5)-2
1475091819643:}
1475091819645:hold <- matrix(0, nrow=0, ncol=7)
1475091819649:for (week in 0:weeks) {
1475091819652:end <- pagedata$date[(week*5)+1]
1475091819653:start <- pagedata$date[((week+1)*5)+1]
1475091819657:print(paste('Finding', names(metrics)[metric],'for',pagedata$page[1],'from',start,'to',end))
1475091819660:pull <- NULL
1475091819661:attempt <- 1
1475091819665:while(is.null(pull) && attempt <= 10) {
1475091819666:attempt <- attempt + 1
1475091819669:try(
1475091819671:pull <- getInsights(object_id=pageid, token=ftoken, metric=metrics[metric], period=period, parms=paste0('&since=',start,'&until=',end))
1475091819674:)
1475091819677:if (is.null(pull)) {
1475091819678:print("Empty Pull. Re-attempting.")
1475091819679:print(paste("Attempt", attempt))
1475091819680:} else {
1475091819681:pull$datetime <- format.facebook.date(pull$end_time)
1475091819684:pull$day <- format(pull$datetime, "%Y-%m-%d")
1475091819686:pull$datetime <- as.Date(pull$datetime)
1475091819688:#page$month <- as.Date(page$month)
1475091819690:pull$day <- as.Date(pull$day)
1475091819694:if ((seq(from=start, to=(end-1), by = "days")[1] == pull$day[1]) & (seq(from=start, to=end, by = "days")[5] == pull$day[length(pull$day)]) == TRUE) {
1475091819696:print("Found Facebook data matching date range. Storing values.")
1475091819698:} else {
1475091819699:print("Did not find Facebook data matching dataset dates. Re-querying.")
1475091819701:print(paste("Attempt", attempt))
1475091819702:pull <- NULL}
1475091819713:if (attempt > 100) {
1475091819716:print('Too many attempts. Skipping.')
1475091819718:pull <- NULL
1475091819719:break
1475091819720:} else {}
1475091819723:}
1475091819728:pulllength <- ncol(pull)
1475091819731:rpull = pull[rev(rownames(pull)),]
1475091819733:hold <- rbind(hold,rpull)
1475091819736:rawhold <- hold
1475091819738:}
1475091819746:rhold = hold[rev(rownames(hold)),]
1475091819747:rhold$value = shift(rhold$value, 1)
1475091819749:hold = rhold[rev(rownames(rhold)),]
1475091819752:hold$value[1] = rawhold$value[1]
1475091819754:hours <- seq(0,23)
1475091819756:names(hours) <- paste("Hour", hours)
1475091819760:subtypes <- c('link','comment', 'like')
1475091819761:names(subtypes) <- c('Shares','Comments', 'Likes')
1475091819765:demographics <- c("F.65+","F.55-64", "F.45-54","F.35-44", "F.25-34", "F.18-24", "M.65+", "M.55-64", "M.45-54", "M.35-44","M.25-34", "M.18-24")
1475091819766:names(demographics)  <- c("Females 65+", "Females 55-64", "Females 45-54", "Females 35-44", "Females 25-34", "Females 18-24",  "Males 65+", "Males 55-64", "Males 45-54", "Males 35-44", "Males 25-34", "Males 18-24")
1475091819775:# Posting demographics at the end of the loop as metrics[metric]; fix the tail end of the loop.
1475091819782:if ((metrics)[metric] == 'page_positive_feedback_by_type') {
1475091819786:for (type in 1:length(subtypes)) {
1475091819787:typehold <- NA
1475091819789:typehold <- hold[hold$variable == subtypes[type],]
1475091819792:pagedata <- cbind(NA,pagedata)
1475091819794:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1475091819797:colnames(pagedata)[1] = paste0(tolower(names(subtypes[type])))
1475091819801:metrics <- c(metrics,subtypes[type])
1475091819806:}
1475091819813:} else if ((metrics)[metric] == 'page_fans_gender_age') {
1475091819816:for (demographic in 1:length(demographics)) {
1475091819819:print(names(demographics[demographic]))
1475091819823:typehold <- NA
1475091819825:typehold <- hold[hold$variable == demographics[demographic],]
1475091819827:typehold[typehold$value <= 10,] <- NA
1475091819833:pagedata <- cbind(NA,pagedata)
1475091819834:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1475091819837:colnames(pagedata)[1] = paste0(tolower(demographics[demographic]))
1475091819841:metrics <- c(metrics,demographics[demographic])
1475091819843:}
1475091819848:} else if ((metrics)[metric] == 'page_fans_online') {
1475091819852:for (hour in 1:length(hours)) {
1475091819855:typehold <- NA
1475091819856:typehold <- hold[hold$variable == hours[hour],]
1475091819863:pagedata <- cbind(NA,pagedata)
1475091819866:pagedata[2:(length(typehold$day)+1),1] <- (typehold$value)
1475091819869:colnames(pagedata)[1] = paste("hour",hours[hour])
1475091819872:metrics <- c(metrics,hours[hour])
1475091819874:}
1475091819875:} else {
1475091819879:pagedata <- cbind(NA,pagedata)
1475091819881:pagedata[2:(length(hold$day)+1),1] <- (hold$value)
1475091819883:colnames(pagedata)[1] = paste0(tolower(names(metrics[metric])))
1475091819888:}
1475091819894:cat("\n\n")
1475091819897:print(head(pagedata))
1475091819900:cat("\n")
1475091819903:if (length(metrics) == (length(pagemetrics)  + length(demographics) + length(hours))) {
1475091819904:break
1475091819906:} else {
1475091819909:}
1475091819919:pagedata.tempstore <- pagedata
1475091819926:#Page Metrics to remove because they have subtypes
1475091819929:metrics <- metrics[-c(which(metrics == "page_positive_feedback_by_type"),which(metrics == "page_fans_gender_age"),which(metrics == "page_fans_online"))]
1475091819936:# Page Metrics to manually create
1475091819938:metrics <- c(metrics,"organic reach")
1475091819942:names(metrics)[length(metrics)] <- c("Organic Reach")
1475091819945:pagedata <- cbind((as.numeric(pagedata$`total reach`) - as.numeric(pagedata$`paid reach`)),pagedata)
1475091819947:colnames(pagedata)[1] = "organic reach"
1475091819955:# Final dataset formatting
1475091819958:pagedatastore <- pagedata
1475091819962:#pagedata <- pagedatastore
1475091819965:pagedata2 <- pagedata
1475091819973:# reorder and null NA's for excel
1475091819975:pagedata2 <- pagedata2[,c((ncol(pagedata)-2), (ncol(pagedata)-1),(ncol(pagedata)),(1:(ncol(pagedata)-3)))]
1475091819978:pagedata2 <- pagedata2[2:nrow(pagedata2),]
1475091819980:#pagedata2[is.na(pagedata2)] <- ""
1475091819981:#pagedata2[pagedata2 == 0] <- ""
1475091819987:# store final dataset
1475091819991:pagedata <- pagedata2
1475091819997:### Post Metrics #############################
1475091820000:# Loop through all posts for the specified metric(s), and append the post dataset with metric values
1475091820004:# Most are automated, and will continue to retry through errors until a value is found.
1475091820007:# Manual modifications are run after initial data acquisition.
1475091820010:postmetrics = c("post_impressions_unique","post_impressions_paid_unique","post_video_views_organic","post_video_views_paid","post_video_complete_views_organic","post_video_complete_views_paid","post_engaged_users","post_consumptions_by_type")
1475091820013:names(postmetrics) = c("Total Reach", "Paid Reach","Organic Video Views", "Paid Video Views", "Organic Complete Video Views", "Paid Complete Video Views","Engaged Users", "Post Consumptions")
1475091820017:# Populate sets with values from pull
1475091820020:if ((is.null(page$datetime[1]) & is.null(page$month[1]) & is.null(page$day[1])) == TRUE) {
1475091820023:page$datetime <- format.facebook.date(page$created_time)
1475091820027:page$month <- format(page$datetime, "%Y-%m")
1475091820029:page$day <- format(page$datetime, "%Y-%m-%d")
1475091820035:page$datetime <- as.Date(page$datetime)
1475091820039:#page$month <- as.Date(page$month)
1475091820043:page$day <- as.Date(page$day)
1475091820046:} else {
1475091820049:print("Date fields already exist for Post Data.")
1475091820052:}
1475091820059:postdata <- 0
1475091820062:postdata <- page[page$day > floor,]
1475091820066:postdata <- postdata[postdata$day < roof,]
1475091820070:#write.xlsx(postdata, paste0(paste(me$name,floor,"to",roof,sep=" "),".xlsx"), row.names=FALSE)
1475091820076:# Name column for usability
1475091820077:colnames(postdata) = c("pageid", "page", "message", "created", "type", "link", "postid", "likes", "comments", "shares", "datetime", "month","day")
1475091820086:rows <- nrow(postdata)
1475091820099:lpostmetrics <- postmetrics
1475091820122:testlength <- 2
1475091820140:#length(postmetrics) instead of testlength; swapped out for hotfixes
1475091820161:for (pmetric in 1:length(postmetrics)) {
1475091820165:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1]))
1475091820169:if ((substr((postmetrics)[pmetric], 1, 17) == ('post_consumptions'))) {
1475091820171:phold <- data.frame(0,0,0,0,0,0,0, stringsAsFactors=FALSE)
1475091820176:names(phold) <- c("id","name","period","title","description","value","variable")
1475091820181:} else {
1475091820185:phold <- data.frame(0,0,0,0,0,0, stringsAsFactors=FALSE)
1475091820188:names(phold) <- c("id","name","period","title","description","value")
1475091820192:}
1475091820205:for (post in 1:nrow(postdata)) {
1475091820210:period <- "lifetime"
1475091820217:print(paste('Finding', names(postmetrics)[pmetric],'for',postdata$page[1], postdata$type[post],'post:',paste0(substr(postdata$message[post], 1, 80),"...")))
1475091820227:if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] != 'video')) {
1475091820232:print('Not a Facebook Video.')
1475091820237:phold <- rbind(phold, NA)
1475091820241:next()
1475091820247:} else if ((substr((postmetrics)[pmetric], 1, 10) == ('post_video')) & (postdata$type[post] == 'video') & (substr(postdata$link[post], 12, 18) != 'youtube') & (substr(postdata$link[post], 8, 15) != 'youtu.be')) {
1475091820254:} else {
1475091820258:}
1475091820267:postpull <- NULL
1475091820270:attempt <- 1
1475091820278:while( is.null(postpull) && attempt <= 100) {
1475091820282:attempt <- attempt + 1
1475091820287:try(
1475091820290:postpull <- getInsights(object_id=postdata$postid[post], token=ftoken, metric=postmetrics[pmetric], period=period)
1475091820293:,silent=TRUE
1475091820296:)
1475091820298:if (attempt > 10) {
1475091820302:print('Too many attempts. Skipping.')
1475091820305:postpull <- NULL
1475091820310:break
1475091820313:} else {
1475091820319:}
1475091820327:colnames(phold) <- names(postpull)
1475091820330:phold <- rbind(phold, postpull)
1475091820334:}
1475091820338:pholdstore <- phold
1475091820346:psubtypes <- c('other clicks','photo view', 'link clicks', 'video play')
1475091820351:names(psubtypes) <- c('Other Clicks','Photo Views', 'Link Clicks', 'Video Plays')
1475091820357:phold <- phold[-1,]
1475091820364:if ((postmetrics)[pmetric] == 'post_consumptions_by_type') {
1475091820369:postmetrics <- postmetrics[-pmetric]
1475091820373:pmetric <- pmetric + 1
1475091820380:for (ptype in (1:length(psubtypes))) {
1475091820385:ptyphehold <- NA
1475091820391:ptypehold <- phold[phold$variable == psubtypes[ptype],]
1475091820399:postdata <- cbind(NA,postdata)
1475091820404:postdata[match(substr(ptypehold$id, 1, 22), substr(postdata$postid, 1, 22)),1] <- ptypehold$value
1475091820409:colnames(postdata)[1] = paste0(tolower(names(psubtypes[ptype])))
1475091820411:postmetrics <- c(postmetrics,psubtypes[ptype])
1475091820414:}
1475091820430:} else {
1475091820434:postdata <- cbind(NA,postdata)
1475091820437:postdata[1:length(phold$value),1] <- phold$value
1475091820442:colnames(postdata)[1] = paste0(tolower(names(postmetrics[pmetric])))
1475091820447:}
1475091820460:cat("\n\n")
1475091820464:print(head(postdata))
1475091820466:cat("\n")
1475091820469:}
1475091820477:postdatastore <- postdata
1475091820489:# Post Metrics to manually create
1475091820494:postmetrics <- c(postmetrics,"organic reach")
1475091820499:names(postmetrics)[length(postmetrics)] <- c("Organic Reach")
1475091820507:postdata <- cbind((as.numeric(postdata$`total reach`) - as.numeric(postdata$`paid reach`)),postdata)
1475091820509:colnames(postdata)[1] = "organic reach"
1475091820517:# Final dataset formatting
1475091820523:#postdatastore <- postdata
1475091820526:#postdata <- postdatastore
1475091820532:#head(postdatastore[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))])
1475091820539:# reorder and null NA's for Excel
1475091820543:postdata2 <- postdata
1475091820548:postdata2 <- postdata2[,c((ncol(postdata)-12),(ncol(postdata)-11),(ncol(postdata)-9),(ncol(postdata)-2), (ncol(postdata)-1),ncol(postdata),(ncol(postdata)-6),(ncol(postdata)-7),(ncol(postdata)-8),(ncol(postdata)-10),(ncol(postdata)-5),(ncol(postdata)-4),(ncol(postdata)-3),(1:(ncol(postdata)-13)))]
1475091820553:postdata2[is.na(postdata2)] <- ""
1475091820557:postdata2[postdata2 == 0] <- ""
1475091820566:# store final dataset
1475091820569:postdata <- as.data.frame(postdata2)
1475091820577:# Outputs -----------------------------------------------------------------
1475091820585:pagedata[,-c(1:3)] <- sapply(pagedata[,-c(1:3)], as.numeric)
1475091820588:postdata[,-c(1:10)] <- sapply(postdata[,-c(1:10)], as.numeric)
1475091820600:datafolder <- "Data"
1475091820607:dir.create(file.path(getwd(), datafolder), showWarnings = FALSE)
1475091820617:# Rename columns for Excel readability
1475091820622:#names(pagedata) = c("Page ID", "Page Name", "Date", rev(names(metrics)))
1475091820625:# output Page dataset as final csv
1475091820630:#write.csv(pagedata, paste0(paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE, fileEncoding='iso-8859-1')
1475091820634:write.xlsx(pagedata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1475091820637:?wri
1475091820640:# Rename columns for Excel readability
1475091820645:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1475091820650:# output Post dataset as final Excel
1475091820656:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1475091820660:write.xlsx(postdata, paste0(getwd(),"/",datafolder,"/",paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1475091820666:# Raw Data
1475091820670:# output dataset as raw csv
1475091820673:#write.csv(page, paste0(paste(me$name,"Raw Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1475091820681:totalpagedata <- rbind(totalpagedata, pagedata)
1475091820687:totalpostdata <- rbind(totalpostdata, postdata)
1475091820696:}
1475091884864:write.xlsx(totalpagedata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Page Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1475091885255:# Rename columns for Excel readability
1475091885256:#names(postdata) = c("Page ID", "Page Name", "Created",  "Datetime", "Month", "Day", "Post ID", "Link", "Type", "Message", "Likes", "Comments", "Shares", rev(names(postmetrics)))
1475091885257:# output Post dataset as final Excel
1475091885258:#write.csv(postdata, paste0(paste(page$from_name[1],"Post Data",Sys.Date(), sep=" "),".csv"),row.names=FALSE)
1475091885262:write.xlsx(totalpostdata, paste0(getwd(),"/",datafolder,"/",paste("Baron","Post Data",Sys.Date(), sep=" "),".xlsx"), row.names=FALSE, showNA=FALSE)
1475091885970:# Images
1475091885970:#imagefolder <- paste0("Images","/",paste(page$from_name[1],sep=" "))#,floor,"to", roof, sep=" "))
1475091885971:#for (picture in (1:nrow(postdata))) {
1475091885972:#  dir.create(file.path(getwd(), imagefolder), showWarnings = FALSE)
1475091885972:#
1475091885972:#  imageURL <- fromJSON(getURL(paste('https://graph.facebook.com/v2.4/',postdata$`Post ID`[picture],'?fields=full_picture&access_token=',ftoken,sep="")))$full_picture
1475091885973:#  filename <- paste0(getwd(), "/", imagefolder, "/", postdata$`Post ID`[picture], ".png")
1475091885973:#
1475091885973:#  try(GET(imageURL, write_disk(filename, overwrite=TRUE)))
1475091885974:# Edit the core program and change feedback loop.
1475091885976:#
1475091885976:#}
1477323080458:score.Q1=c(10,3,7,9)
1477323080460:score.Q2=c(9,4,6,4)
1477323080461:score.Q3=c(9,6,8,6)
1477323084688:score.Q1=c(10,3,7,9)
1477323084688:score.Q2=c(9,4,6,4)
1477323084690:score.Q3=c(9,6,8,6)
1477323086672:pmax(score.Q1, score.Q2, score.Q3)
1477323090981:pmax(score.Q1, score.Q2)
1477323095014:pmax(score.Q1)
1477323105822:pmax(score.Q1, score.Q2_
1477323107751:pmax(score.Q1, score.Q2)
1477323122601:pmax(score.Q1, score.Q2, score.Q3)
1477922785012:R.version()
1477922791287:R.Version()
