# Completion -----------------
# Plugins to make completions in Vim more convenient

# deoplate version {{{
[[plugins]]
repo = 'jiangmiao/auto-pairs' # Vim plugin, insert or delete brackets, parens, quotes in pair
on_event = 'InsertCharPre'
hook_add = '''
let g:AutoPairsMapCR=0
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim' # Handles fenced code

[[plugins]]
repo = 'Shougo/deoplete.nvim'  
on_event = 'InsertCharPre'
depends = ['context_filetype.vim', 'auto-pairs', 'neosnippet.vim']
hook_add =
'''
let g:deoplete#enable_at_startup = 1 " Enable deoplete at startup
let g:deoplete#enable_smart_case = 1 " Smart case

" let g:deoplete#enable_refresh_always = 0 " Refresh immediately
let g:deoplete#auto_complete_delay = 0 " No delay




imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
smap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
inoremap <expr><CR> pumvisible() ? deoplete#mappings#close_popup() : "\<CR>"
'''

# snippets {{{

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_event = 'InsertCharPre'
depends = ['deoplete.nvim', 'neosnippet-snippets']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_event = 'InsertCharPre'

# [[plugins]]
repo = 'honza/vim-snippets'
on_event = 'InsertCharPre'

[[plugins]]
repo = 'scrooloose/snipmate-snippets'
on_event = 'InsertCharPre'
depends = ['deoplete.nvim', 'neosnippet.vim']
hook_add = '''
let g:neosnippet#enable_snipmate_compatibility = 1
'''

# }}}

# language server protocol {{{


[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
branch = 'next',
do = 'bash install.sh'
hook_add = '''
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'javascript.jsx': ['javascript-typescript-stdio'],
    \ }
'''
# }}}

# hook_add = '''
# let g:deoplete#ignore_sources = {}
# let g:deoplete#ignore_sources._ = ["neosnippet"]

# # " If we <Tab> inside a completion menu jump to the next item. 
# # " Otherwise check if there is any snippet to expand, if yes expand it. Also if inside a snippet and we need to jump <Tab> jumps. 
# # " If none of the above matches we just call our usual 'tab'.

# function! s:neosnippet_complete()
#   if pumvisible()
#     return "\<c-n>"
#   else
#     if neosnippet#expandable_or_jumpable() 
#       return "\<Plug>(neosnippet_expand_or_jump)"
#     endif
#     return "\<tab>"
#   endif
# endfunction

# imap <expr><TAB> <SID>neosnippet_complete()
# '''


# on_event = 'InsertCharPre'
# on_map = '<Plug>'


# [[plugins]]
# repo = 'Shougo/neco-syntax'
# # on_event = 'InsertCharPre'
# depends = 'deoplete.nvim'

# [[plugins]]
# repo = 'SirVer/ultisnips'
# on_event = 'InsertCharPre'
# depends = ['deoplete.nvim']
# hook_add = '''
# call deoplete#custom#set('ultisnips', 'matchers', ['matcher_fuzzy'])
# '''

# [[plugins]]
# repo = 'mhartington/nvim-typescript'
# on_event = 'InsertCharPre'
# depends = ['context_filetype']
# on_ft = ['typescript']

# asynccomplete.vim {{{
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete.vim' 
# merged = 0
# hook_add = '''
# echom "async"
# let g:g:asyncomplete_auto_popup = 1
# let g:asyncomplete_use_default_mappings = 1 " Tab Completion
# let g:asyncomplete_remove_duplicates = 1
# let g:asyncomplete_log_file = expand('$HOME/.config/nvim/pack/dein/log/asyncomplete.log') " for asyncomplete.vim log
# '''

# [[plugins]]
# repo = 'SirVer/ultisnips'
# hook_add = '''
# '''
# 
# [[plugins]]
# repo = 'honza/vim-snippets'
# 
# # # depends = 'async.vim'
# # # hook_add = '''
# # # '''
# #
# # [[plugins]]
# # repo= 'prabirshrestha/vim-lsp'
# #
# #
# #
# 
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete-buffer.vim'
# on_event = 'asyncomcplete_setup'
# depends = 'asyncomplete.vim'
# hook_add = '''
# call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
#     \ 'name': 'buffer',
#     \ 'whitelist': ['*'],
#     \ 'blacklist': ['go'],
#     \ 'completor': function('asyncomplete#sources#buffer#completor'),
#     \ }))
# '''
# 
# [[plugins]]
# repo = 'yami-beta/asyncomplete-omni.vim'
# on_event = 'asyncomcplete_setup'
# depends = 'asyncomplete.vim'
# hook_add = '''
# call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
# \ 'name': 'omni',
# \ 'whitelist': ['*'],
# \ 'blacklist': ['c', 'cpp', 'html'],
# \ 'completor': function('asyncomplete#sources#omni#completor')
# \  }))
# '''
# 
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete.vim'
# on_event = 'asyncomcplete_setup'
# depends = ['asyncomplete.vim', 'vim-gutentags']
# hook_add = '''
# call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
#     \ 'name': 'tags',
#     \ 'whitelist': ['c'],
#     \ 'completor': function('asyncomplete#sources#tags#completor'),
#     \ 'config': {
#     \    'max_file_size': 50000000,
#     \  },
#     \ }))
# '''
