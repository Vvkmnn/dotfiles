#! /usr/bin/env bash # Vivek Menon - vvkmnn.xyz 
# ################################################## 
# ################################################## 
# ######################        ####################
# ################                    ##############
# #############                #######   ###########
# ###########                #########     #########
# #########                 ########         #######
# ########                  ######            ######
# #######                   ######             #####
# ######            ####### ######              ####
# #####           ######### ######               ###
# #####           #######   ######               ###
# #####            ######    #####               ###
# #####             ######    ####               ###
# #####              ######    ###               ###
# #####               ######    #                ###
# ######               ######                   ####
# #######               #####                  #####
# ########               #####                ######
# ##########              #####             ########
# ############             #####          ##########
# ##############            #####       ############
# ##################                ################
# ##################################################
# ##################################################

case "$(uname -s)" in
   Linux|Darwin)

    # Zsh
    if [ -n "$BASH_VERSION" ]; then
        true

    # ZSH
    elif [ -n "$ZSH_VERSION" ]; then

        ## Antigen {{{

        # If no file, curl
        if [[ ! -f .antigen.zsh ]]; then
          curl -L git.io/antigen > .antigen.zsh 
        fi


        # Essential
        # [ -f  .antigen.zsh ] && . .antigen.zsh
        source .antigen.zsh

        # Load the oh-my-zsh's library.
        # antigen use oh-my-zsh

        # Bundles from the default repo (robbyrussell's oh-my-zsh).
        # antigen bundle git
        # antigen bundle heroku
        # antigen bundle pip
        # antigen bundle lein
        # antigen bundle command-not-found

        # Syntax highlighting bundle.
        # antigen bundle zsh-users/zsh-syntax-highlighting

        # Load the theme.
        # antigen theme robbyrussell
        # antigen theme romkatv/powerlevel10k

        # Tell Antigen that you're done.
        antigen apply
        # }}}

        # Zim {{{
        # Define Zim location
        # : ${ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim}
        # }}} End configuration added by Zim install
        # }}}

        # zinit {{{
        # ### Preload
        # source ~/.zinit/bin/zinit.zsh
   
        # ### Packages
        # # regular plugins loaded without investigating.
        # zinit light zsh-users/zsh-autosuggestions
        # zinit light zdharma/fast-syntax-highlighting

        # # Completions
        # zinit ice blockf
        # zinit light zsh-users/zsh-completions

        # # Fun
        # zinit light paulirish/git-open # TODO Fix; not working
        # zinit load knu/z

        # # zinit light denysdovhan/spaceship-prompt

        # # Plugin history-search-multi-word loaded with investigating.
        # zinit load zdharma/history-search-multi-word

        # # After automatic unpacking it provides program "fzf".
        # zinit ice from"gh-r" as"program"
        # zinit load junegunn/fzf-bin

        # # fast async ++ spaceship?
        # zinit load agkozak/agkozak-zsh-prompt

        # # Load the pure theme, with zsh-async library that's bundled with it.
        # # zinit ice pick"async.zsh" src"pure.zsh"
        # # zinit light sindresorhus/pure

        # # TODO https://zdharma.org/zinit/wiki/GALLERY/
        # # zinit ice wait'!' lucid nocompletions \
        # #              compile"{zinc_functions/*,segments/*,zinc.zsh}" \
        # #                       atload'!prompt_zinc_setup; prompt_zinc_precmd'
        # # zinit load robobenklein/zinc


       # # coreutils package from Homebrew; you can also use
       # # https://github.com/ogham/exa)
       # zinit ice atclone"dircolors -b LS_COLORS > c.zsh" atpull'%atclone' pick"c.zsh" nocompile'!'
       # zinit light trapd00r/LS_COLORS

       # # make'!...' -> run make before atclone & atpull
       # # zinit ice as"program" make'!' atclone'./direnv hook zsh > zhook.zsh' atpull'%atclone' src"zhook.zsh"
       # # zinit light direnv/direnv
    
       # ### post load 
        # autoload -Uz _zinit
        # (( ${+_comps} )) && _comps[zinit]=_zinit

       # ### variables
       # # TODO not working? https://github.com/marlonrichert/zsh-autocomplete
       # zstyle ':autocomplete:tab:*' fzf yes
       # zstyle ':completion:*' verbose no
       # zstyle ':autocomplete:list-choices:*' max-lines 1

       # bindkey $key[Up] up-line-or-history
       # bindkey $key[Down] down-line-or-history

       # # Exit status
       # # AGKOZAK_CUSTOM_PROMPT='%(!!?@?..%B%F{red}(%?%)%f%b )'
       # # Command execution time
       # # AGKOZAK_CUSTOM_PROMPT+='%(9V.%9v .)'
       # # Username and hostname
       # AGKOZAK_CUSTOM_PROMPT+='%(!.%S%B.%B%F{green})%n%1v%(!.%b%s.%f%b) '
       # # Path
       # AGKOZAK_CUSTOM_PROMPT+=$'%B%F{blue}%2v%f%b\n'
       # # Prompt character
       # AGKOZAK_CUSTOM_PROMPT+=' ॐ    ' #'%(4V.:.%#) '
       # # Git status
       # AGKOZAK_CUSTOM_RPROMPT+='%(3V.%F{yellow}%3v%f.) '
       # # Bot face status
       # AGKOZAK_CUSTOM_RPROMPT+='v@%M %(?,%F{green}[-_-]%f,%F{red}[ಠ_ಠ]%f) ' 
         #  }}}

        # # zplug {{{

        # Check if zplug is installed
        # if [[ ! -d ~/.zplug ]]; then
        #   git clone https://github.com/zplug/zplug ~/.zplug
        #   source ~/.zplug/init.zsh && zplug update --self
        # fi

        # Essential
        # source ~/.zplug/init.zsh

        # zplug "plugins/git",   from:oh-my-zsh
        # zplug "paulirish/git-open", as:plugin
        # zplug "zsh-users/zsh-syntax-highlighting"
        # zplug "zsh-users/zsh-history-substring-search"
        # zplug "zsh-users/zsh-completions"
        # # zplug "zpm-zsh/autoenv"
        # # zplug "zpm-zsh/colors"
        # zplug "knu/z", use:z.sh
        # zplug "denysdovhan/spaceship-prompt", use:spaceship.zsh, from:github, as:theme

        # # Install packages that have not been installed yet
        # if ! zplug check --verbose; then
        #     printf "Install? [y/N]: "
        #     if read -q; then
        #         echo; zplug install
        #     else
        #         echo
        #     fi
        # fi

        # zplug load
        # }}}
        
    ## nvm
    export NVM_DIR="$HOME/.nvm"
    [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh" # This loads nvm
    # Bash
    
    elif [ -n "$BASH_VERSION" ]; then

      # ~/.bashrc: executed by bash(1) for non-login shells.
       
       # If not running interactively, don't do anything
       case $- in
           *i*) ;;
             *) return;;
       esac
       
       # don't put duplicate lines or lines starting with space in the history.
       # See bash(1) for more options
       HISTCONTROL=ignoreboth
       
       # append to the history file, don't overwrite it
       shopt -s histappend
       
       # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
       HISTSIZE=1000
       HISTFILESIZE=2000
       
       # check the window size after each command and, if necessary,
       # update the values of LINES and COLUMNS.
       shopt -s checkwinsize
       
       # If set, the pattern "**" used in a pathname expansion context will
       # match all files and zero or more directories and subdirectories.
       #shopt -s globstar
       
       # make less more friendly for non-text input files, see lesspipe(1)
       #[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
       
       # set variable identifying the chroot you work in (used in the prompt below)
       if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
           debian_chroot=$(cat /etc/debian_chroot)
       fi
       
       # set a fancy prompt (non-color, unless we know we "want" color)
       case "$TERM" in
           xterm-color|*-256color) color_prompt=yes;;
       esac
       
       # uncomment for a colored prompt, if the terminal has the capability; turned
       # off by default to not distract the user: the focus in a terminal window
       # should be on the output of commands, not on the prompt
       #force_color_prompt=yes
       
       if [ -n "$force_color_prompt" ]; then
           if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
       	# We have color support; assume it's compliant with Ecma-48
       	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
       	# a case would tend to support setf rather than setaf.)
       	color_prompt=yes
           else
       	color_prompt=
           fi
       fi
       
       if [ "$color_prompt" = yes ]; then
           PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
       else
           PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
       fi
       unset color_prompt force_color_prompt
       
       # If this is an xterm set the title to user@host:dir
       case "$TERM" in
       xterm*|rxvt*)
           PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
           ;;
       *)
           ;;
       esac
       
       # enable color support of ls and also add handy aliases
       if [ -x /usr/bin/dircolors ]; then
           test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
           alias ls='ls --color=auto'
           #alias dir='dir --color=auto'
           #alias vdir='vdir --color=auto'
       
           #alias grep='grep --color=auto'
           #alias fgrep='fgrep --color=auto'
           #alias egrep='egrep --color=auto'
       fi
       
       # colored GCC warnings and errors
       #export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
       
       # some more ls aliases
       #alias ll='ls -l'
       #alias la='ls -A'
       #alias l='ls -CF'
       
       # Alias definitions.
       # You may want to put all your additions into a separate file like
       # ~/.bash_aliases, instead of adding them here directly.
       # See /usr/share/doc/bash-doc/examples in the bash-doc package.
       
       # if [ -f ~/.bash_aliases ]; then
       #     . ~/.bash_aliases
       # fi
       
       # enable programmable completion features (you don't need to enable
       # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
       # sources /etc/bash.bashrc).
       # if ! shopt -oq posix; then
       #   if [ -f /usr/share/bash-completion/bash_completion ]; then
       #     . /usr/share/bash-completion/bash_completion
       #   elif [ -f /etc/bash_completion ]; then
       #     . /etc/bash_completion
       #   fi
       # fi

    # FiSH
    elif [ -n "$FISH_VERSION" ]; then
        echo "TODO fish"
    #   set fish_greeting

    else
        echo "TODO .shell"
    #   # asume something else
    fi

    ;;
   # Darwin)
     # echo '[¬_¬] Loading Darwin shell...'
    # autoenv
    # source $(brew --prefix autoenv)/activate.sh

    ## gcloud
    # if [ -f "${HOME}/.google/path.zsh.inc" ]; then source "${HOME}/.google/path.zsh.inc"; fi
    # if [ -f "${HOME}/.google/completion.zsh.inc" ]; then source "${HOME}/.google/completion.zsh.inc"; fi

    ## fzf
    # [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

    ## z
    # . /usr/local/etc/profile.d/z.sh


    ## nvm
    # export NVM_DIR="$HOME/.nvm"
    # [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm

    # conda
    # !! Contents within this block are managed by 'conda init' !!
    # __conda_setup="$('/usr/local/anaconda3/bin/conda' 'shell.zsh' 'hook' 2>/dev/null)"
    # if [ $? -eq 0 ]; then
    #         eval "$__conda_setup"
    # else
    #         if [ -f "/usr/local/anaconda3/etc/profile.d/conda.sh" ]; then
    #                 . "/usr/local/anaconda3/etc/profile.d/conda.sh"
    #         else
    #                 export PATH="/usr/local/anaconda3/bin:$PATH"
    #         fi
    # fi
    # unset __conda_setup

    # Zim (Framework)
    # export ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim                     # Define zim location
    # [[ -s ${ZIM_HOME}/init.zsh ]] && source ${ZIM_HOME}/init.zsh # Start zim

    # elif [ -n "$BASH_VERSION" ]; then
    # 	# assume Bash
    # 	echo "fuckbash"

    # FiSH
    # elif [ -n "$FISH_VERSION" ]; then
    # 	set fish_greeting

    # else
    # 	echo "fuckthis"
    # 	# asume something else
    # fi

    # conda 
    # !! Contents within this block are managed by 'conda init' !!
    # __conda_setup="$('/usr/local/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
    # if [ $? -eq 0 ]; then
    #     eval "$__conda_setup"
    # else
    #     if [ -f "/usr/local/anaconda3/etc/profile.d/conda.sh" ]; then
    #         . "/usr/local/anaconda3/etc/profile.d/conda.sh"
    #     else
    #         export PATH="/usr/local/anaconda3/bin:$PATH"
    #     fi
    # fi
    # unset __conda_setup
    
    # # Zim (Framework)
    # export ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim # Define zim location
    # [[ -s ${ZIM_HOME}/init.zsh ]] && source ${ZIM_HOME}/init.zsh # Start zim
    # ;;

    # Linux)
    #  echo '[¬_¬] Loading Linux shell...'
    #  ;;

    CYGWIN*|MINGW32*|MSYS*|MINGW*)
     echo '[¬_¬] TODO DOS shell'
     ;;

esac
