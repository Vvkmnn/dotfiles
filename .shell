#! /usr/bin/env bash # Vivek Menon - vvkmnn.xyz 
# ################################################## 
# ################################################## 
# ######################        ####################
# ################                    ##############
# #############                #######   ###########
# ###########                #########     #########
# #########                 ########         #######
# ########                  ######            ######
# #######                   ######             #####
# ######            ####### ######              ####
# #####           ######### ######               ###
# #####           #######   ######               ###
# #####            ######    #####               ###
# #####             ######    ####               ###
# #####              ######    ###               ###
# #####               ######    #                ###
# ######               ######                   ####
# #######               #####                  #####
# ########               #####                ######
# ##########              #####             ########
# ############             #####          ##########
# ##############            #####       ############
# ##################                ################
# ##################################################
# ##################################################

case "$(uname -s)" in
   Linux)

    # Zsh
    if [ -n "$BASH_VERSION" ]; then
        true

    # ZSH
    elif [ -n "$ZSH_VERSION" ]; then

         ## ---[ ZSH Options ]----------------------------------------------------
         ## General
         setopt   NO_BEEP CLOBBER
         setopt   MULTIOS CORRECT_ALL AUTO_CD
         setopt   CD_ABLE_VARS

         ## does not work together nicely with menu select:
         setopt   BASH_AUTO_LIST
         setopt   NO_LIST_AMBIGUOUS

         ## History
         setopt   INC_APPEND_HISTORY EXTENDED_HISTORY HIST_IGNORE_DUPS HIST_FIND_NO_DUPS
         setopt	 HIST_EXPIRE_DUPS_FIRST
         #setopt  SHARE_HISTORY
         setopt   HIST_REDUCE_BLANKS HIST_SAVE_NO_DUPS
         HISTSIZE=1000
         SAVEHIST=1000
         HISTFILE=~/.zhistory
         DIRSTACKSIZE=20


         ## ---[ Modules ]-------------------------------------------------------
         zmodload -i zsh/complist
         autoload -Uz compinit
         compinit


         ## ---[ Completition system ]-------------------------------------------

         ## If unset, the cursor is set to the end of the word if completion is
         ## started. Otherwise it stays there and completion is done from both ends.
         ## This is needed for the prefix completer
         setopt COMPLETE_IN_WORD
         ## don't move the cursor to the end AFTER a completion was inserted
         #setopt NO_ALWAYS_TO_END

         #setopt LIST_PACKED

         ## Prevents aliases on the command line from being internally substituted before completion is attempted.
         ## The effect is to make the alias a distinct command for completion purposes.
         ##setopt COMPLETE_ALIASES

         ## general completion technique
         ##zstyle ':completion:*' use-compctl false

         ### which completers to use
         ###
         ### for use with expand-or-complete-prefix :
         ###zstyle ':completion:*' completer _complete _match _list _ignored _correct _approximate
         ### for use with expand-or-complete :
         ##zstyle ':completion:*' completer _complete _match _prefix:-complete _list _correct _approximate _prefix:-approximate _ignored
         ### _list anywhere to the completers always only lists completions on first tab

         ##zstyle ':completion:*:prefix-complete:*' completer _complete
         ##zstyle ':completion:*:prefix-approximate:*' completer _approximate

         ### configure the match completer, more flexible of GLOB_COMPLETE
         ### with original set to only it doesn't act like a `*' was inserted at the cursor position
         ##zstyle ':completion:*:match:*' original only


         ##zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

         ### allow 2 erros in correct completer
         ##zstyle ':completion:*:correct:*' max-errors 2 not-numeric
         #### allow one error for every three characters typed in approximate completer
         ##zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX + $#SUFFIX) / 3 )) numeric )'

         ## use menu selection with TAB-TAB
         ##zstyle ':completion:*' menu select=1
         ## zstyle ':completion:*' menu select=1 _list _complete _ignored _approximate

         ## Add colors in completions
         #eval $(dircolors)
         #zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
         #autoload colors && colors

         ## Messages/warnings format
         #zstyle ':completion:*' verbose yes
         #zstyle ':completion:*:descriptions' format $'%{\e[01;31m%}---- %d%{\e[m%}'
         #zstyle ':completion:*:messages' format $'%{\e[01;04;31m%}---- %d%{\e[m%}'
         #zstyle ':completion:*:warnings' format $'%{\e[01;04;31m%}---- No matches for: %d%{\e[m%}'
         #zstyle ':completion:*:corrections' format $'%{\e[0;31m%}%d (errors: %e)%{\e[m%}'
         ## make completions appear below the description of which listing they come from
         #zstyle ':completion:*' group-name ''
         #zstyle ':completion:*:default' select-prompt %SScrolling active: current selection at %p%s

         ### Some functions, like _apt and _dpkg, are very slow. You can use a cache in order to proxy the list of results:
         #zstyle ':completion:*' use-cache on
         #zstyle ':completion:*' cache-path ~/.zsh/cache

         ## complete man pages
         #zstyle ':completion:*:manuals' separate-sections true
         #zstyle ':completion:*:manuals.(^1*)' insert-sections true

         ## ignore uninteresting user accounts
         #zstyle ':completion:*:*:*:users' ignored-patterns \
         #    adm apache avahi avahi-autoipd backup bind bin cl-builder colord couchdb daemon dictd festival \
         #    games gdm gnats haldaemon halt hplip ident identd irc jetty junkbust kernoops libuuid lightdm \
         #    list lp mail mailnull man messagebus named news nfsnobody nobody nscd ntp operator pcap postfix \
         #    postgres proxy pulse radvd rpc rpcuser rpm rtkit saned shutdown speech-dispatcher squid sshd \
         #    statd stunnel4 sync sys syslog uucp usbmux vcsa vde2-net www-data xfs

         ## ignore uninteresting hosts
         #zstyle ':completion:*:*:*:hosts' ignored-patterns \
         #    localhost loopback ip6-localhost ip6-loopback localhost6 localhost6.localdomain6 localhost.localdomain

         ##hosts=( $(</etc/hosts) )
         ## 1. All /etc/hosts hostnames are in autocomplete
         ## 2. If you have a comment in /etc/hosts like #%foobar.domain,
         ##    then foobar.domain will show up in autocomplete!
         ##myhosts=( $(awk '/^[^#]/ {print $2 $3" "$4" "$5}' /etc/hosts | grep -v ip6- && grep "^#%" /etc/hosts | awk -F% '{print $2}') )
         ##zstyle ':completion:*:(ping|mtr|ssh|scp|sftp):*' hosts $myhosts
         ##zstyle ':completion:*:(ssh|scp|sftp):*' users $users


         ## tab completion for PID :D
         #zstyle ':completion:*:*:kill:*' menu yes select
         #zstyle ':completion:*:kill:*' force-list always

         ### If you end up using a directory as argument, this will remove the trailing slash (usefull in ln):
         ##zstyle ':completion:*' squeeze-slashes true

         ### cd will never select the parent directory (e.g.: cd ../<TAB>):
         #zstyle ':completion:*:(cd|mv|cp):*' ignore-parents parent pwd

         #zstyle ':completion:*:(ls|mv|cd|chdir|pushd|popd):*' special-dirs ..

         ### ignores filenames already in the line
         #zstyle ':completion:*:(rm|kill|diff):*' ignore-line yes

         ### Ignore completion functions for commands you don't have:
         #zstyle ':completion:*:functions' ignored-patterns '_*'

         ### don't complete backup files as executables
         #zstyle ':completion:*:complete:-command-::commands' ignored-patterns '*\~'

         ## A newly added command will may not be found or will cause false
         ## correction attempts, if you got auto-correction set. By setting the
         ## following style, we force accept-line() to rehash, if it cannot
         ## find the first word on the command line in the $command[] hash.
         #zstyle ':acceptline:*' rehash true


         # ---[ Window title ]--------------------------------------------------
         case $TERM in
             *xterm*|rxvt|rxvt-unicode|rxvt-256color|rxvt-unicode-256color|(dt|k|E)term)
                 precmd () { print -Pn "\e]0;[%n@%M][%~]%#\a" }
                 preexec () { print -Pn "\e]0;[%n@%M][%~]%# ($1)\a" }
             ;;
             screen)
               precmd () {
                 print -Pn "\e]83;title \"$1\"\a"
                 print -Pn "\e]0;$TERM - (%L) [%n@%M]%# [%~]\a"
               }
               preexec () {
                 print -Pn "\e]83;title \"$1\"\a"
                 print -Pn "\e]0;$TERM - (%L) [%n@%M]%# [%~] ($1)\a"
               }
             ;;
         esac

        # zplug {{{

        # Check if zplug is installed
        if [[ ! -d ~/.zplug ]]; then
          git clone https://github.com/zplug/zplug ~/.zplug
          source ~/.zplug/init.zsh && zplug update --self
        fi

        # Essential
        source ~/.zplug/init.zsh

        zplug "plugins/git",   from:oh-my-zsh
        zplug "paulirish/git-open", as:plugin
        zplug "zsh-users/zsh-syntax-highlighting"
        zplug "zsh-users/zsh-completions"
        # zplug "zpm-zsh/autoenv"
        # zplug "zpm-zsh/colors"
        zplug "knu/z", use:z.sh
        zplug "denysdovhan/spaceship-prompt", use:spaceship.zsh, from:github, as:theme

        # Install packages that have not been installed yet
        if ! zplug check --verbose; then
            printf "Install? [y/N]: "
            if read -q; then
                echo; zplug install
            else
                echo
            fi
        fi

        zplug load
        # }}}
        

    # Bash
    elif [ -n "$BASH_VERSION" ]; then

      # ~/.bashrc: executed by bash(1) for non-login shells.
       
       # If not running interactively, don't do anything
       case $- in
           *i*) ;;
             *) return;;
       esac
       
       # don't put duplicate lines or lines starting with space in the history.
       # See bash(1) for more options
       HISTCONTROL=ignoreboth
       
       # append to the history file, don't overwrite it
       shopt -s histappend
       
       # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
       HISTSIZE=1000
       HISTFILESIZE=2000
       
       # check the window size after each command and, if necessary,
       # update the values of LINES and COLUMNS.
       shopt -s checkwinsize
       
       # If set, the pattern "**" used in a pathname expansion context will
       # match all files and zero or more directories and subdirectories.
       #shopt -s globstar
       
       # make less more friendly for non-text input files, see lesspipe(1)
       #[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
       
       # set variable identifying the chroot you work in (used in the prompt below)
       if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
           debian_chroot=$(cat /etc/debian_chroot)
       fi
       
       # set a fancy prompt (non-color, unless we know we "want" color)
       case "$TERM" in
           xterm-color|*-256color) color_prompt=yes;;
       esac
       
       # uncomment for a colored prompt, if the terminal has the capability; turned
       # off by default to not distract the user: the focus in a terminal window
       # should be on the output of commands, not on the prompt
       #force_color_prompt=yes
       
       if [ -n "$force_color_prompt" ]; then
           if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
       	# We have color support; assume it's compliant with Ecma-48
       	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
       	# a case would tend to support setf rather than setaf.)
       	color_prompt=yes
           else
       	color_prompt=
           fi
       fi
       
       if [ "$color_prompt" = yes ]; then
           PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
       else
           PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
       fi
       unset color_prompt force_color_prompt
       
       # If this is an xterm set the title to user@host:dir
       case "$TERM" in
       xterm*|rxvt*)
           PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
           ;;
       *)
           ;;
       esac
       
       # enable color support of ls and also add handy aliases
       if [ -x /usr/bin/dircolors ]; then
           test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
           alias ls='ls --color=auto'
           #alias dir='dir --color=auto'
           #alias vdir='vdir --color=auto'
       
           #alias grep='grep --color=auto'
           #alias fgrep='fgrep --color=auto'
           #alias egrep='egrep --color=auto'
       fi
       
       # colored GCC warnings and errors
       #export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
       
       # some more ls aliases
       #alias ll='ls -l'
       #alias la='ls -A'
       #alias l='ls -CF'
       
       # Alias definitions.
       # You may want to put all your additions into a separate file like
       # ~/.bash_aliases, instead of adding them here directly.
       # See /usr/share/doc/bash-doc/examples in the bash-doc package.
       
       # if [ -f ~/.bash_aliases ]; then
       #     . ~/.bash_aliases
       # fi
       
       # enable programmable completion features (you don't need to enable
       # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
       # sources /etc/bash.bashrc).
       # if ! shopt -oq posix; then
       #   if [ -f /usr/share/bash-completion/bash_completion ]; then
       #     . /usr/share/bash-completion/bash_completion
       #   elif [ -f /etc/bash_completion ]; then
       #     . /etc/bash_completion
       #   fi
       # fi

    # FiSH
    elif [ -n "$FISH_VERSION" ]; then
        echo "TODO fish"
    #   set fish_greeting

    else
        echo "TODO .shell"
    #   # asume something else
    fi

    ;;
   Darwin)
     echo '[¬_¬] Loading Darwin shell...'
    # autoenv
    # source $(brew --prefix autoenv)/activate.sh

    ## gcloud
    if [ -f "${HOME}/.google/path.zsh.inc" ]; then source "${HOME}/.google/path.zsh.inc"; fi
    if [ -f "${HOME}/.google/completion.zsh.inc" ]; then source "${HOME}/.google/completion.zsh.inc"; fi

    ## fzf
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

    ## z
    . /usr/local/etc/profile.d/z.sh

    ## nvm
    export NVM_DIR="$HOME/.nvm"
    [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh" # This loads nvm

    ## nvm
    export NVM_DIR="$HOME/.nvm"
    [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm

    # conda
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('/usr/local/anaconda3/bin/conda' 'shell.zsh' 'hook' 2>/dev/null)"
    if [ $? -eq 0 ]; then
            eval "$__conda_setup"
    else
            if [ -f "/usr/local/anaconda3/etc/profile.d/conda.sh" ]; then
                    . "/usr/local/anaconda3/etc/profile.d/conda.sh"
            else
                    export PATH="/usr/local/anaconda3/bin:$PATH"
            fi
    fi
    unset __conda_setup

    # Zim (Framework)
    # export ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim                     # Define zim location
    # [[ -s ${ZIM_HOME}/init.zsh ]] && source ${ZIM_HOME}/init.zsh # Start zim

    # elif [ -n "$BASH_VERSION" ]; then
    # 	# assume Bash
    # 	echo "fuckbash"

    # FiSH
    # elif [ -n "$FISH_VERSION" ]; then
    # 	set fish_greeting

    # else
    # 	echo "fuckthis"
    # 	# asume something else
    # fi

    # conda 
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('/usr/local/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/usr/local/anaconda3/etc/profile.d/conda.sh" ]; then
            . "/usr/local/anaconda3/etc/profile.d/conda.sh"
        else
            export PATH="/usr/local/anaconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
    
    # Zim (Framework)
    export ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim # Define zim location
    [[ -s ${ZIM_HOME}/init.zsh ]] && source ${ZIM_HOME}/init.zsh # Start zim
    ;;

    Linux)
     echo '[¬_¬] Loading Linux shell...'
     ;;

    CYGWIN*|MINGW32*|MSYS*|MINGW*)
     echo '[¬_¬] '
     ;;

esac
